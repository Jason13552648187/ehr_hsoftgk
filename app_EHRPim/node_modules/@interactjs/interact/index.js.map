{
	"version": 3,
	"sources": [
		"index.ts"
	],
	"names": [
		"isNonNativeEvent",
		"Scope",
		"browser",
		"events",
		"utils",
		"globalEvents",
		"scope",
		"init",
		"win",
		"interact",
		"target",
		"options",
		"interactable",
		"interactables",
		"get",
		"new",
		"global",
		"use",
		"plugin",
		"usePlugin",
		"isSet",
		"context",
		"on",
		"type",
		"listener",
		"is",
		"string",
		"search",
		"trim",
		"split",
		"array",
		"eventType",
		"object",
		"prop",
		"actions",
		"push",
		"add",
		"document",
		"off",
		"index",
		"indexOf",
		"splice",
		"remove",
		"debug",
		"getPointerAverage",
		"pointer",
		"pointerAverage",
		"getTouchBBox",
		"touchBBox",
		"getTouchDistance",
		"touchDistance",
		"getTouchAngle",
		"touchAngle",
		"getElementRect",
		"dom",
		"getElementClientRect",
		"matchesSelector",
		"closest",
		"supportsTouch",
		"supportsPointerEvent",
		"stop",
		"interaction",
		"interactions",
		"list",
		"pointerMoveTolerance",
		"newValue",
		"number",
		"addDocument",
		"doc",
		"removeDocument",
		"version"
	],
	"mappings": "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",
	"sourcesContent": [
		"/** @module interact */\n\nimport '@interactjs/types/index'\nimport { Options } from '@interactjs/core/defaultOptions'\nimport Interactable from '@interactjs/core/Interactable'\nimport { isNonNativeEvent, Scope } from '@interactjs/core/scope'\nimport browser from '@interactjs/utils/browser'\nimport events from '@interactjs/utils/events'\nimport * as utils from '@interactjs/utils/index'\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    interact?: InteractStatic\n  }\n}\n\nexport interface InteractStatic {\n  (target: Interact.Target, options?: Options): Interactable\n  on: typeof on\n  pointerMoveTolerance: typeof pointerMoveTolerance\n  stop: typeof stop\n  supportsPointerEvent: typeof supportsPointerEvent\n  supportsTouch: typeof supportsTouch\n  debug: typeof debug\n  off: typeof off\n  isSet: typeof isSet\n  use: typeof use\n  getPointerAverage: typeof utils.pointer.pointerAverage\n  getTouchBBox: typeof utils.pointer.touchBBox\n  getTouchDistance: typeof utils.pointer.touchDistance\n  getTouchAngle: typeof utils.pointer.touchAngle\n  getElementRect: typeof utils.dom.getElementRect\n  getElementClientRect: typeof utils.dom.getElementClientRect\n  matchesSelector: typeof utils.dom.matchesSelector\n  closest: typeof utils.dom.closest\n  addDocument: typeof scope.addDocument\n  removeDocument: typeof scope.removeDocument\n  dynamicDrop: (newValue?: boolean) => boolean | Interact.interact\n  version: string\n}\n\nconst globalEvents: any = {}\nconst scope = new Scope()\n\nexport function init (win: Window) {\n  scope.init(win)\n\n  return interact\n}\n\n/**\n * ```js\n * interact('#draggable').draggable(true)\n *\n * var rectables = interact('rect')\n * rectables\n *   .gesturable(true)\n *   .on('gesturemove', function (event) {\n *       // ...\n *   })\n * ```\n *\n * The methods of this variable can be used to set elements as interactables\n * and also to change various default settings.\n *\n * Calling it as a function and passing an element or a valid CSS selector\n * string returns an Interactable object which has various methods to configure\n * it.\n *\n * @global\n *\n * @param {Element | string} target The HTML or SVG Element to interact with\n * or CSS selector\n * @return {Interactable}\n */\nexport const interact: InteractStatic = function interact (target: Interact.Target, options?: any) {\n  let interactable = scope.interactables.get(target, options)\n\n  if (!interactable) {\n    interactable = scope.interactables.new(target, options)\n    interactable.events.global = globalEvents\n  }\n\n  return interactable\n} as InteractStatic\n\n/**\n * Use a plugin\n *\n * @alias module:interact.use\n *\n * @param {Object} plugin\n * @param {function} plugin.install\n * @return {interact}\n */\ninteract.use = use\nfunction use (plugin: Interact.Plugin, options?: { [key: string]: any }) {\n  scope.usePlugin(plugin, options)\n\n  return interact\n}\n\n/**\n * Check if an element or selector has been set with the {@link interact}\n * function\n *\n * @alias module:interact.isSet\n *\n * @param {Element} element The Element being searched for\n * @return {boolean} Indicates if the element or CSS selector was previously\n * passed to interact\n */\ninteract.isSet = isSet\nfunction isSet (target: Interact.Element, options?: any) {\n  return !!scope.interactables.get(target, options && options.context)\n}\n\n/**\n * Add a global listener for an InteractEvent or adds a DOM event to `document`\n *\n * @alias module:interact.on\n *\n * @param {string | array | object} type The types of events to listen for\n * @param {function} listener The function event (s)\n * @param {object | boolean} [options] object or useCapture flag for\n * addEventListener\n * @return {object} interact\n */\ninteract.on = on\nfunction on (type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?: object) {\n  if (utils.is.string(type) && type.search(' ') !== -1) {\n    type = type.trim().split(/ +/)\n  }\n\n  if (utils.is.array(type)) {\n    for (const eventType of (type as any[])) {\n      interact.on(eventType, listener, options)\n    }\n\n    return interact\n  }\n\n  if (utils.is.object(type)) {\n    for (const prop in type) {\n      interact.on(prop, (type as any)[prop], listener)\n    }\n\n    return interact\n  }\n\n  // if it is an InteractEvent type, add listener to globalEvents\n  if (isNonNativeEvent(type, scope.actions)) {\n    // if this type of event was never bound\n    if (!globalEvents[type]) {\n      globalEvents[type] = [listener]\n    }\n    else {\n      globalEvents[type].push(listener)\n    }\n  }\n  // If non InteractEvent type, addEventListener to document\n  else {\n    events.add(scope.document, type, listener as Interact.Listener, { options })\n  }\n\n  return interact\n}\n\n/**\n * Removes a global InteractEvent listener or DOM event from `document`\n *\n * @alias module:interact.off\n *\n * @param {string | array | object} type The types of events that were listened\n * for\n * @param {function} listener The listener function to be removed\n * @param {object | boolean} options [options] object or useCapture flag for\n * removeEventListener\n * @return {object} interact\n */\ninteract.off = off\nfunction off (type: Interact.EventTypes, listener: any, options?: object) {\n  if (utils.is.string(type) && type.search(' ') !== -1) {\n    type = type.trim().split(/ +/)\n  }\n\n  if (utils.is.array(type)) {\n    for (const eventType of type) {\n      interact.off(eventType, listener, options)\n    }\n\n    return interact\n  }\n\n  if (utils.is.object(type)) {\n    for (const prop in type) {\n      interact.off(prop, type[prop], listener)\n    }\n\n    return interact\n  }\n\n  if (isNonNativeEvent(type, scope.actions)) {\n    let index\n\n    if (type in globalEvents &&\n        (index = globalEvents[type].indexOf(listener)) !== -1) {\n      globalEvents[type].splice(index, 1)\n    }\n  }\n  else {\n    events.remove(scope.document, type, listener, options)\n  }\n\n  return interact\n}\n\ninteract.debug = debug\nfunction debug () {\n  return scope\n}\n\n// expose the functions used to calculate multi-touch properties\ninteract.getPointerAverage  = utils.pointer.pointerAverage\ninteract.getTouchBBox       = utils.pointer.touchBBox\ninteract.getTouchDistance   = utils.pointer.touchDistance\ninteract.getTouchAngle      = utils.pointer.touchAngle\n\ninteract.getElementRect       = utils.dom.getElementRect\ninteract.getElementClientRect = utils.dom.getElementClientRect\ninteract.matchesSelector      = utils.dom.matchesSelector\ninteract.closest              = utils.dom.closest\n\n/**\n * @alias module:interact.supportsTouch\n *\n * @return {boolean} Whether or not the browser supports touch input\n */\ninteract.supportsTouch = supportsTouch\nfunction supportsTouch () {\n  return browser.supportsTouch\n}\n\n/**\n * @alias module:interact.supportsPointerEvent\n *\n * @return {boolean} Whether or not the browser supports PointerEvents\n */\ninteract.supportsPointerEvent = supportsPointerEvent\nfunction supportsPointerEvent () {\n  return browser.supportsPointerEvent\n}\n\n/**\n * Cancels all interactions (end events are not fired)\n *\n * @alias module:interact.stop\n *\n * @return {object} interact\n */\ninteract.stop = stop\nfunction stop () {\n  for (const interaction of scope.interactions.list) {\n    interaction.stop()\n  }\n\n  return interact\n}\n\n/**\n * Returns or sets the distance the pointer must be moved before an action\n * sequence occurs. This also affects tolerance for tap events.\n *\n * @alias module:interact.pointerMoveTolerance\n *\n * @param {number} [newValue] The movement from the start position must be greater than this value\n * @return {interact | number}\n */\ninteract.pointerMoveTolerance = pointerMoveTolerance\nfunction pointerMoveTolerance (newValue?: number) {\n  if (utils.is.number(newValue)) {\n    scope.interactions.pointerMoveTolerance = newValue\n\n    return interact\n  }\n\n  return scope.interactions.pointerMoveTolerance\n}\n\ninteract.addDocument = (doc, options) => scope.addDocument(doc, options)\ninteract.removeDocument = doc => scope.removeDocument(doc)\n\n// eslint-disable-next-line no-undef\ninteract.version = process.env.npm_package_version\n\nscope.interact = interact\n\nexport { scope }\nexport default interact\n"
	]
}
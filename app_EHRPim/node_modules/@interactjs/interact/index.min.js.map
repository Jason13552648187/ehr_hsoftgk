{
	"version": 3,
	"sources": [
		"index.ts"
	],
	"names": [
		"isNonNativeEvent",
		"Scope",
		"browser",
		"events",
		"utils",
		"globalEvents",
		"scope",
		"init",
		"win",
		"interact",
		"target",
		"options",
		"interactable",
		"interactables",
		"get",
		"new",
		"global",
		"use",
		"plugin",
		"usePlugin",
		"isSet",
		"context",
		"on",
		"type",
		"listener",
		"is",
		"string",
		"search",
		"trim",
		"split",
		"array",
		"eventType",
		"object",
		"prop",
		"actions",
		"push",
		"add",
		"document",
		"off",
		"index",
		"indexOf",
		"splice",
		"remove",
		"debug",
		"getPointerAverage",
		"pointer",
		"pointerAverage",
		"getTouchBBox",
		"touchBBox",
		"getTouchDistance",
		"touchDistance",
		"getTouchAngle",
		"touchAngle",
		"getElementRect",
		"dom",
		"getElementClientRect",
		"matchesSelector",
		"closest",
		"supportsTouch",
		"supportsPointerEvent",
		"stop",
		"interaction",
		"interactions",
		"list",
		"pointerMoveTolerance",
		"newValue",
		"number",
		"addDocument",
		"doc",
		"removeDocument",
		"version"
	],
	"mappings": "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",
	"sourcesContent": [
		"/** @module interact */\n\nimport '@interactjs/types/index'\nimport { Options } from '@interactjs/core/defaultOptions'\nimport Interactable from '@interactjs/core/Interactable'\nimport { isNonNativeEvent, Scope } from '@interactjs/core/scope'\nimport browser from '@interactjs/utils/browser'\nimport events from '@interactjs/utils/events'\nimport * as utils from '@interactjs/utils/index'\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    interact?: InteractStatic\n  }\n}\n\nexport interface InteractStatic {\n  (target: Interact.Target, options?: Options): Interactable\n  on: typeof on\n  pointerMoveTolerance: typeof pointerMoveTolerance\n  stop: typeof stop\n  supportsPointerEvent: typeof supportsPointerEvent\n  supportsTouch: typeof supportsTouch\n  debug: typeof debug\n  off: typeof off\n  isSet: typeof isSet\n  use: typeof use\n  getPointerAverage: typeof utils.pointer.pointerAverage\n  getTouchBBox: typeof utils.pointer.touchBBox\n  getTouchDistance: typeof utils.pointer.touchDistance\n  getTouchAngle: typeof utils.pointer.touchAngle\n  getElementRect: typeof utils.dom.getElementRect\n  getElementClientRect: typeof utils.dom.getElementClientRect\n  matchesSelector: typeof utils.dom.matchesSelector\n  closest: typeof utils.dom.closest\n  addDocument: typeof scope.addDocument\n  removeDocument: typeof scope.removeDocument\n  dynamicDrop: (newValue?: boolean) => boolean | Interact.interact\n  version: string\n}\n\nconst globalEvents: any = {}\nconst scope = new Scope()\n\nexport function init (win: Window) {\n  scope.init(win)\n\n  return interact\n}\n\n/**\n * ```js\n * interact('#draggable').draggable(true)\n *\n * var rectables = interact('rect')\n * rectables\n *   .gesturable(true)\n *   .on('gesturemove', function (event) {\n *       // ...\n *   })\n * ```\n *\n * The methods of this variable can be used to set elements as interactables\n * and also to change various default settings.\n *\n * Calling it as a function and passing an element or a valid CSS selector\n * string returns an Interactable object which has various methods to configure\n * it.\n *\n * @global\n *\n * @param {Element | string} target The HTML or SVG Element to interact with\n * or CSS selector\n * @return {Interactable}\n */\nexport const interact: InteractStatic = function interact (target: Interact.Target, options?: any) {\n  let interactable = scope.interactables.get(target, options)\n\n  if (!interactable) {\n    interactable = scope.interactables.new(target, options)\n    interactable.events.global = globalEvents\n  }\n\n  return interactable\n} as InteractStatic\n\n/**\n * Use a plugin\n *\n * @alias module:interact.use\n *\n * @param {Object} plugin\n * @param {function} plugin.install\n * @return {interact}\n */\ninteract.use = use\nfunction use (plugin: Interact.Plugin, options?: { [key: string]: any }) {\n  scope.usePlugin(plugin, options)\n\n  return interact\n}\n\n/**\n * Check if an element or selector has been set with the {@link interact}\n * function\n *\n * @alias module:interact.isSet\n *\n * @param {Element} element The Element being searched for\n * @return {boolean} Indicates if the element or CSS selector was previously\n * passed to interact\n */\ninteract.isSet = isSet\nfunction isSet (target: Interact.Element, options?: any) {\n  return !!scope.interactables.get(target, options && options.context)\n}\n\n/**\n * Add a global listener for an InteractEvent or adds a DOM event to `document`\n *\n * @alias module:interact.on\n *\n * @param {string | array | object} type The types of events to listen for\n * @param {function} listener The function event (s)\n * @param {object | boolean} [options] object or useCapture flag for\n * addEventListener\n * @return {object} interact\n */\ninteract.on = on\nfunction on (type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?: object) {\n  if (utils.is.string(type) && type.search(' ') !== -1) {\n    type = type.trim().split(/ +/)\n  }\n\n  if (utils.is.array(type)) {\n    for (const eventType of (type as any[])) {\n      interact.on(eventType, listener, options)\n    }\n\n    return interact\n  }\n\n  if (utils.is.object(type)) {\n    for (const prop in type) {\n      interact.on(prop, (type as any)[prop], listener)\n    }\n\n    return interact\n  }\n\n  // if it is an InteractEvent type, add listener to globalEvents\n  if (isNonNativeEvent(type, scope.actions)) {\n    // if this type of event was never bound\n    if (!globalEvents[type]) {\n      globalEvents[type] = [listener]\n    }\n    else {\n      globalEvents[type].push(listener)\n    }\n  }\n  // If non InteractEvent type, addEventListener to document\n  else {\n    events.add(scope.document, type, listener as Interact.Listener, { options })\n  }\n\n  return interact\n}\n\n/**\n * Removes a global InteractEvent listener or DOM event from `document`\n *\n * @alias module:interact.off\n *\n * @param {string | array | object} type The types of events that were listened\n * for\n * @param {function} listener The listener function to be removed\n * @param {object | boolean} options [options] object or useCapture flag for\n * removeEventListener\n * @return {object} interact\n */\ninteract.off = off\nfunction off (type: Interact.EventTypes, listener: any, options?: object) {\n  if (utils.is.string(type) && type.search(' ') !== -1) {\n    type = type.trim().split(/ +/)\n  }\n\n  if (utils.is.array(type)) {\n    for (const eventType of type) {\n      interact.off(eventType, listener, options)\n    }\n\n    return interact\n  }\n\n  if (utils.is.object(type)) {\n    for (const prop in type) {\n      interact.off(prop, type[prop], listener)\n    }\n\n    return interact\n  }\n\n  if (isNonNativeEvent(type, scope.actions)) {\n    let index\n\n    if (type in globalEvents &&\n        (index = globalEvents[type].indexOf(listener)) !== -1) {\n      globalEvents[type].splice(index, 1)\n    }\n  }\n  else {\n    events.remove(scope.document, type, listener, options)\n  }\n\n  return interact\n}\n\ninteract.debug = debug\nfunction debug () {\n  return scope\n}\n\n// expose the functions used to calculate multi-touch properties\ninteract.getPointerAverage  = utils.pointer.pointerAverage\ninteract.getTouchBBox       = utils.pointer.touchBBox\ninteract.getTouchDistance   = utils.pointer.touchDistance\ninteract.getTouchAngle      = utils.pointer.touchAngle\n\ninteract.getElementRect       = utils.dom.getElementRect\ninteract.getElementClientRect = utils.dom.getElementClientRect\ninteract.matchesSelector      = utils.dom.matchesSelector\ninteract.closest              = utils.dom.closest\n\n/**\n * @alias module:interact.supportsTouch\n *\n * @return {boolean} Whether or not the browser supports touch input\n */\ninteract.supportsTouch = supportsTouch\nfunction supportsTouch () {\n  return browser.supportsTouch\n}\n\n/**\n * @alias module:interact.supportsPointerEvent\n *\n * @return {boolean} Whether or not the browser supports PointerEvents\n */\ninteract.supportsPointerEvent = supportsPointerEvent\nfunction supportsPointerEvent () {\n  return browser.supportsPointerEvent\n}\n\n/**\n * Cancels all interactions (end events are not fired)\n *\n * @alias module:interact.stop\n *\n * @return {object} interact\n */\ninteract.stop = stop\nfunction stop () {\n  for (const interaction of scope.interactions.list) {\n    interaction.stop()\n  }\n\n  return interact\n}\n\n/**\n * Returns or sets the distance the pointer must be moved before an action\n * sequence occurs. This also affects tolerance for tap events.\n *\n * @alias module:interact.pointerMoveTolerance\n *\n * @param {number} [newValue] The movement from the start position must be greater than this value\n * @return {interact | number}\n */\ninteract.pointerMoveTolerance = pointerMoveTolerance\nfunction pointerMoveTolerance (newValue?: number) {\n  if (utils.is.number(newValue)) {\n    scope.interactions.pointerMoveTolerance = newValue\n\n    return interact\n  }\n\n  return scope.interactions.pointerMoveTolerance\n}\n\ninteract.addDocument = (doc, options) => scope.addDocument(doc, options)\ninteract.removeDocument = doc => scope.removeDocument(doc)\n\n// eslint-disable-next-line no-undef\ninteract.version = process.env.npm_package_version\n\nscope.interact = interact\n\nexport { scope }\nexport default interact\n"
	]
}
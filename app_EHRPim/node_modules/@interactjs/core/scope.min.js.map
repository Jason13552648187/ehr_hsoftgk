{
	"version": 3,
	"sources": [
		"scope.ts"
	],
	"names": [
		"domObjects",
		"utils",
		"defaults",
		"Eventable",
		"InteractableBase",
		"InteractableSet",
		"InteractEvent",
		"interactions",
		"win",
		"browser",
		"raf",
		"events",
		"createScope",
		"Scope",
		"constructor",
		"this",
		"id",
		"Math",
		"floor",
		"random",
		"isInitialized",
		"listenerMaps",
		"clone",
		"actions",
		"map",
		"phases",
		"start",
		"move",
		"end",
		"methodDict",
		"phaselessTypes",
		"Interactable",
		"interactables",
		"_win",
		"document",
		"window",
		"documents",
		"_plugins",
		"list",
		"onWindowUnload",
		"event",
		"removeDocument",
		"target",
		"scope",
		"_defaults",
		"set",
		"options",
		"super",
		"fire",
		"interactable",
		"unset",
		"splice",
		"indexOf",
		"addListeners",
		"push",
		"name",
		"arg",
		"[object Object]",
		"listener",
		"init",
		"initScope",
		"pluginIsInstalled",
		"plugin",
		"usePlugin",
		"install",
		"listeners",
		"before",
		"index",
		"len",
		"length",
		"reduce",
		"acc",
		"addDocument",
		"doc",
		"getDocIndex",
		"getWindow",
		"extend",
		"add",
		"remove",
		"i",
		"getDocOptions",
		"docIndex",
		"now",
		"Date",
		"isNonNativeEvent",
		"type",
		"substr"
	],
	"mappings": "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",
	"sourcesContent": [
		"import domObjects from '@interactjs/utils/domObjects'\nimport * as utils from '@interactjs/utils/index'\nimport defaults from './defaultOptions'\nimport Eventable from './Eventable'\nimport InteractableBase from './Interactable'\nimport InteractableSet from './InteractableSet'\nimport InteractEvent, { PhaseMap } from './InteractEvent'\nimport interactions from './interactions'\n\nexport interface SignalArgs {\n  'scope:add-document': DocSignalArg\n  'scope:remove-document': DocSignalArg\n  'interactable:unset': { interactable: InteractableBase }\n  'interactable:set': { interactable: InteractableBase, options: Interact.Options }\n  'interactions:destroy': { interaction: Interact.Interaction }\n}\n\nexport type ListenerName = keyof SignalArgs\n\nexport type ListenerMap = {\n  [P in ListenerName]?: (arg: SignalArgs[P], scope: Scope, signalName: P) => void | boolean\n}\n\ninterface DocSignalArg {\n  doc: Document\n  window: Window\n  scope: Scope\n  options?: { [index: string]: any }\n}\n\nconst {\n  win,\n  browser,\n  raf,\n  events,\n} = utils\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ActionMap { // tslint:disable-line no-empty-interface\n}\n\nexport type ActionName = keyof ActionMap\n\nexport interface Actions {\n  map: ActionMap\n  phases: PhaseMap\n  methodDict: { [P in ActionName]?: string }\n  phaselessTypes: { [type: string]: true }\n}\n\nexport function createScope () {\n  return new Scope()\n}\n\nexport type Defaults = typeof defaults\n\nexport interface Plugin {\n  [key: string]: any\n  id?: string\n  listeners?: ListenerMap\n  before?: string[]\n  install? (scope: Scope, options?: any): void\n}\n\nexport class Scope {\n  id = `__interact_scope_${Math.floor(Math.random() * 100)}`\n  isInitialized = false\n  listenerMaps: Array<{\n    map: ListenerMap\n    id: string\n  }> = []\n\n  browser = browser\n  events = events\n  utils = utils\n  defaults: Defaults = utils.clone(defaults) as Defaults\n  Eventable = Eventable\n  actions: Actions = {\n    map: {},\n    phases: {\n      start: true,\n      move: true,\n      end: true,\n    },\n    methodDict: {},\n    phaselessTypes: {},\n  }\n\n  InteractEvent = InteractEvent\n  Interactable!: typeof InteractableBase\n  interactables = new InteractableSet(this)\n\n  // main window\n  _win!: Window\n\n  // main document\n  document!: Document\n\n  // main window\n  window!: Window\n\n  // all documents being listened to\n  documents: Array<{ doc: Document, options: any }> = []\n\n  _plugins: {\n    list: Plugin[]\n    map: { [id: string]: Plugin }\n  } = {\n    list: [],\n    map: {},\n  }\n\n  constructor () {\n    const scope = this\n\n    this.Interactable = class extends InteractableBase {\n      get _defaults () { return scope.defaults }\n\n      set (options: Interact.Options) {\n        super.set(options)\n\n        scope.fire('interactable:set', {\n          options,\n          interactable: this,\n        })\n\n        return this\n      }\n\n      unset () {\n        super.unset()\n        scope.interactables.list.splice(scope.interactables.list.indexOf(this), 1)\n\n        scope.fire('interactable:unset', { interactable: this })\n      }\n    }\n  }\n\n  addListeners (map: ListenerMap, id?: string) {\n    this.listenerMaps.push({ id, map })\n  }\n\n  fire<T extends ListenerName> (name: T, arg: SignalArgs[T]): void | false {\n    for (const { map: { [name]: listener } } of this.listenerMaps) {\n      if (!!listener && listener(arg as any, this, name as never) === false) {\n        return false\n      }\n    }\n  }\n\n  onWindowUnload = (event: BeforeUnloadEvent) => this.removeDocument(event.target as Document)\n\n  init (window: Window) {\n    return this.isInitialized\n      ? this\n      : initScope(this, window)\n  }\n\n  pluginIsInstalled (plugin: Plugin) {\n    return this._plugins.map[plugin.id] || this._plugins.list.indexOf(plugin) !== -1\n  }\n\n  usePlugin (plugin: Plugin, options?: { [key: string]: any }) {\n    if (this.pluginIsInstalled(plugin)) {\n      return this\n    }\n\n    if (plugin.id) { this._plugins.map[plugin.id] = plugin }\n    this._plugins.list.push(plugin)\n\n    if (plugin.install) {\n      plugin.install(this, options)\n    }\n\n    if (plugin.listeners && plugin.before) {\n      let index = 0\n      const len = this.listenerMaps.length\n      const before = plugin.before.reduce((acc, id) => {\n        acc[id] = true\n        return acc\n      }, {})\n\n      for (; index < len; index++) {\n        const otherId = this.listenerMaps[index].id\n\n        if (before[otherId]) { break }\n      }\n\n      this.listenerMaps.splice(index, 0, { id: plugin.id, map: plugin.listeners })\n    }\n    else if (plugin.listeners) {\n      this.listenerMaps.push({ id: plugin.id, map: plugin.listeners })\n    }\n\n    return this\n  }\n\n  addDocument (doc: Document, options?: any): void | false {\n    // do nothing if document is already known\n    if (this.getDocIndex(doc) !== -1) { return false }\n\n    const window = win.getWindow(doc)\n\n    options = options ? utils.extend({}, options) : {}\n\n    this.documents.push({ doc, options })\n    events.documents.push(doc)\n\n    // don't add an unload event for the main document\n    // so that the page may be cached in browser history\n    if (doc !== this.document) {\n      events.add(window, 'unload', this.onWindowUnload)\n    }\n\n    this.fire('scope:add-document', { doc, window, scope: this, options })\n  }\n\n  removeDocument (doc: Document) {\n    const index = this.getDocIndex(doc)\n\n    const window = win.getWindow(doc)\n    const options = this.documents[index].options\n\n    events.remove(window, 'unload', this.onWindowUnload)\n\n    this.documents.splice(index, 1)\n    events.documents.splice(index, 1)\n\n    this.fire('scope:remove-document', { doc, window, scope: this, options })\n  }\n\n  getDocIndex (doc: Document) {\n    for (let i = 0; i < this.documents.length; i++) {\n      if (this.documents[i].doc === doc) {\n        return i\n      }\n    }\n\n    return -1\n  }\n\n  getDocOptions (doc: Document) {\n    const docIndex = this.getDocIndex(doc)\n\n    return docIndex === -1 ? null : this.documents[docIndex].options\n  }\n\n  now () {\n    return ((this.window as any).Date as typeof Date || Date).now()\n  }\n}\n\nexport function isNonNativeEvent (type: string, actions: Actions) {\n  if (actions.phaselessTypes[type]) { return true }\n\n  for (const name in actions.map) {\n    if (type.indexOf(name) === 0 && type.substr(name.length) in actions.phases) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport function initScope (scope: Scope, window: Window) {\n  scope.isInitialized = true\n  win.init(window)\n  domObjects.init(window)\n  browser.init(window)\n  raf.init(window)\n  events.init(window)\n\n  scope.usePlugin(interactions)\n  scope.document = window.document\n  scope.window = window\n\n  return scope\n}\n"
	]
}
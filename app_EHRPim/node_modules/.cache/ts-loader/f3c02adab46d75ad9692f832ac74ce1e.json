{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--14-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\pages\\pim\\pimtitlecataloguepickup-view\\pimtitlecataloguepickup-view-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\pages\\pim\\pimtitlecataloguepickup-view\\pimtitlecataloguepickup-view-base.vue","mtime":1630509410284},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjsKaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSAidHNsaWIiOwppbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIEVtaXQgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsKaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBWdWVMaWZlQ3ljbGVQcm9jZXNzaW5nLCBQaWNrdXBWaWV3QmFzZSB9IGZyb20gJ0AvY3JtLWNvcmUnOwppbXBvcnQgUGltVGl0bGVDYXRhbG9ndWVTZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9waW0tdGl0bGUtY2F0YWxvZ3VlL3BpbS10aXRsZS1jYXRhbG9ndWUtc2VydmljZSc7CmltcG9ydCBQaWNrdXBWaWV3RW5naW5lIGZyb20gJ0BlbmdpbmUvdmlldy9waWNrdXAtdmlldy1lbmdpbmUnOwovKioNCiAqIOiBjOensOebruW9leeuoeeQhuaVsOaNrumAieaLqeinhuWbvuWfuuexuw0KICoNCiAqIEBleHBvcnQNCiAqIEBjbGFzcyBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogKiBAZXh0ZW5kcyB7UGlja3VwVmlld0Jhc2V9DQogKi8KCnZhciBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1BpY2t1cFZpZXdCYXNlKSB7CiAgX2luaGVyaXRzKFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UsIF9QaWNrdXBWaWV3QmFzZSk7CgogIC8qKg0KICAgKiDogYznp7Dnm67lvZXnrqHnkIbmlbDmja7pgInmi6nop4blm77ln7rnsbsNCiAgICoNCiAgICogQGV4cG9ydA0KICAgKiBAY2xhc3MgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZQ0KICAgKiBAZXh0ZW5kcyB7UGlja3VwVmlld0Jhc2V9DQogICAqLwogIGZ1bmN0aW9uIFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgLyoqDQogICAgICog5a6e5L2T5pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7UGltVGl0bGVDYXRhbG9ndWVTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMuYXBwRW50aXR5U2VydmljZSA9IG5ldyBQaW1UaXRsZUNhdGFsb2d1ZVNlcnZpY2UoKTsKICAgIC8qKg0KICAgICAqIOiuoeaVsOWZqOacjeWKoeWvueixoembhuWQiA0KICAgICAqDQogICAgICogQHR5cGUge0FycmF5PCo+fQ0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheSA9IFtdOwogICAgLyoqDQogICAgICog6KeG5Zu+5qCH6K+GDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMudmlld3RhZyA9ICczYmI2MzgwMmFkMWU1NWJhMDY1NWQ5NTQzMjcxOWIxMic7CiAgICAvKioNCiAgICAgKiDniLbmlbDmja7lr7nosaENCiAgICAgKg0KICAgICAqIEBwcm90ZWN0ZWQNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzLnNyZnBhcmVudGRhdGEgPSB7fTsKICAgIC8qKg0KICAgICAqIOiHquWumuS5ieinhuWbvuWvvOiIquS4iuS4i+aWh+mbhuWQiA0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5jdXN0b21WaWV3TmF2Q29udGV4dHMgPSB7fTsKICAgIC8qKg0KICAgICAqIOiHquWumuS5ieinhuWbvuWvvOiIquWPguaVsOmbhuWQiA0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5jdXN0b21WaWV3UGFyYW1zID0ge307CiAgICAvKioNCiAgICAgKiDop4blm77mqKHlnovmlbDmja4NCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMubW9kZWwgPSB7CiAgICAgIHNyZkNhcHRpb246ICdlbnRpdGllcy5waW10aXRsZWNhdGFsb2d1ZS52aWV3cy5waWNrdXB2aWV3LmNhcHRpb24nLAogICAgICBzcmZUaXRsZTogJ2VudGl0aWVzLnBpbXRpdGxlY2F0YWxvZ3VlLnZpZXdzLnBpY2t1cHZpZXcudGl0bGUnLAogICAgICBzcmZTdWJUaXRsZTogJ2VudGl0aWVzLnBpbXRpdGxlY2F0YWxvZ3VlLnZpZXdzLnBpY2t1cHZpZXcuc3VidGl0bGUnLAogICAgICBkYXRhSW5mbzogJycKICAgIH07CiAgICAvKioNCiAgICAgKiDlrrnlmajmqKHlnosNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMuY29udGFpbmVyTW9kZWwgPSB7CiAgICAgIHZpZXdfcGlja3Vwdmlld3BhbmVsOiB7CiAgICAgICAgbmFtZTogJ3BpY2t1cHZpZXdwYW5lbCcsCiAgICAgICAgdHlwZTogJ1BJQ0tVUFZJRVdQQU5FTCcKICAgICAgfSwKICAgICAgdmlld19va2J0bjogewogICAgICAgIG5hbWU6ICdva2J0bicsCiAgICAgICAgdHlwZTogJ2J1dHRvbicsCiAgICAgICAgdGV4dDogJ+ehruWumicsCiAgICAgICAgZGlzYWJsZWQ6IHRydWUKICAgICAgfSwKICAgICAgdmlld19jYW5jZWxidG46IHsKICAgICAgICBuYW1lOiAnY2FuY2VsYnRuJywKICAgICAgICB0eXBlOiAnYnV0dG9uJywKICAgICAgICB0ZXh0OiAn5Y+W5raIJywKICAgICAgICBkaXNhYmxlZDogZmFsc2UKICAgICAgfSwKICAgICAgdmlld19sZWZ0YnRuOiB7CiAgICAgICAgbmFtZTogJ2xlZnRidG4nLAogICAgICAgIHR5cGU6ICdidXR0b24nLAogICAgICAgIHRleHQ6ICflt6bnp7snLAogICAgICAgIGRpc2FibGVkOiB0cnVlCiAgICAgIH0sCiAgICAgIHZpZXdfcmlnaHRidG46IHsKICAgICAgICBuYW1lOiAncmlnaHRidG4nLAogICAgICAgIHR5cGU6ICdidXR0b24nLAogICAgICAgIHRleHQ6ICflj7Pnp7snLAogICAgICAgIGRpc2FibGVkOiB0cnVlCiAgICAgIH0sCiAgICAgIHZpZXdfYWxsbGVmdGJ0bjogewogICAgICAgIG5hbWU6ICdhbGxsZWZ0YnRuJywKICAgICAgICB0eXBlOiAnYnV0dG9uJywKICAgICAgICB0ZXh0OiAn5YWo6YOo5bem56e7JywKICAgICAgICBkaXNhYmxlZDogdHJ1ZQogICAgICB9LAogICAgICB2aWV3X2FsbHJpZ2h0YnRuOiB7CiAgICAgICAgbmFtZTogJ2FsbHJpZ2h0YnRuJywKICAgICAgICB0eXBlOiAnYnV0dG9uJywKICAgICAgICB0ZXh0OiAn5YWo6YOo5Y+z56e7JywKICAgICAgICBkaXNhYmxlZDogdHJ1ZQogICAgICB9CiAgICB9OwogICAgLyoqDQogICAgICog6KeG5Zu+54q25oCB6K6i6ZiF5a+56LGhDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHR5cGUge1N1YmplY3Q8e2FjdGlvbjogc3RyaW5nLCBkYXRhOiBhbnl9Pn0NCiAgICAgKiBAbWVtYmVyb2YgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzLnZpZXdTdGF0ZSA9IG5ldyBTdWJqZWN0KCk7CiAgICAvKioNCiAgICAgKiDop4blm77lvJXmk44NCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAdHlwZSB7RW5naW5lfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMuZW5naW5lID0gbmV3IFBpY2t1cFZpZXdFbmdpbmUoKTsKICAgIC8qKg0KICAgICAqIOmAieS4reaVsOaNrueahOWtl+espuS4sg0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzLnNlbGVjdGVkRGF0YSA9ICIiOwogICAgLyoqDQogICAgICog6KeG5Zu+6YCJ5Lit5pWw5o2uDQogICAgICoNCiAgICAgKiBAdHlwZSB7YW55W119DQogICAgICogQG1lbWJlcm9mIFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlldw0KICAgICAqLwoKICAgIF90aGlzLnZpZXdTZWxlY3Rpb25zID0gW107CiAgICAvKioNCiAgICAgKiDmmK/lkKbljZXpgIkNCiAgICAgKg0KICAgICAqIEB0eXBlIHtib29sZWFufQ0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXcNCiAgICAgKi8KCiAgICBfdGhpcy5pc1NpbmdsZVNlbGVjdCA9IHRydWU7CiAgICByZXR1cm4gX3RoaXM7CiAgfQogIC8qKg0KICAgKiDmlbDmja7lj5jljJYNCiAgICoNCiAgICogQHBhcmFtIHsqfSB2YWwNCiAgICogQHJldHVybnMgeyp9DQogICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UsIFt7CiAgICBrZXk6ICJ2aWV3RGF0YXNDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZpZXdEYXRhc0NoYW5nZSh2YWwpIHsKICAgICAgcmV0dXJuIHZhbDsKICAgIH0KICAgIC8qKg0KICAgICAqIOW8leaTjuWIneWni+WMlg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImVuZ2luZUluaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuZ2luZUluaXQoKSB7CiAgICAgIHRoaXMuZW5naW5lLmluaXQoewogICAgICAgIHZpZXc6IHRoaXMsCiAgICAgICAgcGlja3Vwdmlld3BhbmVsOiB0aGlzLiRyZWZzLnBpY2t1cHZpZXdwYW5lbCwKICAgICAgICBrZXlQU0RFRmllbGQ6ICdwaW10aXRsZWNhdGFsb2d1ZScsCiAgICAgICAgbWFqb3JQU0RFRmllbGQ6ICdwaW10aXRsZWNhdGFsb2d1ZW5hbWUnLAogICAgICAgIGlzTG9hZERlZmF1bHQ6IHRydWUKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiBwaWNrdXB2aWV3cGFuZWwg6YOo5Lu2IHNlbGVjdGlvbmNoYW5nZSDkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2FyZ3M9e31dDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJwaWNrdXB2aWV3cGFuZWxfc2VsZWN0aW9uY2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwaWNrdXB2aWV3cGFuZWxfc2VsZWN0aW9uY2hhbmdlKCRldmVudCwgJGV2ZW50MikgewogICAgICB0aGlzLmVuZ2luZS5vbkN0cmxFdmVudCgncGlja3Vwdmlld3BhbmVsJywgJ3NlbGVjdGlvbmNoYW5nZScsICRldmVudCk7CiAgICB9CiAgICAvKioNCiAgICAgKiBwaWNrdXB2aWV3cGFuZWwg6YOo5Lu2IGFjdGl2YXRlZCDkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2FyZ3M9e31dDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJwaWNrdXB2aWV3cGFuZWxfYWN0aXZhdGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwaWNrdXB2aWV3cGFuZWxfYWN0aXZhdGVkKCRldmVudCwgJGV2ZW50MikgewogICAgICB0aGlzLmVuZ2luZS5vbkN0cmxFdmVudCgncGlja3Vwdmlld3BhbmVsJywgJ2FjdGl2YXRlZCcsICRldmVudCk7CiAgICB9CiAgICAvKioNCiAgICAgKiBwaWNrdXB2aWV3cGFuZWwg6YOo5Lu2IGxvYWQg5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFthcmdzPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50DQogICAgICogQG1lbWJlcm9mIFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicGlja3Vwdmlld3BhbmVsX2xvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBpY2t1cHZpZXdwYW5lbF9sb2FkKCRldmVudCwgJGV2ZW50MikgewogICAgICB0aGlzLmVuZ2luZS5vbkN0cmxFdmVudCgncGlja3Vwdmlld3BhbmVsJywgJ2xvYWQnLCAkZXZlbnQpOwogICAgfQogICAgLyoqDQogICAgICog6ZSA5q+B6KeG5Zu+5Zue6LCDDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZXN0cm95ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3llZCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBpZiAodGhpcy52aWV3RGVmYXVsdFVzYWdlKSB7CiAgICAgICAgdmFyIGxvY2FsU3RvcmVMZW5ndGggPSBPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpOwoKICAgICAgICBpZiAobG9jYWxTdG9yZUxlbmd0aC5sZW5ndGggPiAwKSB7CiAgICAgICAgICBsb2NhbFN0b3JlTGVuZ3RoLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgaWYgKGl0ZW0uc3RhcnRzV2l0aChfdGhpczIuY29udGV4dC5zcmZzZXNzaW9uaWQpKSB7CiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oaXRlbSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgLyoqDQogICAgICog6KeG5Zu+5Y+C5pWw5Y+Y5pu0DQogICAgICoNCiAgICAgKiBAcHJvdGVjdGVkDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXcNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidmlld1BhcmFtQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB2aWV3UGFyYW1DaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgaWYgKHRoaXMudmlld3BhcmFtcy5zZWxlY3RlZERhdGEpIHsKICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YSA9IEpTT04uc3RyaW5naWZ5KHRoaXMudmlld3BhcmFtcy5zZWxlY3RlZERhdGEpOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDop4blm77nu4Tku7bmjILovb3lrozmr5UNCiAgICAgKg0KICAgICAqIEBwcm90ZWN0ZWQNCiAgICAgKiBAbWVtYmVyb2YgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3DQogICAgICovCgogIH0sIHsKICAgIGtleTogInZpZXdNb3VudGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB2aWV3TW91bnRlZCgpIHsKICAgICAgaWYgKHRoaXMudmlld3BhcmFtcy5zZWxlY3RlZERhdGEpIHsKICAgICAgICB0aGlzLmVuZ2luZS5vbkN0cmxFdmVudCgncGlja3Vwdmlld3BhbmVsJywgJ3NlbGVjdGlvbmNoYW5nZScsIHRoaXMudmlld3BhcmFtcy5zZWxlY3RlZERhdGEpOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDnoa7lrpoNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXcNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25DbGlja09rIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsaWNrT2soKSB7CiAgICAgIHRoaXMuJGVtaXQoJ3ZpZXdkYXRhc2NoYW5nZScsIHRoaXMudmlld1NlbGVjdGlvbnMpOwogICAgICB0aGlzLiRlbWl0KCdjbG9zZScsIG51bGwpOwogICAgfQogICAgLyoqDQogICAgICog5Y+W5raIDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3DQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uQ2xpY2tDYW5jZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpY2tDYW5jZWwoKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlJywgbnVsbCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZTsKfShQaWNrdXBWaWV3QmFzZSk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW0VtaXQoKV0sIFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UucHJvdG90eXBlLCAidmlld0RhdGFzQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogdHJ1ZQp9KV0sIFBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UucHJvdG90eXBlLCAiaXNTaG93QnV0dG9uIiwgdm9pZCAwKTsKClBJTVRJVExFQ0FUQUxPR1VFUGlja3VwVmlld0Jhc2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW0NvbXBvbmVudCh7fSksIFZ1ZUxpZmVDeWNsZVByb2Nlc3NpbmddLCBQSU1USVRMRUNBVEFMT0dVRVBpY2t1cFZpZXdCYXNlKTsKZXhwb3J0IGRlZmF1bHQgUElNVElUTEVDQVRBTE9HVUVQaWNrdXBWaWV3QmFzZTs="},null]}
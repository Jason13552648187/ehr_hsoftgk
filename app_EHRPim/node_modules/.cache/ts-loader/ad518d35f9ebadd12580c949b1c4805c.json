{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--14-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\pages\\orm\\orm-sign-org-bdwpickup-grid-view\\orm-sign-org-bdwpickup-grid-view-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\pages\\orm\\orm-sign-org-bdwpickup-grid-view\\orm-sign-org-bdwpickup-grid-view-base.vue","mtime":1630509409514},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjsKaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSAidHNsaWIiOwppbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIEVtaXQgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsKaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBWdWVMaWZlQ3ljbGVQcm9jZXNzaW5nLCBQaWNrdXBWaWV3QmFzZSB9IGZyb20gJ0AvY3JtLWNvcmUnOwppbXBvcnQgT3JtU2lnbk9yZ1NlcnZpY2UgZnJvbSAnQC9zZXJ2aWNlL29ybS1zaWduLW9yZy9vcm0tc2lnbi1vcmctc2VydmljZSc7CmltcG9ydCBQaWNrdXBHcmlkVmlld0VuZ2luZSBmcm9tICdAZW5naW5lL3ZpZXcvcGlja3VwLWdyaWQtdmlldy1lbmdpbmUnOwovKioNCiAqIOazqOWGjOWNleS9jemAieaLqeWfuuexuw0KICoNCiAqIEBleHBvcnQNCiAqIEBjbGFzcyBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogKiBAZXh0ZW5kcyB7UGlja3VwVmlld0Jhc2V9DQogKi8KCnZhciBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1BpY2t1cFZpZXdCYXNlKSB7CiAgX2luaGVyaXRzKE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UsIF9QaWNrdXBWaWV3QmFzZSk7CgogIC8qKg0KICAgKiDms6jlhozljZXkvY3pgInmi6nln7rnsbsNCiAgICoNCiAgICogQGV4cG9ydA0KICAgKiBAY2xhc3MgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgKiBAZXh0ZW5kcyB7UGlja3VwVmlld0Jhc2V9DQogICAqLwogIGZ1bmN0aW9uIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgLyoqDQogICAgICog5a6e5L2T5pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7T3JtU2lnbk9yZ1NlcnZpY2V9DQogICAgICogQG1lbWJlcm9mIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5hcHBFbnRpdHlTZXJ2aWNlID0gbmV3IE9ybVNpZ25PcmdTZXJ2aWNlKCk7CiAgICAvKioNCiAgICAgKiDorqHmlbDlmajmnI3liqHlr7nosaHpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHtBcnJheTwqPn0NCiAgICAgKiBAbWVtYmVyb2YgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkgPSBbXTsKICAgIC8qKg0KICAgICAqIOinhuWbvuagh+ivhg0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzLnZpZXd0YWcgPSAnNGQwNWExOGJlOTk1MDJhNzlhODc5ZDU3OTRmZjZhYjInOwogICAgLyoqDQogICAgICog54i25pWw5o2u5a+56LGhDQogICAgICoNCiAgICAgKiBAcHJvdGVjdGVkDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5zcmZwYXJlbnRkYXRhID0ge307CiAgICAvKioNCiAgICAgKiDoh6rlrprkuYnop4blm77lr7zoiKrkuIrkuIvmlofpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMuY3VzdG9tVmlld05hdkNvbnRleHRzID0ge307CiAgICAvKioNCiAgICAgKiDoh6rlrprkuYnop4blm77lr7zoiKrlj4LmlbDpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMuY3VzdG9tVmlld1BhcmFtcyA9IHt9OwogICAgLyoqDQogICAgICog6KeG5Zu+5qih5Z6L5pWw5o2uDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzLm1vZGVsID0gewogICAgICBzcmZDYXB0aW9uOiAnZW50aXRpZXMub3Jtc2lnbm9yZy52aWV3cy5iZHdwaWNrdXBncmlkdmlldy5jYXB0aW9uJywKICAgICAgc3JmVGl0bGU6ICdlbnRpdGllcy5vcm1zaWdub3JnLnZpZXdzLmJkd3BpY2t1cGdyaWR2aWV3LnRpdGxlJywKICAgICAgc3JmU3ViVGl0bGU6ICdlbnRpdGllcy5vcm1zaWdub3JnLnZpZXdzLmJkd3BpY2t1cGdyaWR2aWV3LnN1YnRpdGxlJywKICAgICAgZGF0YUluZm86ICcnCiAgICB9OwogICAgLyoqDQogICAgICog5a655Zmo5qih5Z6LDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzLmNvbnRhaW5lck1vZGVsID0gewogICAgICB2aWV3X2dyaWQ6IHsKICAgICAgICBuYW1lOiAnZ3JpZCcsCiAgICAgICAgdHlwZTogJ0dSSUQnCiAgICAgIH0sCiAgICAgIHZpZXdfc2VhcmNoZm9ybTogewogICAgICAgIG5hbWU6ICdzZWFyY2hmb3JtJywKICAgICAgICB0eXBlOiAnU0VBUkNIRk9STScKICAgICAgfQogICAgfTsKICAgIC8qKg0KICAgICAqIOinhuWbvueKtuaAgeiuoumYheWvueixoQ0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHtTdWJqZWN0PHthY3Rpb246IHN0cmluZywgZGF0YTogYW55fT59DQogICAgICogQG1lbWJlcm9mIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpcy52aWV3U3RhdGUgPSBuZXcgU3ViamVjdCgpOwogICAgLyoqDQogICAgICog6KeG5Zu+5byV5pOODQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHR5cGUge0VuZ2luZX0NCiAgICAgKiBAbWVtYmVyb2YgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzLmVuZ2luZSA9IG5ldyBQaWNrdXBHcmlkVmlld0VuZ2luZSgpOwogICAgLyoqDQogICAgICog5pCc57Si5YC8DQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMucXVlcnkgPSAnJzsKICAgIC8qKg0KICAgICAqIOaYr+WQpuWxleW8gOaQnOe0ouihqOWNlQ0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5pc0V4cGFuZFNlYXJjaEZvcm0gPSB0cnVlOwogICAgLyoqDQogICAgICog6KGo5qC86KGM5pWw5o2u6buY6K6k5r+A5rS75qih5byPDQogICAgICogMCDkuI3mv4DmtLsNCiAgICAgKiAxIOWNleWHu+a/gOa0uw0KICAgICAqIDIg5Y+M5Ye75r+A5rS7DQogICAgICoNCiAgICAgKiBAdHlwZSB7KG51bWJlciB8IDAgfCAxIHwgMil9DQogICAgICogQG1lbWJlcm9mIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5ncmlkUm93QWN0aXZlTW9kZSA9IDI7CiAgICByZXR1cm4gX3RoaXM7CiAgfQogIC8qKg0KICAgKiDmlbDmja7lj5jljJYNCiAgICoNCiAgICogQHBhcmFtIHsqfSB2YWwNCiAgICogQHJldHVybnMgeyp9DQogICAqIEBtZW1iZXJvZiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UsIFt7CiAgICBrZXk6ICJ2aWV3RGF0YXNDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZpZXdEYXRhc0NoYW5nZSh2YWwpIHsKICAgICAgcmV0dXJuIHZhbDsKICAgIH0KICAgIC8qKg0KICAgICAqIOW8leaTjuWIneWni+WMlg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBtZW1iZXJvZiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImVuZ2luZUluaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuZ2luZUluaXQoKSB7CiAgICAgIHRoaXMuZW5naW5lLmluaXQoewogICAgICAgIHZpZXc6IHRoaXMsCiAgICAgICAgZ3JpZDogdGhpcy4kcmVmcy5ncmlkLAogICAgICAgIHNlYXJjaGZvcm06IHRoaXMuJHJlZnMuc2VhcmNoZm9ybSwKICAgICAgICBrZXlQU0RFRmllbGQ6ICdvcm1zaWdub3JnJywKICAgICAgICBtYWpvclBTREVGaWVsZDogJ29ybXNpZ25vcmduYW1lJywKICAgICAgICBpc0xvYWREZWZhdWx0OiB0cnVlCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICogZ3JpZCDpg6jku7Ygc2VsZWN0aW9uY2hhbmdlIOS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJncz17fV0NCiAgICAgKiBAcGFyYW0geyp9ICRldmVudA0KICAgICAqIEBtZW1iZXJvZiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdyaWRfc2VsZWN0aW9uY2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBncmlkX3NlbGVjdGlvbmNoYW5nZSgkZXZlbnQsICRldmVudDIpIHsKICAgICAgdGhpcy5lbmdpbmUub25DdHJsRXZlbnQoJ2dyaWQnLCAnc2VsZWN0aW9uY2hhbmdlJywgJGV2ZW50KTsKICAgIH0KICAgIC8qKg0KICAgICAqIGdyaWQg6YOo5Lu2IGJlZm9yZWxvYWQg5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFthcmdzPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50DQogICAgICogQG1lbWJlcm9mIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ3JpZF9iZWZvcmVsb2FkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBncmlkX2JlZm9yZWxvYWQoJGV2ZW50LCAkZXZlbnQyKSB7CiAgICAgIHRoaXMuZW5naW5lLm9uQ3RybEV2ZW50KCdncmlkJywgJ2JlZm9yZWxvYWQnLCAkZXZlbnQpOwogICAgfQogICAgLyoqDQogICAgICogZ3JpZCDpg6jku7Ygcm93ZGJsY2xpY2sg5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFthcmdzPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50DQogICAgICogQG1lbWJlcm9mIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ3JpZF9yb3dkYmxjbGljayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JpZF9yb3dkYmxjbGljaygkZXZlbnQsICRldmVudDIpIHsKICAgICAgdGhpcy5lbmdpbmUub25DdHJsRXZlbnQoJ2dyaWQnLCAncm93ZGJsY2xpY2snLCAkZXZlbnQpOwogICAgfQogICAgLyoqDQogICAgICogZ3JpZCDpg6jku7YgbG9hZCDkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2FyZ3M9e31dDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJncmlkX2xvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdyaWRfbG9hZCgkZXZlbnQsICRldmVudDIpIHsKICAgICAgdGhpcy5lbmdpbmUub25DdHJsRXZlbnQoJ2dyaWQnLCAnbG9hZCcsICRldmVudCk7CiAgICB9CiAgICAvKioNCiAgICAgKiBzZWFyY2hmb3JtIOmDqOS7tiBzYXZlIOS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJncz17fV0NCiAgICAgKiBAcGFyYW0geyp9ICRldmVudA0KICAgICAqIEBtZW1iZXJvZiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInNlYXJjaGZvcm1fc2F2ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoZm9ybV9zYXZlKCRldmVudCwgJGV2ZW50MikgewogICAgICB0aGlzLmVuZ2luZS5vbkN0cmxFdmVudCgnc2VhcmNoZm9ybScsICdzYXZlJywgJGV2ZW50KTsKICAgIH0KICAgIC8qKg0KICAgICAqIHNlYXJjaGZvcm0g6YOo5Lu2IHNlYXJjaCDkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2FyZ3M9e31dDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzZWFyY2hmb3JtX3NlYXJjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoZm9ybV9zZWFyY2goJGV2ZW50LCAkZXZlbnQyKSB7CiAgICAgIHRoaXMuZW5naW5lLm9uQ3RybEV2ZW50KCdzZWFyY2hmb3JtJywgJ3NlYXJjaCcsICRldmVudCk7CiAgICB9CiAgICAvKioNCiAgICAgKiBzZWFyY2hmb3JtIOmDqOS7tiBsb2FkIOS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJncz17fV0NCiAgICAgKiBAcGFyYW0geyp9ICRldmVudA0KICAgICAqIEBtZW1iZXJvZiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInNlYXJjaGZvcm1fbG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoZm9ybV9sb2FkKCRldmVudCwgJGV2ZW50MikgewogICAgICB0aGlzLmVuZ2luZS5vbkN0cmxFdmVudCgnc2VhcmNoZm9ybScsICdsb2FkJywgJGV2ZW50KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOmUgOavgeinhuWbvuWbnuiwgw0KICAgICAqDQogICAgICogQG1lbWJlcm9mIE9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZGVzdHJveWVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95ZWQoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMudmlld0RlZmF1bHRVc2FnZSkgewogICAgICAgIHZhciBsb2NhbFN0b3JlTGVuZ3RoID0gT2JqZWN0LmtleXMobG9jYWxTdG9yYWdlKTsKCiAgICAgICAgaWYgKGxvY2FsU3RvcmVMZW5ndGgubGVuZ3RoID4gMCkgewogICAgICAgICAgbG9jYWxTdG9yZUxlbmd0aC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIGlmIChpdGVtLnN0YXJ0c1dpdGgoX3RoaXMyLmNvbnRleHQuc3Jmc2Vzc2lvbmlkKSkgewogICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGl0ZW0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOW/q+mAn+aQnOe0og0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvblNlYXJjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TZWFyY2goJGV2ZW50KSB7CiAgICAgIHZhciByZWZzID0gdGhpcy4kcmVmczsKCiAgICAgIGlmIChyZWZzLmdyaWQpIHsKICAgICAgICByZWZzLmdyaWQubG9hZCh7fSk7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlOwp9KFBpY2t1cFZpZXdCYXNlKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbRW1pdCgpXSwgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZS5wcm90b3R5cGUsICJ2aWV3RGF0YXNDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZS5wcm90b3R5cGUsICJzZWxlY3RlZERhdGEiLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlLnByb3RvdHlwZSwgImlzU2luZ2xlU2VsZWN0Iiwgdm9pZCAwKTsKCk9ybVNpZ25PcmdCRFdQaWNrdXBHcmlkVmlld0Jhc2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW0NvbXBvbmVudCh7fSksIFZ1ZUxpZmVDeWNsZVByb2Nlc3NpbmddLCBPcm1TaWduT3JnQkRXUGlja3VwR3JpZFZpZXdCYXNlKTsKZXhwb3J0IGRlZmF1bHQgT3JtU2lnbk9yZ0JEV1BpY2t1cEdyaWRWaWV3QmFzZTs="},null]}
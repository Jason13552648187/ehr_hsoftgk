{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--14-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-labourcampany\\main-grid\\main-grid-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-labourcampany\\main-grid\\main-grid-base.vue","mtime":1630509411708},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-person\\pim-person-ui-service-base.ts","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-person\\pim-person-ui-service-base.ts","mtime":1630509410829},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICdAL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudCc7CmltcG9ydCB7IFVJQWN0aW9uVG9vbCwgVXRpbCB9IGZyb20gJ0AvdXRpbHMnOwppbXBvcnQgVUlTZXJ2aWNlIGZyb20gJy4uL3VpLXNlcnZpY2UnOwppbXBvcnQgUGltUGVyc29uU2VydmljZSBmcm9tICdAL3NlcnZpY2UvcGltLXBlcnNvbi9waW0tcGVyc29uLXNlcnZpY2UnOwovKioNCiAqIOS6uuWRmOS/oeaBr1VJ5pyN5Yqh5a+56LGh5Z+657G7DQogKg0KICogQGV4cG9ydA0KICogQGNsYXNzIFBpbVBlcnNvblVJU2VydmljZUJhc2UNCiAqLwoKdmFyIFBpbVBlcnNvblVJU2VydmljZUJhc2UgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfVUlTZXJ2aWNlKSB7CiAgX2luaGVyaXRzKFBpbVBlcnNvblVJU2VydmljZUJhc2UsIF9VSVNlcnZpY2UpOwoKICAvKioNCiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiAgUGltUGVyc29uVUlTZXJ2aWNlQmFzZS4NCiAgICoNCiAgICogQHBhcmFtIHsqfSBbb3B0cz17fV0NCiAgICogQG1lbWJlcm9mICBQaW1QZXJzb25VSVNlcnZpY2VCYXNlDQogICAqLwogIGZ1bmN0aW9uIFBpbVBlcnNvblVJU2VydmljZUJhc2UoKSB7CiAgICB2YXIgX3RoaXMyOwoKICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGltUGVyc29uVUlTZXJ2aWNlQmFzZSk7CgogICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFBpbVBlcnNvblVJU2VydmljZUJhc2UpLmNhbGwodGhpcywgb3B0cykpOwogICAgLyoqDQogICAgICog5piv5ZCm5pSv5oyB5bel5L2c5rWBDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbVBlcnNvblVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuaXNFbmFibGVXb3JrZmxvdyA9IGZhbHNlOwogICAgLyoqDQogICAgICog5b2T5YmNVUnmnI3liqHlr7nlupTnmoTmlbDmja7mnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltUGVyc29uVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5kYXRhU2VydmljZSA9IG5ldyBQaW1QZXJzb25TZXJ2aWNlKCk7CiAgICAvKioNCiAgICAgKiDmiYDmnInlhbPogZTop4blm74NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltUGVyc29uVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5hbGxWaWV3TWFwID0gbmV3IE1hcCgpOwogICAgLyoqDQogICAgICog54q25oCB5YC8DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbVBlcnNvblVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuc3RhdGVWYWx1ZSA9IDA7CiAgICAvKioNCiAgICAgKiDnirbmgIHlsZ7mgKcNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltUGVyc29uVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5zdGF0ZUZpZWxkID0gIiI7CiAgICAvKioNCiAgICAgKiDkuLvnirbmgIHlsZ7mgKfpm4blkIgNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltUGVyc29uVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5tYWluU3RhdGVGaWVsZHMgPSBbXTsKICAgIC8qKg0KICAgICAqIOS4u+eKtuaAgembhuWQiE1hcA0KICAgICAqDQogICAgICogQG1lbWJlcm9mICBQaW1QZXJzb25VSVNlcnZpY2VCYXNlDQogICAgICovCgogICAgX3RoaXMyLmFsbERlTWFpblN0YXRlTWFwID0gbmV3IE1hcCgpOwoKICAgIF90aGlzMi5pbml0Vmlld01hcCgpOwoKICAgIF90aGlzMi5pbml0RGVNYWluU3RhdGVNYXAoKTsKCiAgICByZXR1cm4gX3RoaXMyOwogIH0KICAvKioNCiAgICog5Yid5aeL5YyW6KeG5Zu+TWFwDQogICAqDQogICAqIEBtZW1iZXJvZiAgUGltUGVyc29uVUlTZXJ2aWNlQmFzZQ0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhQaW1QZXJzb25VSVNlcnZpY2VCYXNlLCBbewogICAga2V5OiAiaW5pdFZpZXdNYXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRWaWV3TWFwKCkgewogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAncnlpbmZvZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnTURBVEFWSUVXOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2dyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJ01QSUNLVVBWSUVXOicsIHsKICAgICAgICB2aWV3bmFtZTogJ21waWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICduZXdlZGl0dmlldzInLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3l4emZwcGlja3VwdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAncGVyc29uaW5mb2VkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdjdXJsZWFkZXJwaWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdncnhzY2dlZGl0dmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnYnlseWdwaWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdjdXJvcmdwaW1wZXJzb25waWNrdXBncmlkdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnZWRpdHZpZXcyJywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICd4c2NnZWRpdHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3BlcnNvbmluZm90cmVlZXhwdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnc3lqeGVkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdnemRxZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2d6cnlobWNncmlkdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAndHh5Z2dyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdrcWpyeXBpY2t1cGdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICd5eHpmcHBpY2t1cGdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdjdXJvcmdwaW1wZXJzb25waWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdjdXJvcmdwZXJzb25waWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdncmdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICd6ZGVkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdjdXJqaHJ5cGlja3VwdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnanhxeWdncmlkdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnemRkZWRpdHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2dyemh6Y2VkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdncmVkaXR2aWV3MicsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAndHhyeXBpY2t1cGdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdmYWx5Z21waWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdjdXJqaHJ5cGlja3VwZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2htZGdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdreHp4eWdwaWNrdXBncmlkdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCdFRElUVklFVzonLCB7CiAgICAgICAgdmlld25hbWU6ICdlZGl0dmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAneHprcXJ5cGlja3VwZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3F1aWNrZWRpdHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2p4cXBpY2t1cGdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICd4emtxcnltcGlja3VwdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAncGlja3VwZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2N1cmxlYWRlcnBpY2t1cGdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdjdXJvcmdwZXJzb25waWNrdXBncmlkdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnZ3J6emVkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdwcm9pbmZvZWRpdHZpZXcyJywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICd6aHpjZWRpdHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2x0eHlnZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3N5cXlnZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2txanJ5cGlja3VwdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAndHhxcmVkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdyeWluZm9lZGl0dmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnanhzcGlja3VwdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAna3h6eHlncGlja3VwdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1wZW9wbGUnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCdQSUNLVVBWSUVXOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3BpY2t1cHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3R4cnlwaWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdieWx5Z3BpY2t1cGdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbXBlb3BsZScKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdsenlnaG1jZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltcGVvcGxlJwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWIneWni+WMluS4u+eKtuaAgembhuWQiA0KICAgICAqDQogICAgICogQG1lbWJlcm9mICBQaW1QZXJzb25VSVNlcnZpY2VCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImluaXREZU1haW5TdGF0ZU1hcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdERlTWFpblN0YXRlTWFwKCkge30KICAgIC8qKg0KICAgICAqIOaWsOW7ug0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncyDlvZPliY3mlbDmja4NCiAgICAgKiBAcGFyYW0ge2FueX0gY29udGV4dCDooYzkuLrpmYTliqDkuIrkuIvmlocNCiAgICAgKiBAcGFyYW0geyp9IFtwYXJhbXNdIOmZhOWKoOWPguaVsA0KICAgICAqIEBwYXJhbSB7Kn0gWyRldmVudF0g5LqL5Lu25rqQDQogICAgICogQHBhcmFtIHsqfSBbeERhdGFdICDmiafooYzooYzkuLrmiYDpnIDlvZPliY3pg6jku7YNCiAgICAgKiBAcGFyYW0geyp9IFthY3Rpb25Db250ZXh0XSAg5omn6KGM6KGM5Li65LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbc3JmUGFyZW50RGVOYW1lXSDniLblrp7kvZPlkI3np7ANCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJQaW1QZXJzb25fUXVpY2tDcmVhdGVQZXJzb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9QaW1QZXJzb25fUXVpY2tDcmVhdGVQZXJzb24gPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGFyZ3MpIHsKICAgICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgICAgdmFyIGNvbnRleHQsCiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgJGV2ZW50LAogICAgICAgICAgICB4RGF0YSwKICAgICAgICAgICAgYWN0aW9uQ29udGV4dCwKICAgICAgICAgICAgc3JmUGFyZW50RGVOYW1lLAogICAgICAgICAgICBkYXRhLAogICAgICAgICAgICBwYXJlbnRDb250ZXh0LAogICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0sCiAgICAgICAgICAgIF90aGlzLAogICAgICAgICAgICBfYXJncywKICAgICAgICAgICAgYWN0aW9uVGFyZ2V0LAogICAgICAgICAgICBwYXJlbnRPYmosCiAgICAgICAgICAgIGRlUmVzUGFyYW1ldGVycywKICAgICAgICAgICAgcGFyYW1ldGVycywKICAgICAgICAgICAgb3BlblBvcHVwTW9kYWwsCiAgICAgICAgICAgIHZpZXcsCiAgICAgICAgICAgIF9hcmdzMiA9IGFyZ3VtZW50czsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29udGV4dCA9IF9hcmdzMi5sZW5ndGggPiAxICYmIF9hcmdzMlsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3MyWzFdIDoge307CiAgICAgICAgICAgICAgICBwYXJhbXMgPSBfYXJnczIubGVuZ3RoID4gMiAmJiBfYXJnczJbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlsyXSA6IHt9OwogICAgICAgICAgICAgICAgJGV2ZW50ID0gX2FyZ3MyLmxlbmd0aCA+IDMgPyBfYXJnczJbM10gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB4RGF0YSA9IF9hcmdzMi5sZW5ndGggPiA0ID8gX2FyZ3MyWzRdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgYWN0aW9uQ29udGV4dCA9IF9hcmdzMi5sZW5ndGggPiA1ID8gX2FyZ3MyWzVdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgc3JmUGFyZW50RGVOYW1lID0gX2FyZ3MyLmxlbmd0aCA+IDYgPyBfYXJnczJbNl0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBkYXRhID0ge307CiAgICAgICAgICAgICAgICBwYXJlbnRDb250ZXh0ID0ge307CiAgICAgICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0gPSB7fTsKICAgICAgICAgICAgICAgIF90aGlzID0gYWN0aW9uQ29udGV4dDsKICAgICAgICAgICAgICAgIF9hcmdzID0gVXRpbC5kZWVwQ29weShhcmdzKTsKICAgICAgICAgICAgICAgIGFjdGlvblRhcmdldCA9ICdOT05FJzsKCiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29udGV4dCkgewogICAgICAgICAgICAgICAgICBwYXJlbnRDb250ZXh0ID0gX3RoaXMuY29udGV4dDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoX3RoaXMudmlld3BhcmFtcykgewogICAgICAgICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0gPSBfdGhpcy52aWV3cGFyYW1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBVSUFjdGlvblRvb2wuaGFuZGxlQ29udGV4dFBhcmFtKGFjdGlvblRhcmdldCwgX2FyZ3MsIHBhcmVudENvbnRleHQsIHBhcmVudFZpZXdQYXJhbSwgY29udGV4dCk7CiAgICAgICAgICAgICAgICBkYXRhID0gVUlBY3Rpb25Ub29sLmhhbmRsZUFjdGlvblBhcmFtKGFjdGlvblRhcmdldCwgX2FyZ3MsIHBhcmVudENvbnRleHQsIHBhcmVudFZpZXdQYXJhbSwgcGFyYW1zKTsKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBPYmplY3QuYXNzaWduKHt9LCBhY3Rpb25Db250ZXh0LmNvbnRleHQsIGNvbnRleHQpOwogICAgICAgICAgICAgICAgcGFyZW50T2JqID0gewogICAgICAgICAgICAgICAgICBzcmZwYXJlbnRkZW5hbWU6IHNyZlBhcmVudERlTmFtZSA/IHNyZlBhcmVudERlTmFtZSA6IG51bGwsCiAgICAgICAgICAgICAgICAgIHNyZnBhcmVudGtleTogc3JmUGFyZW50RGVOYW1lID8gY29udGV4dFtzcmZQYXJlbnREZU5hbWUudG9Mb3dlckNhc2UoKV0gOiBudWxsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCBwYXJlbnRPYmopOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCBwYXJlbnRPYmopOwogICAgICAgICAgICAgICAgZGVSZXNQYXJhbWV0ZXJzID0gW107CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzID0gW3sKICAgICAgICAgICAgICAgICAgcGF0aE5hbWU6ICdwaW1wZW9wbGUnLAogICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJOYW1lOiAncGltcGVyc29uJwogICAgICAgICAgICAgICAgfV07CgogICAgICAgICAgICAgICAgb3BlblBvcHVwTW9kYWwgPSBmdW5jdGlvbiBvcGVuUG9wdXBNb2RhbCh2aWV3LCBkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBhY3Rpb25Db250ZXh0LiRhcHBtb2RhbC5vcGVuTW9kYWwodmlldywgY29udGV4dCwgZGF0YSk7CiAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdWJzY3JpYmUoZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8ICFPYmplY3QuaXMocmVzdWx0LnJldCwgJ09LJykpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IGFjdGlvbkNvbnRleHQ7CgogICAgICAgICAgICAgICAgICAgIGlmICh4RGF0YSAmJiB4RGF0YS5yZWZyZXNoICYmIHhEYXRhLnJlZnJlc2ggaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgeERhdGEucmVmcmVzaChhcmdzKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczMuUGltUGVyc29uX09wZW5BbGxJbmZvVmlldyAmJiBfdGhpczMuUGltUGVyc29uX09wZW5BbGxJbmZvVmlldyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuUGltUGVyc29uX09wZW5BbGxJbmZvVmlldyhyZXN1bHQuZGF0YXMsIGNvbnRleHQsIHBhcmFtcywgJGV2ZW50LCB4RGF0YSwgYWN0aW9uQ29udGV4dCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lm9wZW5lcikgewogICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW5lci5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ09LJywKICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmljYXRpb246ICdXRicKICAgICAgICAgICAgICAgICAgICAgIH0sIEVudmlyb25tZW50LnVuaXRlQWRkcmVzcyk7CiAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YXM7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB2aWV3ID0gewogICAgICAgICAgICAgICAgICB2aWV3bmFtZTogJ3BpbXBlcnNvbnF1aWNrLWVkaXQtdmlldycsCiAgICAgICAgICAgICAgICAgIGhlaWdodDogNTAwLAogICAgICAgICAgICAgICAgICB3aWR0aDogNDUwLAogICAgICAgICAgICAgICAgICB0aXRsZTogYWN0aW9uQ29udGV4dC4kdCgnZW50aXRpZXMucGltcGVyc29uLnZpZXdzLnF1aWNrZWRpdHZpZXcudGl0bGUnKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIG9wZW5Qb3B1cE1vZGFsKHZpZXcsIGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIFBpbVBlcnNvbl9RdWlja0NyZWF0ZVBlcnNvbihfeCkgewogICAgICAgIHJldHVybiBfUGltUGVyc29uX1F1aWNrQ3JlYXRlUGVyc29uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBQaW1QZXJzb25fUXVpY2tDcmVhdGVQZXJzb247CiAgICB9KCkKICAgIC8qKg0KICAgICAqIOe8lui+kQ0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncyDlvZPliY3mlbDmja4NCiAgICAgKiBAcGFyYW0ge2FueX0gY29udGV4dCDooYzkuLrpmYTliqDkuIrkuIvmlocNCiAgICAgKiBAcGFyYW0geyp9IFtwYXJhbXNdIOmZhOWKoOWPguaVsA0KICAgICAqIEBwYXJhbSB7Kn0gWyRldmVudF0g5LqL5Lu25rqQDQogICAgICogQHBhcmFtIHsqfSBbeERhdGFdICDmiafooYzooYzkuLrmiYDpnIDlvZPliY3pg6jku7YNCiAgICAgKiBAcGFyYW0geyp9IFthY3Rpb25Db250ZXh0XSAg5omn6KGM6KGM5Li65LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbc3JmUGFyZW50RGVOYW1lXSDniLblrp7kvZPlkI3np7ANCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJQaW1QZXJzb25fT3BlbkVkaXRWaWV3IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfUGltUGVyc29uX09wZW5FZGl0VmlldyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGFyZ3MpIHsKICAgICAgICB2YXIgY29udGV4dCwKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICAkZXZlbnQsCiAgICAgICAgICAgIHhEYXRhLAogICAgICAgICAgICBhY3Rpb25Db250ZXh0LAogICAgICAgICAgICBzcmZQYXJlbnREZU5hbWUsCiAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgIHBhcmVudENvbnRleHQsCiAgICAgICAgICAgIHBhcmVudFZpZXdQYXJhbSwKICAgICAgICAgICAgX3RoaXMsCiAgICAgICAgICAgIF9hcmdzLAogICAgICAgICAgICBhY3Rpb25UYXJnZXQsCiAgICAgICAgICAgIHBhcmVudE9iaiwKICAgICAgICAgICAgZGVSZXNQYXJhbWV0ZXJzLAogICAgICAgICAgICBwYXJhbWV0ZXJzLAogICAgICAgICAgICBvcGVuRHJhd2VyLAogICAgICAgICAgICB2aWV3LAogICAgICAgICAgICBfYXJnczMgPSBhcmd1bWVudHM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb250ZXh0ID0gX2FyZ3MzLmxlbmd0aCA+IDEgJiYgX2FyZ3MzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJnczNbMV0gOiB7fTsKICAgICAgICAgICAgICAgIHBhcmFtcyA9IF9hcmdzMy5sZW5ndGggPiAyICYmIF9hcmdzM1syXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3MzWzJdIDoge307CiAgICAgICAgICAgICAgICAkZXZlbnQgPSBfYXJnczMubGVuZ3RoID4gMyA/IF9hcmdzM1szXSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHhEYXRhID0gX2FyZ3MzLmxlbmd0aCA+IDQgPyBfYXJnczNbNF0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBhY3Rpb25Db250ZXh0ID0gX2FyZ3MzLmxlbmd0aCA+IDUgPyBfYXJnczNbNV0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBzcmZQYXJlbnREZU5hbWUgPSBfYXJnczMubGVuZ3RoID4gNiA/IF9hcmdzM1s2XSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGRhdGEgPSB7fTsKICAgICAgICAgICAgICAgIHBhcmVudENvbnRleHQgPSB7fTsKICAgICAgICAgICAgICAgIHBhcmVudFZpZXdQYXJhbSA9IHt9OwogICAgICAgICAgICAgICAgX3RoaXMgPSBhY3Rpb25Db250ZXh0OwogICAgICAgICAgICAgICAgX2FyZ3MgPSBVdGlsLmRlZXBDb3B5KGFyZ3MpOwogICAgICAgICAgICAgICAgYWN0aW9uVGFyZ2V0ID0gJ1NJTkdMRUtFWSc7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHsKICAgICAgICAgICAgICAgICAgcGltcGVyc29uOiAnJXBpbXBlcnNvbiUnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7CiAgICAgICAgICAgICAgICAgIHBpbXBlcnNvbmlkOiAnJXBpbXBlcnNvbiUnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7CiAgICAgICAgICAgICAgICAgIHBpbXBlcnNvbm5hbWU6ICclcGltcGVyc29ubmFtZSUnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29udGV4dCkgewogICAgICAgICAgICAgICAgICBwYXJlbnRDb250ZXh0ID0gX3RoaXMuY29udGV4dDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoX3RoaXMudmlld3BhcmFtcykgewogICAgICAgICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0gPSBfdGhpcy52aWV3cGFyYW1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBVSUFjdGlvblRvb2wuaGFuZGxlQ29udGV4dFBhcmFtKGFjdGlvblRhcmdldCwgX2FyZ3MsIHBhcmVudENvbnRleHQsIHBhcmVudFZpZXdQYXJhbSwgY29udGV4dCk7CiAgICAgICAgICAgICAgICBkYXRhID0gVUlBY3Rpb25Ub29sLmhhbmRsZUFjdGlvblBhcmFtKGFjdGlvblRhcmdldCwgX2FyZ3MsIHBhcmVudENvbnRleHQsIHBhcmVudFZpZXdQYXJhbSwgcGFyYW1zKTsKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBPYmplY3QuYXNzaWduKHt9LCBhY3Rpb25Db250ZXh0LmNvbnRleHQsIGNvbnRleHQpOwogICAgICAgICAgICAgICAgcGFyZW50T2JqID0gewogICAgICAgICAgICAgICAgICBzcmZwYXJlbnRkZW5hbWU6IHNyZlBhcmVudERlTmFtZSA/IHNyZlBhcmVudERlTmFtZSA6IG51bGwsCiAgICAgICAgICAgICAgICAgIHNyZnBhcmVudGtleTogc3JmUGFyZW50RGVOYW1lID8gY29udGV4dFtzcmZQYXJlbnREZU5hbWUudG9Mb3dlckNhc2UoKV0gOiBudWxsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCBwYXJlbnRPYmopOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCBwYXJlbnRPYmopOwogICAgICAgICAgICAgICAgZGVSZXNQYXJhbWV0ZXJzID0gW107CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzID0gW3sKICAgICAgICAgICAgICAgICAgcGF0aE5hbWU6ICdwaW1wZW9wbGUnLAogICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJOYW1lOiAncGltcGVyc29uJwogICAgICAgICAgICAgICAgfV07CgogICAgICAgICAgICAgICAgb3BlbkRyYXdlciA9IGZ1bmN0aW9uIG9wZW5EcmF3ZXIodmlldywgZGF0YSkgewogICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gYWN0aW9uQ29udGV4dC4kYXBwZHJhd2VyLm9wZW5EcmF3ZXIodmlldywgY29udGV4dCwgZGF0YSk7CiAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdWJzY3JpYmUoZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8ICFPYmplY3QuaXMocmVzdWx0LnJldCwgJ09LJykpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IGFjdGlvbkNvbnRleHQ7CgogICAgICAgICAgICAgICAgICAgIGlmICh4RGF0YSAmJiB4RGF0YS5yZWZyZXNoICYmIHhEYXRhLnJlZnJlc2ggaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgeERhdGEucmVmcmVzaChhcmdzKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cub3BlbmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbmVyLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnT0snLAogICAgICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWNhdGlvbjogJ1dGJwogICAgICAgICAgICAgICAgICAgICAgfSwgRW52aXJvbm1lbnQudW5pdGVBZGRyZXNzKTsKICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhczsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHZpZXcgPSB7CiAgICAgICAgICAgICAgICAgIHZpZXduYW1lOiAncGltcGVyc29ucGVyc29uLWluZm8tZWRpdC12aWV3JywKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwLAogICAgICAgICAgICAgICAgICB3aWR0aDogMTM2NiwKICAgICAgICAgICAgICAgICAgdGl0bGU6IGFjdGlvbkNvbnRleHQuJHQoJ2VudGl0aWVzLnBpbXBlcnNvbi52aWV3cy5wZXJzb25pbmZvZWRpdHZpZXcudGl0bGUnKSwKICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiAnRFJBV0VSX1JJR0hUJwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIG9wZW5EcmF3ZXIodmlldywgZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBQaW1QZXJzb25fT3BlbkVkaXRWaWV3KF94MikgewogICAgICAgIHJldHVybiBfUGltUGVyc29uX09wZW5FZGl0Vmlldy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gUGltUGVyc29uX09wZW5FZGl0VmlldzsKICAgIH0oKQogICAgLyoqDQogICAgICog57yW6L6RDQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIOW9k+WJjeaVsOaNrg0KICAgICAqIEBwYXJhbSB7YW55fSBjb250ZXh0IOihjOS4uumZhOWKoOS4iuS4i+aWhw0KICAgICAqIEBwYXJhbSB7Kn0gW3BhcmFtc10g6ZmE5Yqg5Y+C5pWwDQogICAgICogQHBhcmFtIHsqfSBbJGV2ZW50XSDkuovku7bmupANCiAgICAgKiBAcGFyYW0geyp9IFt4RGF0YV0gIOaJp+ihjOihjOS4uuaJgOmcgOW9k+WJjemDqOS7tg0KICAgICAqIEBwYXJhbSB7Kn0gW2FjdGlvbkNvbnRleHRdICDmiafooYzooYzkuLrkuIrkuIvmlocNCiAgICAgKiBAcGFyYW0geyp9IFtzcmZQYXJlbnREZU5hbWVdIOeItuWunuS9k+WQjeensA0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICovCgogIH0sIHsKICAgIGtleTogIlBpbVBlcnNvbl9PcGVuQWxsSW5mb1ZpZXciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9QaW1QZXJzb25fT3BlbkFsbEluZm9WaWV3ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoYXJncykgewogICAgICAgIHZhciBjb250ZXh0LAogICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgICRldmVudCwKICAgICAgICAgICAgeERhdGEsCiAgICAgICAgICAgIGFjdGlvbkNvbnRleHQsCiAgICAgICAgICAgIHNyZlBhcmVudERlTmFtZSwKICAgICAgICAgICAgZGF0YSwKICAgICAgICAgICAgcGFyZW50Q29udGV4dCwKICAgICAgICAgICAgcGFyZW50Vmlld1BhcmFtLAogICAgICAgICAgICBfdGhpcywKICAgICAgICAgICAgX2FyZ3MsCiAgICAgICAgICAgIGFjdGlvblRhcmdldCwKICAgICAgICAgICAgcGFyZW50T2JqLAogICAgICAgICAgICBkZVJlc1BhcmFtZXRlcnMsCiAgICAgICAgICAgIHBhcmFtZXRlcnMsCiAgICAgICAgICAgIG9wZW5EcmF3ZXIsCiAgICAgICAgICAgIHZpZXcsCiAgICAgICAgICAgIF9hcmdzNCA9IGFyZ3VtZW50czsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBfYXJnczQubGVuZ3RoID4gMSAmJiBfYXJnczRbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzNFsxXSA6IHt9OwogICAgICAgICAgICAgICAgcGFyYW1zID0gX2FyZ3M0Lmxlbmd0aCA+IDIgJiYgX2FyZ3M0WzJdICE9PSB1bmRlZmluZWQgPyBfYXJnczRbMl0gOiB7fTsKICAgICAgICAgICAgICAgICRldmVudCA9IF9hcmdzNC5sZW5ndGggPiAzID8gX2FyZ3M0WzNdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgeERhdGEgPSBfYXJnczQubGVuZ3RoID4gNCA/IF9hcmdzNFs0XSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGFjdGlvbkNvbnRleHQgPSBfYXJnczQubGVuZ3RoID4gNSA/IF9hcmdzNFs1XSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHNyZlBhcmVudERlTmFtZSA9IF9hcmdzNC5sZW5ndGggPiA2ID8gX2FyZ3M0WzZdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgZGF0YSA9IHt9OwogICAgICAgICAgICAgICAgcGFyZW50Q29udGV4dCA9IHt9OwogICAgICAgICAgICAgICAgcGFyZW50Vmlld1BhcmFtID0ge307CiAgICAgICAgICAgICAgICBfdGhpcyA9IGFjdGlvbkNvbnRleHQ7CiAgICAgICAgICAgICAgICBfYXJncyA9IFV0aWwuZGVlcENvcHkoYXJncyk7CiAgICAgICAgICAgICAgICBhY3Rpb25UYXJnZXQgPSAnU0lOR0xFS0VZJzsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwgewogICAgICAgICAgICAgICAgICBwaW1wZXJzb246ICclcGltcGVyc29uJScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsKICAgICAgICAgICAgICAgICAgcGltcGVyc29uaWQ6ICclcGltcGVyc29uJScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsKICAgICAgICAgICAgICAgICAgcGltcGVyc29ubmFtZTogJyVwaW1wZXJzb25uYW1lJScKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgIHBhcmVudENvbnRleHQgPSBfdGhpcy5jb250ZXh0OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChfdGhpcy52aWV3cGFyYW1zKSB7CiAgICAgICAgICAgICAgICAgIHBhcmVudFZpZXdQYXJhbSA9IF90aGlzLnZpZXdwYXJhbXM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29udGV4dCA9IFVJQWN0aW9uVG9vbC5oYW5kbGVDb250ZXh0UGFyYW0oYWN0aW9uVGFyZ2V0LCBfYXJncywgcGFyZW50Q29udGV4dCwgcGFyZW50Vmlld1BhcmFtLCBjb250ZXh0KTsKICAgICAgICAgICAgICAgIGRhdGEgPSBVSUFjdGlvblRvb2wuaGFuZGxlQWN0aW9uUGFyYW0oYWN0aW9uVGFyZ2V0LCBfYXJncywgcGFyZW50Q29udGV4dCwgcGFyZW50Vmlld1BhcmFtLCBwYXJhbXMpOwogICAgICAgICAgICAgICAgY29udGV4dCA9IE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbkNvbnRleHQuY29udGV4dCwgY29udGV4dCk7CiAgICAgICAgICAgICAgICBwYXJlbnRPYmogPSB7CiAgICAgICAgICAgICAgICAgIHNyZnBhcmVudGRlbmFtZTogc3JmUGFyZW50RGVOYW1lID8gc3JmUGFyZW50RGVOYW1lIDogbnVsbCwKICAgICAgICAgICAgICAgICAgc3JmcGFyZW50a2V5OiBzcmZQYXJlbnREZU5hbWUgPyBjb250ZXh0W3NyZlBhcmVudERlTmFtZS50b0xvd2VyQ2FzZSgpXSA6IG51bGwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGRhdGEsIHBhcmVudE9iaik7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHBhcmVudE9iaik7CiAgICAgICAgICAgICAgICBkZVJlc1BhcmFtZXRlcnMgPSBbXTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSBbewogICAgICAgICAgICAgICAgICBwYXRoTmFtZTogJ3BpbXBlb3BsZScsCiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlck5hbWU6ICdwaW1wZXJzb24nCiAgICAgICAgICAgICAgICB9XTsKCiAgICAgICAgICAgICAgICBvcGVuRHJhd2VyID0gZnVuY3Rpb24gb3BlbkRyYXdlcih2aWV3LCBkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBhY3Rpb25Db250ZXh0LiRhcHBkcmF3ZXIub3BlbkRyYXdlcih2aWV3LCBjb250ZXh0LCBkYXRhKTsKICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN1YnNjcmliZShmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQgfHwgIU9iamVjdC5pcyhyZXN1bHQucmV0LCAnT0snKSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gYWN0aW9uQ29udGV4dDsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5vcGVuZXIpIHsKICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuZXIucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdPSycsCiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpY2F0aW9uOiAnV0YnCiAgICAgICAgICAgICAgICAgICAgICB9LCBFbnZpcm9ubWVudC51bml0ZUFkZHJlc3MpOwogICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGFzOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmlldyA9IHsKICAgICAgICAgICAgICAgICAgdmlld25hbWU6ICdwaW1wZXJzb25lZGl0LXZpZXcyJywKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwLAogICAgICAgICAgICAgICAgICB3aWR0aDogMCwKICAgICAgICAgICAgICAgICAgdGl0bGU6IGFjdGlvbkNvbnRleHQuJHQoJ2VudGl0aWVzLnBpbXBlcnNvbi52aWV3cy5lZGl0dmlldzIudGl0bGUnKSwKICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiAnRFJBV0VSX1RPUCcKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBvcGVuRHJhd2VyKHZpZXcsIGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gUGltUGVyc29uX09wZW5BbGxJbmZvVmlldyhfeDMpIHsKICAgICAgICByZXR1cm4gX1BpbVBlcnNvbl9PcGVuQWxsSW5mb1ZpZXcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIFBpbVBlcnNvbl9PcGVuQWxsSW5mb1ZpZXc7CiAgICB9KCkKICAgIC8qKg0KICAgICAqIOiOt+WPluaMh+WumuaVsOaNrueahOmHjeWumuWQkemhtemdog0KICAgICAqDQogICAgICogQHBhcmFtIHNyZmtleSDmlbDmja7kuLvplK4NCiAgICAgKiBAcGFyYW0gaXNFbmFibGVXb3JrZmxvdyAg6YeN5a6a5ZCR6KeG5Zu+5piv5ZCm6ZyA6KaB5aSE55CG5rWB56iL5Lit55qE5pWw5o2uDQogICAgICogQG1lbWJlcm9mICBQaW1QZXJzb25VSVNlcnZpY2VCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFJEQXBwVmlldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldFJEQXBwVmlldyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHNyZmtleSwgaXNFbmFibGVXb3JrZmxvdykgewogICAgICAgIHZhciByZXN1bHQsIGN1ckRhdGEsIGlSZWFsREVNb2RlbCwgYkRhdGFJbldGLCBiV0ZNb2RlLCBzdHJQRFRWaWV3UGFyYW07CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVXb3JrZmxvdyA9IGlzRW5hYmxlV29ya2Zsb3c7IC8vIOi/m+ihjOaVsOaNruafpeivogoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLkdldCh7CiAgICAgICAgICAgICAgICAgIHBpbXBlcnNvbjogc3Jma2V5CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgICBjdXJEYXRhID0gcmVzdWx0LmRhdGE7IC8v5Yik5pat5b2T5YmN5pWw5o2u5qih5byPLOm7mOiupOS4unRydWXvvIx0b2RvCgogICAgICAgICAgICAgICAgaVJlYWxERU1vZGVsID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGJEYXRhSW5XRiA9IGZhbHNlOwogICAgICAgICAgICAgICAgYldGTW9kZSA9IGZhbHNlOyAvLyDorqHnrpfmlbDmja7mqKHlvI8KCiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVXb3JrZmxvdykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UudGVzdERhdGFJbldGKHsKICAgICAgICAgICAgICAgICAgc3RhdGVWYWx1ZTogdGhpcy5zdGF0ZVZhbHVlLAogICAgICAgICAgICAgICAgICBzdGF0ZUZpZWxkOiB0aGlzLnN0YXRlRmllbGQKICAgICAgICAgICAgICAgIH0sIGN1ckRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgYkRhdGFJbldGID0gX2NvbnRleHQ0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFiRGF0YUluV0YpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgYkRhdGFJbldGID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS50ZXN0VXNlckV4aXN0V29ya2xpc3QobnVsbCwgY3VyRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBiV0ZNb2RlID0gX2NvbnRleHQ0LnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE5OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0REVTRERFVmlld1BEVFBhcmFtKGN1ckRhdGEsIGJEYXRhSW5XRiwgYldGTW9kZSk7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgICBzdHJQRFRWaWV3UGFyYW0gPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmFsbFZpZXdNYXAuZ2V0KHN0clBEVFZpZXdQYXJhbSkpOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0UkRBcHBWaWV3KF94NCwgX3g1KSB7CiAgICAgICAgcmV0dXJuIF9nZXRSREFwcFZpZXcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldFJEQXBwVmlldzsKICAgIH0oKQogICAgLyoqDQogICAgICog6I635Y+W5a6e6ZmF55qE5pWw5o2u57G75Z6LDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbVBlcnNvblVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0UmVhbERFVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVhbERFVHlwZShlbnRpdHkpIHt9CiAgICAvKioNCiAgICAgKiDojrflj5blrp7kvZPljZXmlbDmja7lrp7kvZPop4blm77pooTlrprkuYnlj4LmlbANCiAgICAgKg0KICAgICAqIEBwYXJhbSBjdXJEYXRhIOW9k+WJjeaVsOaNrg0KICAgICAqIEBwYXJhbSBiRGF0YUluV0Yg5piv5ZCm5pyJ5pWw5o2u5Zyo5bel5L2c5rWB5LitDQogICAgICogQHBhcmFtIGJXRk1vZGUgICDmmK/lkKblt6XkvZzmtYHmqKHlvI8NCiAgICAgKiBAbWVtYmVyb2YgIFBpbVBlcnNvblVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0REVTRERFVmlld1BEVFBhcmFtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0REVTRERFVmlld1BEVFBhcmFtID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoY3VyRGF0YSwgYkRhdGFJbldGLCBiV0ZNb2RlKSB7CiAgICAgICAgdmFyIHN0clBEVFBhcmFtLCBpc0VuYWJsZU11bHRpRm9ybSwgbXVsdGlGb3JtREVGaWVsZCwgb2JqRm9ybVZhbHVlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdHJQRFRQYXJhbSA9ICcnOwoKICAgICAgICAgICAgICAgIGlmIChiRGF0YUluV0YpIHt9IC8vIOWIpOaWreaVsOaNruaYr+WQpuWcqOa1geeoi+S4rQogICAgICAgICAgICAgICAgLy/lpJrooajljZXvvIx0b2RvCgoKICAgICAgICAgICAgICAgIGlzRW5hYmxlTXVsdGlGb3JtID0gZmFsc2U7CiAgICAgICAgICAgICAgICBtdWx0aUZvcm1ERUZpZWxkID0gbnVsbDsKCiAgICAgICAgICAgICAgICBpZiAoIShpc0VuYWJsZU11bHRpRm9ybSAmJiBtdWx0aUZvcm1ERUZpZWxkKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG9iakZvcm1WYWx1ZSA9IGN1ckRhdGFbbXVsdGlGb3JtREVGaWVsZF07CgogICAgICAgICAgICAgICAgaWYgKEVudmlyb25tZW50LmlzQXBwTW9kZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCAnTU9CRURJVFZJRVcnICsgb2JqRm9ybVZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsICdFRElUVklFVycgKyBvYmpGb3JtVmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBpZiAoRW52aXJvbm1lbnQuaXNBcHBNb2RlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghdGhpcy5nZXRERU1haW5TdGF0ZVRhZyhjdXJEYXRhKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDUudDAgPSAiTU9CRURJVFZJRVc6TVNUQUc6IjsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRERU1haW5TdGF0ZVRhZyhjdXJEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS50MSA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0NS50MC5jb25jYXQuY2FsbChfY29udGV4dDUudDAsIF9jb250ZXh0NS50MSkpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsICdNT0JFRElUVklFVzonKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIGlmICghdGhpcy5nZXRERU1haW5TdGF0ZVRhZyhjdXJEYXRhKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDIzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDUudDIgPSAiRURJVFZJRVc6TVNUQUc6IjsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRERU1haW5TdGF0ZVRhZyhjdXJEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIF9jb250ZXh0NS50MyA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0NS50Mi5jb25jYXQuY2FsbChfY29udGV4dDUudDIsIF9jb250ZXh0NS50MykpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsICdFRElUVklFVzonKTsKCiAgICAgICAgICAgICAgY2FzZSAyNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldERFU0RERVZpZXdQRFRQYXJhbShfeDYsIF94NywgX3g4KSB7CiAgICAgICAgcmV0dXJuIF9nZXRERVNEREVWaWV3UERUUGFyYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldERFU0RERVZpZXdQRFRQYXJhbTsKICAgIH0oKQogICAgLyoqDQogICAgICog6I635Y+W5pWw5o2u5a+56LGh55qE5Li754q25oCB5qCH6K+GDQogICAgICoNCiAgICAgKiBAcGFyYW0gY3VyRGF0YSDlvZPliY3mlbDmja4NCiAgICAgKiBAbWVtYmVyb2YgIFBpbVBlcnNvblVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0REVNYWluU3RhdGVUYWciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRERU1haW5TdGF0ZVRhZyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KGN1ckRhdGEpIHsKICAgICAgICB2YXIgc3RyVGFnLCBpLCBfc3RyVGFnLCBqLCBzdHJUYWcyLCBrLCBzdHJUYWczOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCEodGhpcy5tYWluU3RhdGVGaWVsZHMubGVuZ3RoID09PSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBudWxsKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgdGhpcy5tYWluU3RhdGVGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoc2luZ2xlTWFpbkZpZWxkKSB7CiAgICAgICAgICAgICAgICAgIGlmICghKHNpbmdsZU1haW5GaWVsZCBpbiBjdXJEYXRhKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlx1NUY1M1x1NTI0RFx1NjU3MFx1NjM2RVx1NUJGOVx1OEM2MVx1NEUwRFx1NTMwNVx1NTQyQlx1NUM1RVx1NjAyN3NpbmdsZU1haW5GaWVsZFx1RkYwQ1x1NTNFRlx1ODBGRFx1NEYxQVx1NTNEMVx1NzUxRlx1OTUxOVx1OEJFRiIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHN0clRhZyA9ICIiOwogICAgICAgICAgICAgICAgaSA9IDA7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGlmICghKGkgPD0gMSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAzMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3N0clRhZyA9IGN1ckRhdGFbdGhpcy5tYWluU3RhdGVGaWVsZHNbMF1dID8gaSA9PSAwID8gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1swXV0gOiAiIiA6ICIiOwoKICAgICAgICAgICAgICAgIGlmICghKHRoaXMubWFpblN0YXRlRmllbGRzLmxlbmd0aCA+PSAyKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDI3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBqID0gMDsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaWYgKCEoaiA8PSAxKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDI1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBzdHJUYWcyID0gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1sxXV0gPyAiIi5jb25jYXQoX3N0clRhZywgIl9fIikuY29uY2F0KGogPT0gMCA/IGN1ckRhdGFbdGhpcy5tYWluU3RhdGVGaWVsZHNbMV1dIDogIiIpIDogX3N0clRhZzsKCiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm1haW5TdGF0ZUZpZWxkcy5sZW5ndGggPj0gMykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgayA9IDA7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBpZiAoIShrIDw9IDEpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN0clRhZzMgPSBjdXJEYXRhW3RoaXMubWFpblN0YXRlRmllbGRzWzJdXSA/ICIiLmNvbmNhdChzdHJUYWcyLCAiX18iKS5jb25jYXQoayA9PSAwID8gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1syXV0gOiAiIikgOiBzdHJUYWcyOyAvLyDliKTmlq3mmK/lkKblrZjlnKgKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgdGhpcy5hbGxEZU1haW5TdGF0ZU1hcC5nZXQoc3RyVGFnMykpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgaysrOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIHRoaXMuYWxsRGVNYWluU3RhdGVNYXAuZ2V0KHN0clRhZzIpKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIGorKzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIHRoaXMuYWxsRGVNYWluU3RhdGVNYXAuZ2V0KF9zdHJUYWcpKTsKCiAgICAgICAgICAgICAgY2FzZSAyODoKICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICAgICAgICBjYXNlIDMyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0REVNYWluU3RhdGVUYWcoX3g5KSB7CiAgICAgICAgcmV0dXJuIF9nZXRERU1haW5TdGF0ZVRhZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0REVNYWluU3RhdGVUYWc7CiAgICB9KCkKICB9XSk7CgogIHJldHVybiBQaW1QZXJzb25VSVNlcnZpY2VCYXNlOwp9KFVJU2VydmljZSk7CgpleHBvcnQgeyBQaW1QZXJzb25VSVNlcnZpY2VCYXNlIGFzIGRlZmF1bHQgfTs="},null]}
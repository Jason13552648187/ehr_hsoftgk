{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--14-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-exitandentry\\yscgj-form\\yscgj-form-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-exitandentry\\yscgj-form\\yscgj-form-base.vue","mtime":1630509411614},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC52YWx1ZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjsKaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IFZ1ZSwgQ29tcG9uZW50LCBQcm9wLCBXYXRjaCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InOwppbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IFV0aWwgfSBmcm9tICdAL3V0aWxzJzsKaW1wb3J0IFBpbUV4aXRhbmRlbnRyeVNlcnZpY2UgZnJvbSAnQC9zZXJ2aWNlL3BpbS1leGl0YW5kZW50cnkvcGltLWV4aXRhbmRlbnRyeS1zZXJ2aWNlJzsKaW1wb3J0IFlTQ0dKU2VydmljZSBmcm9tICcuL3lzY2dqLWZvcm0tc2VydmljZSc7CmltcG9ydCB7IEZvcm1QYWdlTW9kZWwsIEZvcm1JdGVtTW9kZWwsIEZvcm1Hcm91cFBhbmVsTW9kZWwgfSBmcm9tICdAL21vZGVsL2Zvcm0tZGV0YWlsJzsKaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJzsKCnZhciBZU0NHSkJhc2UgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfVnVlKSB7CiAgX2luaGVyaXRzKFlTQ0dKQmFzZSwgX1Z1ZSk7CgogIGZ1bmN0aW9uIFlTQ0dKQmFzZSgpIHsKICAgIHZhciBfdGhpczI7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFlTQ0dKQmFzZSk7CgogICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFlTQ0dKQmFzZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICAvKioNCiAgICAgKiDorqHmlbDlmajmnI3liqHlr7nosaHpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHtBcnJheTwqPn0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogICAgX3RoaXMyLmNvdW50ZXJTZXJ2aWNlQXJyYXkgPSBbXTsKICAgIC8qKg0KICAgICAqIOW7uuaehOmDqOS7tuacjeWKoeWvueixoQ0KICAgICAqDQogICAgICogQHR5cGUge1lTQ0dKU2VydmljZX0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogICAgX3RoaXMyLnNlcnZpY2UgPSBuZXcgWVNDR0pTZXJ2aWNlKHsKICAgICAgJHN0b3JlOiBfdGhpczIuJHN0b3JlCiAgICB9KTsKICAgIC8qKg0KICAgICAqIOWunuS9k+acjeWKoeWvueixoQ0KICAgICAqDQogICAgICogQHR5cGUge1BpbUV4aXRhbmRlbnRyeVNlcnZpY2V9DQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5hcHBFbnRpdHlTZXJ2aWNlID0gbmV3IFBpbUV4aXRhbmRlbnRyeVNlcnZpY2UoewogICAgICAkc3RvcmU6IF90aGlzMi4kc3RvcmUKICAgIH0pOwogICAgLyoqDQogICAgICog5bel5L2c5rWB5a6h5om55oSP6KeB5o6n5Lu257uR5a6a5YC8DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogICAgX3RoaXMyLnNyZndmbWVtbyA9ICIiOwogICAgLyoqDQogICAgICog6KGo5Y2V54q25oCBDQogICAgICoNCiAgICAgKiBAdHlwZSB7U3ViamVjdDxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuZm9ybVN0YXRlID0gbmV3IFN1YmplY3QoKTsKICAgIC8qKg0KICAgICAqIOW/veeVpeihqOWNlemhueWAvOWPmOWMlg0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5pZ25vcmVmaWVsZHZhbHVlY2hhbmdlID0gZmFsc2U7CiAgICAvKioNCiAgICAgKiDmlbDmja7lj5jljJYNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAdHlwZSB7U3ViamVjdDxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuZGF0YUNoYW5nID0gbmV3IFN1YmplY3QoKTsKICAgIC8qKg0KICAgICAqIOWOn+Wni+aVsOaNrg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIub2xkRGF0YSA9IHt9OwogICAgLyoqDQogICAgICog6KGo5Y2V5pWw5o2u5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogICAgX3RoaXMyLmRhdGEgPSB7CiAgICAgIHNyZnVwZGF0ZWRhdGU6IG51bGwsCiAgICAgIHNyZm9yaWtleTogbnVsbCwKICAgICAgc3Jma2V5OiBudWxsLAogICAgICBzcmZtYWpvcnRleHQ6IG51bGwsCiAgICAgIHNyZnRlbXBtb2RlOiBudWxsLAogICAgICBzcmZ1ZjogbnVsbCwKICAgICAgc3JmZGVpZDogbnVsbCwKICAgICAgc3Jmc291cmNla2V5OiBudWxsLAogICAgICBwaW1wZXJzb25pZDogbnVsbCwKICAgICAgcGltcGVyc29ubmFtZTogbnVsbCwKICAgICAgY2pzajogbnVsbCwKICAgICAgcmpzajogbnVsbCwKICAgICAgcXdmaGdqOiBudWxsLAogICAgICBseDogbnVsbCwKICAgICAgc3k6IG51bGwsCiAgICAgIGJ6OiBudWxsLAogICAgICBvcmdpZDogbnVsbCwKICAgICAgb3Jnc2VjdG9yaWQ6IG51bGwsCiAgICAgIHdvcmtmbG93c3RhdGU6IG51bGwsCiAgICAgIHBpbWV4aXRhbmRlbnRyeWlkOiBudWxsLAogICAgICBwaW1leGl0YW5kZW50cnk6IG51bGwKICAgIH07CiAgICAvKioNCiAgICAgICog5b2T5YmN5omn6KGM55qE6KGM5Li66YC76L6RDQogICAgICAqDQogICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgICovCgogICAgX3RoaXMyLmN1cnJlbnRBY3Rpb24gPSAiIjsKICAgIC8qKg0KICAgICAgKiDlhbPns7vnlYzpnaLorqHmlbDlmagNCiAgICAgICoNCiAgICAgICogQHR5cGUge251bWJlcn0NCiAgICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAgKi8KCiAgICBfdGhpczIuZHJjb3VudGVyID0gMDsKICAgIC8qKg0KICAgICAgKiDpnIDopoHnrYnlvoXlhbPns7vnlYzpnaLkv53lrZjml7bvvIznrKzkuIDmrKHosIPnlKhzYXZl5Y+C5pWw55qE5aSH5Lu9DQogICAgICAqDQogICAgICAqIEB0eXBlIHtudW1iZXJ9DQogICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgICovCgogICAgX3RoaXMyLmRyc2F2ZW9wdCA9IHt9OwogICAgLyoqDQogICAgICog5bGe5oCn5YC86KeE5YiZDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogICAgX3RoaXMyLnJ1bGVzID0gewogICAgICBzcmZ1cGRhdGVkYXRlOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfmm7TmlrDml7bpl7Qg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+abtOaWsOaXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfmm7TmlrDml7bpl7Qg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfmm7TmlrDml7bpl7Qg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHNyZm9yaWtleTogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dLAogICAgICBzcmZrZXk6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WHuuWFpeWig+euoeeQhuagh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5Ye65YWl5aKD566h55CG5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WHuuWFpeWig+euoeeQhuagh+ivhiDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WHuuWFpeWig+euoeeQhuagh+ivhiDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgc3JmbWFqb3J0ZXh0OiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflh7rlhaXlooPnrqHnkIblkI3np7Ag5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WHuuWFpeWig+euoeeQhuWQjeensCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflh7rlhaXlooPnrqHnkIblkI3np7Ag5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflh7rlhaXlooPnrqHnkIblkI3np7Ag5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHNyZnRlbXBtb2RlOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHNyZnVmOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHNyZmRlaWQ6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgc3Jmc291cmNla2V5OiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHBpbXBlcnNvbmlkOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfkurrlkZjkv6Hmga/moIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+S6uuWRmOS/oeaBr+agh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfkurrlkZjkv6Hmga/moIfor4Yg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfkurrlkZjkv6Hmga/moIfor4Yg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHBpbXBlcnNvbm5hbWU6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5ZGY5bel5aeT5ZCNIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5ZGY5bel5aeT5ZCNIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflkZjlt6Xlp5PlkI0g5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIGNqc2o6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WHuu+8iOWbve+8ieWig+aXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5Ye677yI5Zu977yJ5aKD5pe26Ze0IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5Ye677yI5Zu977yJ5aKD5pe26Ze0IOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflh7rvvIjlm73vvInlooPml7bpl7Qg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHJqc2o6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WFpe+8iOWbve+8ieWig+aXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YWl77yI5Zu977yJ5aKD5pe26Ze0IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YWl77yI5Zu977yJ5aKD5pe26Ze0IOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflhaXvvIjlm73vvInlooPml7bpl7Qg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHF3ZmhnajogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn55uu55qE5Zu95a62L+WcsOWMuiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn55uu55qE5Zu95a62L+WcsOWMuiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+ebrueahOWbveWuti/lnLDljLog5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+ebrueahOWbveWuti/lnLDljLog5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIGx4OiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfnsbvlnosg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+exu+WeiyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+exu+WeiyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn57G75Z6LIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dLAogICAgICBzeTogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5LqL55SxIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfkuovnlLEg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfkuovnlLEg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+S6i+eUsSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgYno6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+Wkh+azqCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5aSH5rOoIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+Wkh+azqCDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+Wkh+azqCDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgb3JnaWQ6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+e7hOe7hyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn57uE57uHIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+e7hOe7hyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+e7hOe7hyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgb3Jnc2VjdG9yaWQ6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+mDqOmXqCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn6YOo6ZeoIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+mDqOmXqCDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+mDqOmXqCDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgd29ya2Zsb3dzdGF0ZTogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5rWB56iL54q25oCBIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfmtYHnqIvnirbmgIEg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5rWB56iL54q25oCBIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5rWB56iL54q25oCBIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dLAogICAgICBwaW1leGl0YW5kZW50cnlpZDogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5Ye65YWl5aKD566h55CG5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflh7rlhaXlooPnrqHnkIbmoIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5Ye65YWl5aKD566h55CG5qCH6K+GIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5Ye65YWl5aKD566h55CG5qCH6K+GIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dCiAgICB9OwogICAgLyoqDQogICAgICog6K+m5oOF5qih5Z6L6ZuG5ZCIDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogICAgX3RoaXMyLmRldGFpbHNNb2RlbCA9IHsKICAgICAgZ3JvdXAxOiBuZXcgRm9ybUdyb3VwUGFuZWxNb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+WHuu+8iOWbve+8ieWig+eUs+ivtycsCiAgICAgICAgZGV0YWlsVHlwZTogJ0dST1VQUEFORUwnLAogICAgICAgIG5hbWU6ICdncm91cDEnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogZmFsc2UsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIHVpQWN0aW9uR3JvdXA6IHsKICAgICAgICAgIGNhcHRpb246ICcnLAogICAgICAgICAgbGFuZ2Jhc2U6ICdlbnRpdGllcy5waW1leGl0YW5kZW50cnkueXNjZ2pfZm9ybScsCiAgICAgICAgICBleHRyYWN0TW9kZTogJ0lURU0nLAogICAgICAgICAgZGV0YWlsczogW10KICAgICAgICB9CiAgICAgIH0pLAogICAgICBmb3JtcGFnZTE6IG5ldyBGb3JtUGFnZU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5Z+65pys5L+h5oGvJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STVBBR0UnLAogICAgICAgIG5hbWU6ICdmb3JtcGFnZTEnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMikKICAgICAgfSksCiAgICAgIHNyZnVwZGF0ZWRhdGU6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5pu05paw5pe26Ze0JywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdzcmZ1cGRhdGVkYXRlJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBzcmZvcmlrZXk6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAnJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdzcmZvcmlrZXknLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIHNyZmtleTogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICflh7rlhaXlooPnrqHnkIbmoIfor4YnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3NyZmtleScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgc3JmbWFqb3J0ZXh0OiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+WHuuWFpeWig+euoeeQhuWQjeensCcsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnc3JmbWFqb3J0ZXh0JywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBzcmZ0ZW1wbW9kZTogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICcnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3NyZnRlbXBtb2RlJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBzcmZ1ZjogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICcnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3NyZnVmJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBzcmZkZWlkOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJycsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnc3JmZGVpZCcsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgc3Jmc291cmNla2V5OiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJycsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnc3Jmc291cmNla2V5JywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBwaW1wZXJzb25pZDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICfkurrlkZjkv6Hmga/moIfor4YnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3BpbXBlcnNvbmlkJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBwaW1wZXJzb25uYW1lOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+WRmOW3peWnk+WQjScsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAncGltcGVyc29ubmFtZScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgY2pzajogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICflh7rvvIjlm73vvInlooPml7bpl7QnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ2Nqc2onLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIHJqc2o6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5YWl77yI5Zu977yJ5aKD5pe26Ze0JywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdyanNqJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBxd2ZoZ2o6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn55uu55qE5Zu95a62L+WcsOWMuicsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAncXdmaGdqJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBseDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICfnsbvlnosnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ2x4JywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAwCiAgICAgIH0pLAogICAgICBzeTogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICfkuovnlLEnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3N5JywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBiejogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICflpIfms6gnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ2J6JywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBvcmdpZDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICfnu4Tnu4cnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ29yZ2lkJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBvcmdzZWN0b3JpZDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICfpg6jpl6gnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ29yZ3NlY3RvcmlkJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICB3b3JrZmxvd3N0YXRlOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+a1geeoi+eKtuaAgScsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnd29ya2Zsb3dzdGF0ZScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgcGltZXhpdGFuZGVudHJ5aWQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5Ye65YWl5aKD566h55CG5qCH6K+GJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdwaW1leGl0YW5kZW50cnlpZCcsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KQogICAgfTsKICAgIHJldHVybiBfdGhpczI7CiAgfQogIC8qKg0KICAgKiDojrflj5bpg6jku7bnsbvlnosNCiAgICoNCiAgICogQHJldHVybnMge3N0cmluZ30NCiAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhZU0NHSkJhc2UsIFt7CiAgICBrZXk6ICJnZXRDb250cm9sVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udHJvbFR5cGUoKSB7CiAgICAgIHJldHVybiAnRk9STSc7CiAgICB9CiAgICAvKioNCiAgICAgKiDlhbPpl63op4blm74NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55fSBhcmdzDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjbG9zZVZpZXciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlVmlldyhhcmdzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy4kZW1pdCgnY2xvc2V2aWV3JywgW2FyZ3NdKTsKICAgIH0KICAgIC8qKg0KICAgICAqICDorqHmlbDlmajliLfmlrANCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY291bnRlclJlZnJlc2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvdW50ZXJSZWZyZXNoKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkgJiYgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5sZW5ndGggPiAwKSB7CiAgICAgICAgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICBpZiAoaXRlbS5yZWZyZXNoRGF0YSAmJiBpdGVtLnJlZnJlc2hEYXRhIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICAgICAgaXRlbS5yZWZyZXNoRGF0YSgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDojrflj5blpJrpobnmlbDmja4NCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHthbnlbXX0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldERhdGFzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhcygpIHsKICAgICAgcmV0dXJuIFt0aGlzLmRhdGFdOwogICAgfQogICAgLyoqDQogICAgICog6I635Y+W5Y2V6aG55qCRDQogICAgICoNCiAgICAgKiBAcmV0dXJucyB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldERhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGEoKSB7CiAgICAgIHJldHVybiB0aGlzLmRhdGE7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3JmdXBkYXRlZGF0ZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3JmdXBkYXRlZGF0ZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TcmZ1cGRhdGVkYXRlQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdzcmZ1cGRhdGVkYXRlJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZvcmlrZXkg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvblNyZm9yaWtleUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TcmZvcmlrZXlDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3NyZm9yaWtleScsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3Jma2V5IOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25TcmZrZXlDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3Jma2V5Q2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdzcmZrZXknLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZm1ham9ydGV4dCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3JmbWFqb3J0ZXh0Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNyZm1ham9ydGV4dENoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnc3JmbWFqb3J0ZXh0JywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZ0ZW1wbW9kZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3JmdGVtcG1vZGVDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3JmdGVtcG1vZGVDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3NyZnRlbXBtb2RlJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZ1ZiDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3JmdWZDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3JmdWZDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3NyZnVmJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZkZWlkIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25TcmZkZWlkQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNyZmRlaWRDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3NyZmRlaWQnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZnNvdXJjZWtleSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3Jmc291cmNla2V5Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNyZnNvdXJjZWtleUNoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnc3Jmc291cmNla2V5JywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBwaW1wZXJzb25pZCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uUGltcGVyc29uaWRDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGltcGVyc29uaWRDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3BpbXBlcnNvbmlkJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBwaW1wZXJzb25uYW1lIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25QaW1wZXJzb25uYW1lQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblBpbXBlcnNvbm5hbWVDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3BpbXBlcnNvbm5hbWUnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIGNqc2og5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkNqc2pDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2pzakNoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnY2pzaicsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgcmpzaiDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uUmpzakNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25SanNqQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdyanNqJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBxd2ZoZ2og5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvblF3ZmhnakNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Rd2ZoZ2pDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3F3ZmhnaicsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgbHgg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkx4Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkx4Q2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdseCcsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3kg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvblN5Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblN5Q2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdzeScsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgYnog5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkJ6Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkJ6Q2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdieicsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgb3JnaWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbk9yZ2lkQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9yZ2lkQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdvcmdpZCcsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgb3Jnc2VjdG9yaWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbk9yZ3NlY3RvcmlkQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9yZ3NlY3RvcmlkQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdvcmdzZWN0b3JpZCcsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgd29ya2Zsb3dzdGF0ZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uV29ya2Zsb3dzdGF0ZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Xb3JrZmxvd3N0YXRlQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICd3b3JrZmxvd3N0YXRlJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBwaW1leGl0YW5kZW50cnlpZCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uUGltZXhpdGFuZGVudHJ5aWRDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGltZXhpdGFuZGVudHJ5aWRDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3BpbWV4aXRhbmRlbnRyeWlkJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOmHjee9ruihqOWNlemhueWAvA0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9fSB7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInJlc2V0Rm9ybURhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0Rm9ybURhdGEoX3JlZikgewogICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSwKICAgICAgICAgIG5ld1ZhbCA9IF9yZWYubmV3VmFsLAogICAgICAgICAgb2xkVmFsID0gX3JlZi5vbGRWYWw7CiAgICB9CiAgICAvKioNCiAgICAgICog572u56m65a+56LGhDQogICAgICAqDQogICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJSZXNldERhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIFJlc2V0RGF0YShfZGF0YXMpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICBpZiAoT2JqZWN0LmtleXMoX2RhdGFzKS5sZW5ndGggPiAwKSB7CiAgICAgICAgT2JqZWN0LmtleXMoX2RhdGFzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICBpZiAoX3RoaXMzLmRhdGEuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgX3RoaXMzLmRhdGFbbmFtZV0gPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDooajljZXpgLvovpENCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0ge3sgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfX0geyBuYW1lLCBuZXdWYWwsIG9sZFZhbCB9DQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmb3JtTG9naWMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1Mb2dpYyhfcmVmMikgewogICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWUsCiAgICAgICAgICBuZXdWYWwgPSBfcmVmMi5uZXdWYWwsCiAgICAgICAgICBvbGRWYWwgPSBfcmVmMi5vbGRWYWw7CiAgICB9CiAgICAvKioNCiAgICAgKiDooajljZXlgLzlj5jljJYNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0ge3sgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfX0geyBuYW1lLCBuZXdWYWwsIG9sZFZhbCB9DQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmb3JtRGF0YUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybURhdGFDaGFuZ2UoX3JlZjMpIHsKICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLAogICAgICAgICAgbmV3VmFsID0gX3JlZjMubmV3VmFsLAogICAgICAgICAgb2xkVmFsID0gX3JlZjMub2xkVmFsOwoKICAgICAgaWYgKHRoaXMuaWdub3JlZmllbGR2YWx1ZWNoYW5nZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5yZXNldEZvcm1EYXRhKHsKICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgICB0aGlzLmZvcm1Mb2dpYyh7CiAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgICAgdGhpcy5kYXRhQ2hhbmcubmV4dChKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKTsKICAgIH0KICAgIC8qKg0KICAgICAqIOihqOWNleWKoOi9veWujOaIkA0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgICogQHBhcmFtIHtzdHJpbmd9IFthY3Rpb25dDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkZvcm1Mb2FkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkZvcm1Mb2FkKCkgewogICAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDsKICAgICAgaWYgKE9iamVjdC5pcyhhY3Rpb24sICJzYXZlIikgfHwgT2JqZWN0LmlzKGFjdGlvbiwgImF1dG9TYXZlIikgfHwgT2JqZWN0LmlzKGFjdGlvbiwgInN1Ym1pdCIpKSAvLyDmm7TmlrBjb250ZXh055qE5a6e5L2T5Li76ZSuCiAgICAgICAgaWYgKGRhdGEucGltZXhpdGFuZGVudHJ5KSB7CiAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuY29udGV4dCwgewogICAgICAgICAgICBwaW1leGl0YW5kZW50cnk6IGRhdGEucGltZXhpdGFuZGVudHJ5CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIHRoaXMuc2V0Rm9ybUVuYWJsZUNvbmQoZGF0YSk7CiAgICAgIHRoaXMuZmlsbEZvcm0oZGF0YSwgYWN0aW9uKTsKICAgICAgdGhpcy5vbGREYXRhID0ge307CiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5vbGREYXRhLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpKTsKICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd2aWV3YWN0aW9uL3NldFZpZXdEYXRhQ2hhbmdlJywgewogICAgICAgIHZpZXd0YWc6IHRoaXMudmlld3RhZywKICAgICAgICB2aWV3ZGF0YWNoYW5nZTogZmFsc2UKICAgICAgfSk7CiAgICAgIHRoaXMuZm9ybUxvZ2ljKHsKICAgICAgICBuYW1lOiAnJywKICAgICAgICBuZXdWYWw6IG51bGwsCiAgICAgICAgb2xkVmFsOiBudWxsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5YC85aGr5YWFDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFtfZGF0YXM9e31dDQogICAgICogQHBhcmFtIHtzdHJpbmd9IFthY3Rpb25dDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmaWxsRm9ybSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbEZvcm0oKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIF9kYXRhcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICAgIHRoaXMuaWdub3JlZmllbGR2YWx1ZWNoYW5nZSA9IHRydWU7CiAgICAgIE9iamVjdC5rZXlzKF9kYXRhcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgIGlmIChfdGhpczQuZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgX3RoaXM0LmRhdGFbbmFtZV0gPSBfZGF0YXNbbmFtZV07CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGlmIChPYmplY3QuaXMoYWN0aW9uLCAnbG9hZERyYWZ0JykpIHsKICAgICAgICB0aGlzLmNyZWF0ZURlZmF1bHQoKTsKICAgICAgfQoKICAgICAgaWYgKE9iamVjdC5pcyhhY3Rpb24sICdsb2FkJykpIHsKICAgICAgICB0aGlzLnVwZGF0ZURlZmF1bHQoKTsKICAgICAgfQoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuaWdub3JlZmllbGR2YWx1ZWNoYW5nZSA9IGZhbHNlOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOiuvue9ruihqOWNlemhueaYr+WQpuWQr+eUqA0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBwYXJhbSB7Kn0gZGF0YQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2V0Rm9ybUVuYWJsZUNvbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvcm1FbmFibGVDb25kKGRhdGEpIHsKICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmRldGFpbHNNb2RlbCkuZm9yRWFjaChmdW5jdGlvbiAoZGV0YWlsKSB7CiAgICAgICAgaWYgKCFPYmplY3QuaXMoZGV0YWlsLmRldGFpbFR5cGUsICdGT1JNSVRFTScpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgZm9ybUl0ZW0gPSBkZXRhaWw7CiAgICAgICAgZm9ybUl0ZW0uc2V0RW5hYmxlQ29uZChkYXRhLnNyZnVmKTsKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDph43nva7ojYnnqL/ooajljZXnirbmgIENCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInJlc2V0RHJhZnRGb3JtU3RhdGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldERyYWZ0Rm9ybVN0YXRlcygpIHsKICAgICAgdmFyIGZvcm0gPSB0aGlzLiRyZWZzLmZvcm07CgogICAgICBpZiAoZm9ybSkgewogICAgICAgIGZvcm0ucmVzZXRGaWVsZHMoKTsKICAgICAgfQogICAgfQogICAgLyoqDQogICAgICog6YeN572u5qCh6aqM57uT5p6cDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInJlc2V0VmFsaWRhdGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldFZhbGlkYXRlcygpIHsKICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmRldGFpbHNNb2RlbCkuZm9yRWFjaChmdW5jdGlvbiAoZGV0YWlsKSB7CiAgICAgICAgaWYgKCFPYmplY3QuaXMoZGV0YWlsLmRldGFpbFR5cGUsICdGT1JNSVRFTScpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgZm9ybUl0ZW0gPSBkZXRhaWw7CiAgICAgICAgZm9ybUl0ZW0uc2V0RXJyb3IoJycpOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWhq+WFheagoemqjOe7k+aenCDvvIjlkI7lj7DvvIkNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGZpZWxkRXJyb3JzDQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmaWxsVmFsaWRhdGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsVmFsaWRhdGVzKGZpZWxkRXJyb3JzKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgZmllbGRFcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICB2YXIgZm9ybUl0ZW0gPSBfdGhpczUuZGV0YWlsc01vZGVsW2Vycm9yLmZpZWxkXTsKCiAgICAgICAgaWYgKCFmb3JtSXRlbSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgX3RoaXM1LiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBmb3JtSXRlbS5zZXRFcnJvcihlcnJvci5tZXNzYWdlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDooajljZXmoKHpqoznirbmgIENCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHtib29sZWFufQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZm9ybVZhbGlkYXRlU3RhdHVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtVmFsaWRhdGVTdGF0dXMoKSB7CiAgICAgIHZhciBmb3JtID0gdGhpcy4kcmVmcy5mb3JtOwogICAgICB2YXIgdmFsaWRhdGVzdGF0ZSA9IHRydWU7CiAgICAgIGZvcm0udmFsaWRhdGUoZnVuY3Rpb24gKHZhbGlkKSB7CiAgICAgICAgdmFsaWRhdGVzdGF0ZSA9IHZhbGlkID8gdHJ1ZSA6IGZhbHNlOwogICAgICB9KTsKICAgICAgcmV0dXJuIHZhbGlkYXRlc3RhdGU7CiAgICB9CiAgICAvKioNCiAgICAgKiDojrflj5blhajpg6jlgLwNCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0VmFsdWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLmRhdGE7CiAgICB9CiAgICAvKioNCiAgICAgKiDooajljZXpobnlgLzlj5jmm7QNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkgfX0gJGV2ZW50DQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkZvcm1JdGVtVmFsdWVDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRm9ybUl0ZW1WYWx1ZUNoYW5nZSgkZXZlbnQpIHsKICAgICAgaWYgKCEkZXZlbnQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICghJGV2ZW50Lm5hbWUgfHwgT2JqZWN0LmlzKCRldmVudC5uYW1lLCAnJykgfHwgIXRoaXMuZGF0YS5oYXNPd25Qcm9wZXJ0eSgkZXZlbnQubmFtZSkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuZGF0YVskZXZlbnQubmFtZV0gPSAkZXZlbnQudmFsdWU7CiAgICB9CiAgICAvKioNCiAgICAgKiDorr7nva7mlbDmja7pobnlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lDQogICAgICogQHBhcmFtIHsqfSB2YWx1ZQ0KICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2V0RGF0YUl0ZW1WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGF0YUl0ZW1WYWx1ZShuYW1lLCB2YWx1ZSkgewogICAgICBpZiAoIW5hbWUgfHwgT2JqZWN0LmlzKG5hbWUsICcnKSB8fCAhdGhpcy5kYXRhLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmlzKHRoaXMuZGF0YVtuYW1lXSwgdmFsdWUpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLmRhdGFbbmFtZV0gPSB2YWx1ZTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWIhue7hOeVjOmdouihjOS4uuS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdyb3VwVUlBY3Rpb25DbGljayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBVSUFjdGlvbkNsaWNrKCRldmVudCkgewogICAgICBpZiAoISRldmVudCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGl0ZW0gPSAkZXZlbnQuaXRlbTsKICAgIH0KICAgIC8qKg0KICAgICAqIFZ1ZeWjsOaYjuWRqOacnyjlpITnkIbnu4Tku7bnmoTovpPlhaXlsZ7mgKcpDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImNyZWF0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAgIHRoaXMuYWZ0ZXJDcmVhdGVkKCk7CiAgICB9CiAgICAvKioNCiAgICAgKiDmiafooYxjcmVhdGVk5ZCO55qE6YC76L6RDQogICAgICoNCiAgICAgKiAgQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhZnRlckNyZWF0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyQ3JlYXRlZCgpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICBpZiAodGhpcy52aWV3U3RhdGUpIHsKICAgICAgICB0aGlzLnZpZXdTdGF0ZUV2ZW50ID0gdGhpcy52aWV3U3RhdGUuc3Vic2NyaWJlKGZ1bmN0aW9uIChfcmVmNCkgewogICAgICAgICAgdmFyIHRhZyA9IF9yZWY0LnRhZywKICAgICAgICAgICAgICBhY3Rpb24gPSBfcmVmNC5hY3Rpb24sCiAgICAgICAgICAgICAgZGF0YSA9IF9yZWY0LmRhdGE7CgogICAgICAgICAgaWYgKCFPYmplY3QuaXModGFnLCBfdGhpczYubmFtZSkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ2F1dG9sb2FkJywgYWN0aW9uKSkgewogICAgICAgICAgICBfdGhpczYuYXV0b0xvYWQoZGF0YSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKE9iamVjdC5pcygnbG9hZCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXM2LmxvYWQoZGF0YSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKE9iamVjdC5pcygnbG9hZGRyYWZ0JywgYWN0aW9uKSkgewogICAgICAgICAgICBpZiAoX3RoaXM2LmNvbnRleHQuc3Jmc291cmNla2V5KSB7CiAgICAgICAgICAgICAgX3RoaXM2LmNvcHkoX3RoaXM2LmNvbnRleHQuc3Jmc291cmNla2V5KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBfdGhpczYubG9hZERyYWZ0KGRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKE9iamVjdC5pcygnc2F2ZScsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXM2LnNhdmUoZGF0YSwgZGF0YS5zaG93UmVzdWx0SW5mbyk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKE9iamVjdC5pcygncmVtb3ZlJywgYWN0aW9uKSkgewogICAgICAgICAgICBfdGhpczYucmVtb3ZlKGRhdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3NhdmVhbmRleGl0JywgYWN0aW9uKSkgewogICAgICAgICAgICBfdGhpczYuc2F2ZUFuZEV4aXQoZGF0YSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKE9iamVjdC5pcygnc2F2ZWFuZG5ldycsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXM2LnNhdmVBbmROZXcoZGF0YSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKE9iamVjdC5pcygncmVtb3ZlYW5kZXhpdCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXM2LnJlbW92ZUFuZEV4aXQoZGF0YSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKE9iamVjdC5pcygncmVmcmVzaCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXM2LnJlZnJlc2goZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHRoaXMuZGF0YUNoYW5nLnBpcGUoZGVib3VuY2VUaW1lKDMwMCksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpLnN1YnNjcmliZShmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGlmIChfdGhpczYuYXV0b3NhdmUpIHsKICAgICAgICAgIF90aGlzNi5hdXRvU2F2ZSgpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHN0YXRlID0gIU9iamVjdC5pcyhKU09OLnN0cmluZ2lmeShfdGhpczYub2xkRGF0YSksIEpTT04uc3RyaW5naWZ5KF90aGlzNi5kYXRhKSkgPyB0cnVlIDogZmFsc2U7CgogICAgICAgIF90aGlzNi4kc3RvcmUuY29tbWl0KCd2aWV3YWN0aW9uL3NldFZpZXdEYXRhQ2hhbmdlJywgewogICAgICAgICAgdmlld3RhZzogX3RoaXM2LnZpZXd0YWcsCiAgICAgICAgICB2aWV3ZGF0YWNoYW5nZTogc3RhdGUKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiB2dWUg55Sf5ZG95ZGo5pyfDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImRlc3Ryb3llZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveWVkKCkgewogICAgICB0aGlzLmFmdGVyRGVzdHJveSgpOwogICAgfQogICAgLyoqDQogICAgICog5omn6KGMZGVzdHJveWVk5ZCO55qE6YC76L6RDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImFmdGVyRGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWZ0ZXJEZXN0cm95KCkgewogICAgICBpZiAodGhpcy52aWV3U3RhdGVFdmVudCkgewogICAgICAgIHRoaXMudmlld1N0YXRlRXZlbnQudW5zdWJzY3JpYmUoKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuZGF0YUNoYW5nRXZlbnQpIHsKICAgICAgICB0aGlzLmRhdGFDaGFuZ0V2ZW50LnVuc3Vic2NyaWJlKCk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOaLt+i0neWGheWuuQ0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJnPXt9XQ0KICAgICAqIEBtZW1iZXJvZiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImNvcHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHkoc3Jma2V5KSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgdmFyIGNvcHlEYXRhID0gdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXRDb3B5RGF0YShzcmZrZXkpOwogICAgICBjb3B5RGF0YS5zcmZrZXkgPSBVdGlsLmNyZWF0ZVVVSUQoKTsKICAgICAgY29weURhdGEucGltZXhpdGFuZGVudHJ5ID0gY29weURhdGEuc3Jma2V5OwogICAgICBjb3B5RGF0YS5waW1leGl0YW5kZW50cnlpZCA9IGNvcHlEYXRhLnNyZmtleTsKICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbnRleHQsIHsKICAgICAgICBwaW1leGl0YW5kZW50cnk6IGNvcHlEYXRhLnBpbWV4aXRhbmRlbnRyeQogICAgICB9KTsKICAgICAgdGhpcy5kYXRhID0gY29weURhdGE7CiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczcuZm9ybVN0YXRlLm5leHQoewogICAgICAgICAgdHlwZTogJ2xvYWQnLAogICAgICAgICAgZGF0YTogY29weURhdGEKICAgICAgICB9KTsKCiAgICAgICAgX3RoaXM3LmRhdGEuc3JmdWYgPSAnMCc7CgogICAgICAgIF90aGlzNy5zZXRGb3JtRW5hYmxlQ29uZChfdGhpczcuZGF0YSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICrmiZPljbANCiAgICAgKkBtZW1iZXJvZiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInByaW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmludCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLiRwcmludCh7CiAgICAgICAgaWQ6ICdwaW1leGl0YW5kZW50cnlfeXNjZ2onLAogICAgICAgIHBvcFRpdGxlOiAn5Zug56eB5Ye65Zu95aKDJwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOmDqOS7tuWIt+aWsA0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVmcmVzaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaChhcmdzKSB7CiAgICAgIHZhciBhcmcgPSB7fTsKICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIGFyZ3NbMF0pOwoKICAgICAgaWYgKHRoaXMuZGF0YS5zcmZrZXkgJiYgIU9iamVjdC5pcyh0aGlzLmRhdGEuc3Jma2V5LCAnJykpIHsKICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgewogICAgICAgICAgc3Jma2V5OiB0aGlzLmRhdGEuc3Jma2V5CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5sb2FkKGFyZyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5kYXRhLnNyZmtleXMgJiYgIU9iamVjdC5pcyh0aGlzLmRhdGEuc3Jma2V5cywgJycpKSB7CiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsKICAgICAgICAgIHNyZmtleTogdGhpcy5kYXRhLnNyZmtleXMKICAgICAgICB9KTsKICAgICAgICB0aGlzLmxvYWQoYXJnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOiHquWKqOWKoOi9vQ0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJnPXt9XQ0KICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiYXV0b0xvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGF1dG9Mb2FkKCkgewogICAgICB2YXIgYXJnID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgIGlmIChhcmcuc3Jma2V5ICYmICFPYmplY3QuaXMoYXJnLnNyZmtleSwgJycpKSB7CiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsKICAgICAgICAgIHNyZmtleTogYXJnLnNyZmtleQogICAgICAgIH0pOwogICAgICAgIHRoaXMubG9hZChhcmcpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKGFyZy5zcmZrZXlzICYmICFPYmplY3QuaXMoYXJnLnNyZmtleXMsICcnKSkgewogICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7CiAgICAgICAgICBzcmZrZXk6IGFyZy5zcmZrZXlzCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5sb2FkKGFyZyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLmxvYWREcmFmdChhcmcpOwogICAgfQogICAgLyoqDQogICAgICog5Yqg6L29DQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAibG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCgpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICB2YXIgb3B0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgIGlmICghdGhpcy5sb2FkQWN0aW9uKSB7CiAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsKICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgIGRlc2M6ICdQSU1FWElUQU5ERU5UUllZU0NHSlhKRWRpdFZpZXfop4blm77ooajljZVsb2FkQWN0aW9u5Y+C5pWw5pyq6YWN572uJwogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGFyZyA9IF9vYmplY3RTcHJlYWQoe30sIG9wdCk7CgogICAgICB2YXIgdmlld3BhcmFtUmVzdWx0ID0gT2JqZWN0LmFzc2lnbihhcmcsIHRoaXMudmlld3BhcmFtcyk7CiAgICAgIHZhciBnZXQgPSB0aGlzLnNlcnZpY2UuZ2V0KHRoaXMubG9hZEFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSwgewogICAgICAgIHZpZXdwYXJhbXM6IHZpZXdwYXJhbVJlc3VsdAogICAgICB9LCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsKICAgICAgZ2V0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGE7CgogICAgICAgICAgX3RoaXM4Lm9uRm9ybUxvYWQoZGF0YSwgJ2xvYWQnKTsKCiAgICAgICAgICBfdGhpczguJGVtaXQoJ2xvYWQnLCBkYXRhKTsKCiAgICAgICAgICBfdGhpczguJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXM4LmZvcm1TdGF0ZS5uZXh0KHsKICAgICAgICAgICAgICB0eXBlOiAnbG9hZCcsCiAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICBfdGhpczguJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgIF90aGlzOC4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICBkZXNjOiAn57O757uf5byC5bi4JwogICAgICAgICAgfSk7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDliqDovb3ojYnnqL8NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW29wdD17fV0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImxvYWREcmFmdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZERyYWZ0KCkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIHZhciBvcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgaWYgKCF0aGlzLmxvYWRkcmFmdEFjdGlvbikgewogICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICBkZXNjOiAnUElNRVhJVEFOREVOVFJZWVNDR0pYSkVkaXRWaWV36KeG5Zu+6KGo5Y2VbG9hZGRyYWZ0QWN0aW9u5Y+C5pWw5pyq6YWN572uJwogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGFyZyA9IF9vYmplY3RTcHJlYWQoe30sIG9wdCk7CgogICAgICB2YXIgdmlld3BhcmFtUmVzdWx0ID0gT2JqZWN0LmFzc2lnbihhcmcsIHRoaXMudmlld3BhcmFtcyk7CiAgICAgIHZhciBwb3N0ID0gdGhpcy5zZXJ2aWNlLmxvYWREcmFmdCh0aGlzLmxvYWRkcmFmdEFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSwgewogICAgICAgIHZpZXdwYXJhbXM6IHZpZXdwYXJhbVJlc3VsdAogICAgICB9LCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsKICAgICAgcG9zdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICBfdGhpczkuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICAgIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGE7CgogICAgICAgIGlmIChkYXRhLnBpbWV4aXRhbmRlbnRyeSkgewogICAgICAgICAgT2JqZWN0LmFzc2lnbihfdGhpczkuY29udGV4dCwgewogICAgICAgICAgICBwaW1leGl0YW5kZW50cnk6IGRhdGEucGltZXhpdGFuZGVudHJ5CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIF90aGlzOS5yZXNldERyYWZ0Rm9ybVN0YXRlcygpOwoKICAgICAgICBfdGhpczkub25Gb3JtTG9hZChkYXRhLCAnbG9hZERyYWZ0Jyk7CgogICAgICAgIF90aGlzOS4kZW1pdCgnbG9hZCcsIGRhdGEpOwoKICAgICAgICBfdGhpczkuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzOS5mb3JtU3RhdGUubmV4dCh7CiAgICAgICAgICAgIHR5cGU6ICdsb2FkJywKICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGZvcm0gPSBfdGhpczkuJHJlZnMuZm9ybTsKCiAgICAgICAgICBpZiAoZm9ybSkgewogICAgICAgICAgICBmb3JtLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkgewogICAgICAgICAgICAgIGZpZWxkLnZhbGlkYXRlTWVzc2FnZSA9ICIiOwogICAgICAgICAgICAgIGZpZWxkLnZhbGlkYXRlU3RhdGUgPSAiIjsKICAgICAgICAgICAgICBmaWVsZC52YWxpZGF0ZVN0YXR1cyA9IGZhbHNlOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICBfdGhpczkuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgIF90aGlzOS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICBkZXNjOiAn57O757uf5byC5bi4JwogICAgICAgICAgfSk7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDoh6rliqjkv53lrZgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW29wdD17fV0NCiAgICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImF1dG9TYXZlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhdXRvU2F2ZSgpIHsKICAgICAgdmFyIF90aGlzMTAgPSB0aGlzOwoKICAgICAgdmFyIG9wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICBpZiAoIXRoaXMuZm9ybVZhbGlkYXRlU3RhdHVzKCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBhcmcgPSBfb2JqZWN0U3ByZWFkKHt9LCBvcHQpOwoKICAgICAgdmFyIGRhdGEgPSB0aGlzLmdldFZhbHVlcygpOwogICAgICBPYmplY3QuYXNzaWduKGFyZywgZGF0YSk7CiAgICAgIHZhciBhY3Rpb24gPSBPYmplY3QuaXMoZGF0YS5zcmZ1ZiwgJzEnKSA/IHRoaXMudXBkYXRlQWN0aW9uIDogdGhpcy5jcmVhdGVBY3Rpb247CgogICAgICBpZiAoIWFjdGlvbikgewogICAgICAgIHZhciBhY3Rpb25OYW1lID0gT2JqZWN0LmlzKGRhdGEuc3JmdWYsICcxJykgPyAidXBkYXRlQWN0aW9uIiA6ICJjcmVhdGVBY3Rpb24iOwogICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICBkZXNjOiAnUElNRVhJVEFOREVOVFJZWVNDR0pYSkVkaXRWaWV36KeG5Zu+6KGo5Y2VJyArIGFjdGlvbk5hbWUgKyAn5Y+C5pWw5pyq6YWN572uJwogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsKICAgICAgICB2aWV3cGFyYW1zOiB0aGlzLnZpZXdwYXJhbXMKICAgICAgfSk7CiAgICAgIHZhciBwb3N0ID0gdGhpcy5zZXJ2aWNlLmFkZChhY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksIGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcik7CiAgICAgIHBvc3QudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgX3RoaXMxMC4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTsKCiAgICAgICAgX3RoaXMxMC5vbkZvcm1Mb2FkKGRhdGEsICdhdXRvU2F2ZScpOwoKICAgICAgICBfdGhpczEwLiRlbWl0KCdzYXZlJywgZGF0YSk7CgogICAgICAgIF90aGlzMTAuJHN0b3JlLmRpc3BhdGNoKCd2aWV3YWN0aW9uL2RhdGFzYXZlZCcsIHsKICAgICAgICAgIHZpZXd0YWc6IF90aGlzMTAudmlld3RhZwogICAgICAgIH0pOwoKICAgICAgICBfdGhpczEwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczEwLmZvcm1TdGF0ZS5uZXh0KHsKICAgICAgICAgICAgdHlwZTogJ3NhdmUnLAogICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICBfdGhpczEwLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZQogICAgICAgICAgfSk7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICBfdGhpczEwLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOS/neWtmA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQ0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Nob3dSZXN1bHRJbmZvXQ0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lmU3RhdGVOZXh0XSBmb3JtU3RhdGXmmK/lkKbkuIvlj5HpgJrnn6UNCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2F2ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3NhdmUgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBfdGhpczExID0gdGhpczsKCiAgICAgICAgdmFyIG9wdCwKICAgICAgICAgICAgc2hvd1Jlc3VsdEluZm8sCiAgICAgICAgICAgIGlmU3RhdGVOZXh0LAogICAgICAgICAgICBfYXJncyA9IGFyZ3VtZW50czsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBvcHQgPSBfYXJncy5sZW5ndGggPiAwICYmIF9hcmdzWzBdICE9PSB1bmRlZmluZWQgPyBfYXJnc1swXSA6IHt9OwogICAgICAgICAgICAgICAgc2hvd1Jlc3VsdEluZm8gPSBfYXJncy5sZW5ndGggPiAxID8gX2FyZ3NbMV0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBpZlN0YXRlTmV4dCA9IF9hcmdzLmxlbmd0aCA+IDIgJiYgX2FyZ3NbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzWzJdIDogdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgc2hvd1Jlc3VsdEluZm8gPSBzaG93UmVzdWx0SW5mbyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpczExLmZvcm1WYWxpZGF0ZVN0YXR1cygpKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICflgLzop4TliJnmoKHpqozlvILluLgnCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdmFyIGFyZyA9IF9vYmplY3RTcHJlYWQoe30sIG9wdCk7CgogICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzMTEuZ2V0VmFsdWVzKCk7CgogICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgZGF0YSk7CiAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCBfdGhpczExLmNvbnRleHQpOwoKICAgICAgICAgICAgICAgICAgaWYgKGlmU3RhdGVOZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS5kcmNvdW50ZXIgPSAwOwoKICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMxMS5kcmNvdW50ZXIgIT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTEuZHJzYXZlb3B0ID0gb3B0OwoKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTEuZm9ybVN0YXRlLm5leHQoewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmVmb3Jlc2F2ZScsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGFyZwogICAgICAgICAgICAgICAgICAgICAgfSk7IC8v5YWI6YCa55+l5YWz57O755WM6Z2i5L+d5a2YCgoKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTEuc2F2ZVN0YXRlID0gcmVzb2x2ZTsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBPYmplY3QuaXMoZGF0YS5zcmZ1ZiwgJzEnKSA/IF90aGlzMTEudXBkYXRlQWN0aW9uIDogX3RoaXMxMS5jcmVhdGVBY3Rpb247CgogICAgICAgICAgICAgICAgICBpZiAoIWFjdGlvbikgewogICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25OYW1lID0gT2JqZWN0LmlzKGRhdGEuc3JmdWYsICcxJykgPyAidXBkYXRlQWN0aW9uIiA6ICJjcmVhdGVBY3Rpb24iOwoKICAgICAgICAgICAgICAgICAgICBfdGhpczExLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ1BJTUVYSVRBTkRFTlRSWVlTQ0dKWEpFZGl0Vmlld+inhuWbvuihqOWNlScgKyBhY3Rpb25OYW1lICsgJ+WPguaVsOacqumFjee9ricKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgewogICAgICAgICAgICAgICAgICAgIHZpZXdwYXJhbXM6IF90aGlzMTEudmlld3BhcmFtcwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgdmFyIHBvc3QgPSBPYmplY3QuaXMoZGF0YS5zcmZ1ZiwgJzEnKSA/IF90aGlzMTEuc2VydmljZS51cGRhdGUoYWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KF90aGlzMTEuY29udGV4dCkpLCBhcmcsIF90aGlzMTEuc2hvd0J1c3lJbmRpY2F0b3IpIDogX3RoaXMxMS5zZXJ2aWNlLmFkZChhY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX3RoaXMxMS5jb250ZXh0KSksIGFyZywgX3RoaXMxMS5zaG93QnVzeUluZGljYXRvcik7CiAgICAgICAgICAgICAgICAgIHBvc3QudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS5vbkZvcm1Mb2FkKGRhdGEsICdzYXZlJyk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzMTEuJGVtaXQoJ3NhdmUnLCBkYXRhKTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS4kc3RvcmUuZGlzcGF0Y2goJ3ZpZXdhY3Rpb24vZGF0YXNhdmVkJywgewogICAgICAgICAgICAgICAgICAgICAgdmlld3RhZzogX3RoaXMxMS52aWV3dGFnCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzMTEuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTEuZm9ybVN0YXRlLm5leHQoewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2F2ZScsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd1Jlc3VsdEluZm8pIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTEuJE5vdGljZS5zdWNjZXNzKHsKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAoZGF0YS5zcmZtYWpvcnRleHQgPyBkYXRhLnNyZm1ham9ydGV4dCA6ICcnKSArICcmbmJzcDvkv53lrZjmiJDlip/vvIEnCiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTEuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczExLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBzYXZlKCkgewogICAgICAgIHJldHVybiBfc2F2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc2F2ZTsKICAgIH0oKQogICAgLyoqDQogICAgKiDliKDpmaQNCiAgICAqDQogICAgKiBAcHVibGljDQogICAgKiBAcGFyYW0geyp9IFtvcHQ9e31dDQogICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgKi8KCiAgfSwgewogICAga2V5OiAicmVtb3ZlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7CiAgICAgIHZhciBfdGhpczEyID0gdGhpczsKCiAgICAgIHZhciBvcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdOwogICAgICB2YXIgc2hvd1Jlc3VsdEluZm8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBpZiAoIV90aGlzMTIucmVtb3ZlQWN0aW9uKSB7CiAgICAgICAgICBfdGhpczEyLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgIGRlc2M6ICdQSU1FWElUQU5ERU5UUllZU0NHSlhKRWRpdFZpZXfop4blm77ooajljZVyZW1vdmVBY3Rpb27lj4LmlbDmnKrphY3nva4nCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgYXJnID0gb3B0WzBdOwogICAgICAgIHZhciBfdGhpcyA9IF90aGlzMTI7CiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsKICAgICAgICAgIHZpZXdwYXJhbXM6IF90aGlzMTIudmlld3BhcmFtcwogICAgICAgIH0pOwoKICAgICAgICBfdGhpczEyLnNlcnZpY2VbImRlbGV0ZSJdKF90aGlzLnJlbW92ZUFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfdGhpczEyLmNvbnRleHQpKSwgYXJnLCBzaG93UmVzdWx0SW5mbykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIGlmIChyZXNwb25zZSkgewogICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGE7CgogICAgICAgICAgICBfdGhpczEyLiRlbWl0KCdyZW1vdmUnLCBkYXRhKTsKCiAgICAgICAgICAgIF90aGlzMTIuZm9ybVN0YXRlLm5leHQoewogICAgICAgICAgICAgIHR5cGU6ICdyZW1vdmUnLAogICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBfdGhpczEyLmRhdGEuaXNtb2RpZnkgPSBmYWxzZTsKCiAgICAgICAgICAgIF90aGlzMTIuJE5vdGljZS5zdWNjZXNzKHsKICAgICAgICAgICAgICB0aXRsZTogJycsCiAgICAgICAgICAgICAgZGVzYzogKGRhdGEuc3JmbWFqb3J0ZXh0ID8gZGF0YS5zcmZtYWpvcnRleHQgOiAnJykgKyAnJm5ic3A75Yig6Zmk5oiQ5Yqf77yBJwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpOwogICAgICAgICAgfQogICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgdmFyIF9kYXRhID0gZXJyb3IuZGF0YTsKCiAgICAgICAgICBfdGhpczEyLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICB0aXRsZTogX2RhdGEudGl0bGUsCiAgICAgICAgICAgIGRlc2M6IF9kYXRhLm1lc3NhZ2UKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5bel5L2c5rWB5ZCv5YqoDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW2xvY2FsZGF0YT17fV0NCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAid2ZzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3dmc3RhcnQgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihkYXRhLCBsb2NhbGRhdGEpIHsKICAgICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSBfdGhpczEzOwoKICAgICAgICAgICAgICAgICAgdmFyIHBvc3QgPSBfdGhpcy5zYXZlKHt9LCBmYWxzZSk7CgogICAgICAgICAgICAgICAgICBwb3N0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZyA9IHJlc3BvbnNlLmRhdGE7CgogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczEzLnZpZXdwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwYXJhbXM6IF90aGlzMTMudmlld3BhcmFtcwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMxMy5zZXJ2aWNlLndmc3RhcnQoX3RoaXMuV0ZTdGFydEFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfdGhpczEzLmNvbnRleHQpKSwgYXJnLCBfdGhpczEzLnNob3dCdXN5SW5kaWNhdG9yLCBsb2NhbGRhdGEpOwoKICAgICAgICAgICAgICAgICAgICByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczEzLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+W3peS9nOa1geWQr+WKqOWksei0pSwgJyArIHJlc3BvbnNlLmRhdGEubWVzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMy4kTm90aWNlLmluZm8oewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJycsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICflt6XkvZzmtYHlkK/liqjmiJDlip8nCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczEzLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTMuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMy4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTMuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+ezu+e7n+W8guW4uCcKICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gd2ZzdGFydChfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF93ZnN0YXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB3ZnN0YXJ0OwogICAgfSgpCiAgICAvKioNCiAgICAgKiDlt6XkvZzmtYHmj5DkuqQNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgICogQHBhcmFtIHsqfSBbbG9jYWxkYXRhPXt9XQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ3ZnN1Ym1pdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3dmc3VibWl0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoZGF0YSwgbG9jYWxkYXRhKSB7CiAgICAgICAgdmFyIF90aGlzMTQgPSB0aGlzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gX3RoaXMxNDsKICAgICAgICAgICAgICAgICAgdmFyIGFyZyA9IGRhdGFbMF07CiAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7CiAgICAgICAgICAgICAgICAgICAgdmlld3BhcmFtczogX3RoaXMxNC52aWV3cGFyYW1zCiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgaWYgKCFhcmcucGltZXhpdGFuZGVudHJ5IHx8IE9iamVjdC5pcyhhcmcucGltZXhpdGFuZGVudHJ5LCAnJykpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHZhciBwb3N0ID0gT2JqZWN0LmlzKGFyZy5zcmZ1ZiwgJzEnKSA/IF90aGlzMTQuc2VydmljZS51cGRhdGUoX3RoaXMxNC51cGRhdGVBY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX3RoaXMxNC5jb250ZXh0KSksIGFyZywgX3RoaXMxNC5zaG93QnVzeUluZGljYXRvcikgOiBfdGhpczE0LnNlcnZpY2UuYWRkKF90aGlzMTQuY3JlYXRlQWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KF90aGlzMTQuY29udGV4dCkpLCBhcmcsIF90aGlzMTQuc2hvd0J1c3lJbmRpY2F0b3IpOwogICAgICAgICAgICAgICAgICBwb3N0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZyA9IHJlc3BvbnNlLmRhdGE7IC8vIOS/neWtmOWujOaIkFVJ5aSE55CGCgogICAgICAgICAgICAgICAgICAgIF90aGlzMTQub25Gb3JtTG9hZChhcmcsICdzYXZlJyk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzMTQuJGVtaXQoJ3NhdmUnLCBhcmcpOwoKICAgICAgICAgICAgICAgICAgICBfdGhpczE0LiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczE0LmZvcm1TdGF0ZS5uZXh0KHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NhdmUnLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBhcmcKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOyAvLyDlh4blpIfmj5DkuqTlj4LmlbAKCgogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczE0LnZpZXdwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwYXJhbXM6IF90aGlzMTQudmlld3BhcmFtcwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSAvLyDlvLrliLbooaXlhYVzcmZ3Zm1lbW8KCgogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczE0LnNyZndmbWVtbykgewogICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3Jmd2ZtZW1vOiBfdGhpczE0LnNyZndmbWVtbwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMxNC5zZXJ2aWNlLndmc3VibWl0KF90aGlzLldGU3VibWl0QWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KF90aGlzMTQuY29udGV4dCkpLCBhcmcsIF90aGlzMTQuc2hvd0J1c3lJbmRpY2F0b3IsIGxvY2FsZGF0YSk7CgogICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTQuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5bel5L2c5rWB5o+Q5Lqk5aSx6LSlLCAnICsgcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICBfdGhpczE0Lm9uRm9ybUxvYWQoYXJnLCAnc3VibWl0Jyk7CgogICAgICAgICAgICAgICAgICAgICAgX3RoaXMxNC4kc3RvcmUuZGlzcGF0Y2goJ3ZpZXdhY3Rpb24vZGF0YXNhdmVkJywgewogICAgICAgICAgICAgICAgICAgICAgICB2aWV3dGFnOiBfdGhpczE0LnZpZXd0YWcKICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTQuJE5vdGljZS5pbmZvKHsKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5bel5L2c5rWB5o+Q5Lqk5oiQ5YqfJwogICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxNC4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczE0LiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn57O757uf5byC5bi4JwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTQuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczE0LiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHdmc3VibWl0KF94MywgX3g0KSB7CiAgICAgICAgcmV0dXJuIF93ZnN1Ym1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gd2ZzdWJtaXQ7CiAgICB9KCkKICAgIC8qKg0KICAgICAqIOihqOWNlemhueabtOaWsA0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUg55WM6Z2i6KGM5Li65ZCN56ewDQogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0g6K+35rGC5pWw5o2uDQogICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdXBkYXRlRGV0YWlscyDmm7TmlrDpobkNCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG93bG9hZGluZ10g5piv5ZCm5pi+56S65Yqg6L2954q25oCBDQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVGb3JtSXRlbXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUZvcm1JdGVtcyhtb2RlKSB7CiAgICAgIHZhciBfdGhpczE1ID0gdGhpczsKCiAgICAgIHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgdmFyIHVwZGF0ZURldGFpbHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgdmFyIHNob3dsb2FkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7CgogICAgICBpZiAoIW1vZGUgfHwgbW9kZSAmJiBPYmplY3QuaXMobW9kZSwgJycpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYXJnID0gX29iamVjdFNwcmVhZCh7fSwgZGF0YSk7CgogICAgICBPYmplY3QuYXNzaWduKGFyZywgdGhpcy52aWV3cGFyYW1zKTsKICAgICAgdmFyIHBvc3QgPSB0aGlzLnNlcnZpY2UuZnJvbnRMb2dpYyhtb2RlLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLCBhcmcsIHNob3dsb2FkaW5nKTsKICAgICAgcG9zdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgIF90aGlzMTUuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgZGVzYzogJ+ihqOWNlemhueabtOaWsOWksei0pScKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICB2YXIgX2RhdGEgPSB7fTsKICAgICAgICB1cGRhdGVEZXRhaWxzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgT2JqZWN0LmFzc2lnbihfZGF0YSwgX2RlZmluZVByb3BlcnR5KHt9LCBuYW1lLCBkYXRhW25hbWVdKSk7CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMTUuc2V0Rm9ybUVuYWJsZUNvbmQoX2RhdGEpOwoKICAgICAgICBfdGhpczE1LmZpbGxGb3JtKF9kYXRhLCAndXBkYXRlRm9ybUl0ZW0nKTsKCiAgICAgICAgX3RoaXMxNS5mb3JtTG9naWMoewogICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICBuZXdWYWw6IG51bGwsCiAgICAgICAgICBvbGRWYWw6IG51bGwKICAgICAgICB9KTsKCiAgICAgICAgX3RoaXMxNS5kYXRhQ2hhbmcubmV4dChKU09OLnN0cmluZ2lmeShfdGhpczE1LmRhdGEpKTsKCiAgICAgICAgX3RoaXMxNS4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMxNS5mb3JtU3RhdGUubmV4dCh7CiAgICAgICAgICAgIHR5cGU6ICd1cGRhdGVmb3JtaXRlbScsCiAgICAgICAgICAgIHVmaW1vZGU6IGFyZy5zcmZ1Zmltb2RlLAogICAgICAgICAgICBkYXRhOiBfZGF0YQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgX3RoaXMxNS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgX3RoaXMxNS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICBkZXNjOiAn57O757uf5byC5bi4JwogICAgICAgICAgfSk7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDlm57ovabkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50DQogICAgICogQG1lbWJlcm9mIFlTQ0dKQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkVudGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkVudGVyKCRldmVudCkge30KICAgIC8qKg0KICAgICAqIOS/neWtmOW5tumAgOWHug0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2F2ZUFuZEV4aXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVBbmRFeGl0KGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGFyZyA9IHt9OwoKICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCBkYXRhWzBdKTsKICAgICAgICB9CgogICAgICAgIF90aGlzLmN1cnJlbnRBY3Rpb24gPSAic2F2ZUFuZEV4aXQiOwoKICAgICAgICBfdGhpcy5zYXZlKFthcmddKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgICAgX3RoaXMuY2xvc2VWaWV3KHJlcy5kYXRhKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXNvbHZlKHJlcyk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOS/neWtmOW5tuaWsOW7ug0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2F2ZUFuZE5ldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZUFuZE5ldyhkYXRhKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBhcmcgPSB7fTsKCiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgZGF0YVswXSk7CiAgICAgICAgfQoKICAgICAgICBfdGhpcy5jdXJyZW50QWN0aW9uID0gInNhdmVBbmROZXciOwoKICAgICAgICBfdGhpcy5zYXZlKFthcmddKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIF90aGlzLlJlc2V0RGF0YShyZXMpOwoKICAgICAgICAgIF90aGlzLmxvYWREcmFmdCh7fSk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWIoOmZpOW5tumAgOWHug0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVtb3ZlQW5kRXhpdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQW5kRXhpdChkYXRhKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBhcmcgPSB7fTsKCiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgZGF0YVswXSk7CiAgICAgICAgfQoKICAgICAgICBfdGhpcy5yZW1vdmUoW2FyZ10pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgICBfdGhpcy5jbG9zZVZpZXcocmVzLmRhdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIHJlc29sdmUocmVzKTsKICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgKiDlhbPns7vnlYzpnaLmlbDmja7kv53lrZjlrozmiJANCiAgICAqDQogICAgKiBAcGFyYW0ge2FueX0gJGV2ZW50DQogICAgKiBAbWVtYmVyb2YgWVNDR0pCYXNlDQogICAgKi8KCiAgfSwgewogICAga2V5OiAiZHJkYXRhc2F2ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRyZGF0YXNhdmVkKCRldmVudCkgewogICAgICB2YXIgX3RoaXMxNiA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5kcmNvdW50ZXItLTsKCiAgICAgIGlmICh0aGlzLmRyY291bnRlciA9PT0gMCkgewogICAgICAgIHRoaXMuc2F2ZSh0aGlzLmRyc2F2ZW9wdCwgdW5kZWZpbmVkLCBmYWxzZSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBfdGhpczE2LnNhdmVTdGF0ZShyZXMpOwoKICAgICAgICAgIF90aGlzMTYuZHJzYXZlb3B0ID0ge307CgogICAgICAgICAgaWYgKE9iamVjdC5pcyhfdGhpcy5jdXJyZW50QWN0aW9uLCAic2F2ZUFuZE5ldyIpKSB7CiAgICAgICAgICAgIF90aGlzLlJlc2V0RGF0YShyZXMpOwoKICAgICAgICAgICAgX3RoaXMubG9hZERyYWZ0KHt9KTsKICAgICAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmlzKF90aGlzLmN1cnJlbnRBY3Rpb24sICJzYXZlQW5kRXhpdCIpKSB7CiAgICAgICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgICAgICBfdGhpcy5jbG9zZVZpZXcocmVzLmRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOaWsOW7uum7mOiupOWAvA0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY3JlYXRlRGVmYXVsdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRGVmYXVsdCgpIHsKICAgICAgaWYgKHRoaXMuZGF0YS5oYXNPd25Qcm9wZXJ0eSgncGltcGVyc29uaWQnKSkgewogICAgICAgIHRoaXMuZGF0YVsncGltcGVyc29uaWQnXSA9IHRoaXMuY29udGV4dFsnU1JGUEVSU09OSUQnXTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuZGF0YS5oYXNPd25Qcm9wZXJ0eSgncGltcGVyc29ubmFtZScpKSB7CiAgICAgICAgdGhpcy5kYXRhWydwaW1wZXJzb25uYW1lJ10gPSB0aGlzLmNvbnRleHRbJ1NSRlVTRVJOQU1FJ107CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkoJ2x4JykpIHsKICAgICAgICB0aGlzLmRhdGFbJ2x4J10gPSAnMjAnOwogICAgICB9CgogICAgICBpZiAodGhpcy5kYXRhLmhhc093blByb3BlcnR5KCd3b3JrZmxvd3N0YXRlJykpIHsKICAgICAgICB0aGlzLmRhdGFbJ3dvcmtmbG93c3RhdGUnXSA9ICcxMCc7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOabtOaWsOm7mOiupOWAvA0KICAgICAqIEBtZW1iZXJvZiBZU0NHSkJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidXBkYXRlRGVmYXVsdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRGVmYXVsdCgpIHt9CiAgfV0pOwoKICByZXR1cm4gWVNDR0pCYXNlOwp9KFZ1ZSk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIFlTQ0dKQmFzZS5wcm90b3R5cGUsICJuYW1lIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgInZpZXdTdGF0ZSIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIFlTQ0dKQmFzZS5wcm90b3R5cGUsICJjb250ZXh0Iiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgInZpZXdwYXJhbXMiLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKHsKICAiZGVmYXVsdCI6IGZhbHNlCn0pXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgImF1dG9zYXZlIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCh7CiAgImRlZmF1bHQiOiB0cnVlCn0pXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgInNob3dCdXN5SW5kaWNhdG9yIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIldGU3VibWl0QWN0aW9uIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIldGU3RhcnRBY3Rpb24iLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAidXBkYXRlQWN0aW9uIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgInJlbW92ZUFjdGlvbiIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIFlTQ0dKQmFzZS5wcm90b3R5cGUsICJsb2FkZHJhZnRBY3Rpb24iLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAibG9hZEFjdGlvbiIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIFlTQ0dKQmFzZS5wcm90b3R5cGUsICJjcmVhdGVBY3Rpb24iLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAic2VhcmNoQWN0aW9uIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgInZpZXd0YWciLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5zcmZ1cGRhdGVkYXRlJyldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAib25TcmZ1cGRhdGVkYXRlQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnNyZm9yaWtleScpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIm9uU3Jmb3Jpa2V5Q2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnNyZmtleScpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIm9uU3Jma2V5Q2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnNyZm1ham9ydGV4dCcpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIm9uU3JmbWFqb3J0ZXh0Q2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnNyZnRlbXBtb2RlJyldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAib25TcmZ0ZW1wbW9kZUNoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5zcmZ1ZicpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIm9uU3JmdWZDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEuc3JmZGVpZCcpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIm9uU3JmZGVpZENoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5zcmZzb3VyY2VrZXknKV0sIFlTQ0dKQmFzZS5wcm90b3R5cGUsICJvblNyZnNvdXJjZWtleUNoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5waW1wZXJzb25pZCcpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIm9uUGltcGVyc29uaWRDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEucGltcGVyc29ubmFtZScpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIm9uUGltcGVyc29ubmFtZUNoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5janNqJyldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAib25DanNqQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnJqc2onKV0sIFlTQ0dKQmFzZS5wcm90b3R5cGUsICJvblJqc2pDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEucXdmaGdqJyldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAib25Rd2ZoZ2pDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEubHgnKV0sIFlTQ0dKQmFzZS5wcm90b3R5cGUsICJvbkx4Q2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnN5JyldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAib25TeUNoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5ieicpXSwgWVNDR0pCYXNlLnByb3RvdHlwZSwgIm9uQnpDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEub3JnaWQnKV0sIFlTQ0dKQmFzZS5wcm90b3R5cGUsICJvbk9yZ2lkQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLm9yZ3NlY3RvcmlkJyldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAib25PcmdzZWN0b3JpZENoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS53b3JrZmxvd3N0YXRlJyldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAib25Xb3JrZmxvd3N0YXRlQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnBpbWV4aXRhbmRlbnRyeWlkJyldLCBZU0NHSkJhc2UucHJvdG90eXBlLCAib25QaW1leGl0YW5kZW50cnlpZENoYW5nZSIsIG51bGwpOwoKWVNDR0pCYXNlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtDb21wb25lbnQoewogIGNvbXBvbmVudHM6IHt9Cn0pXSwgWVNDR0pCYXNlKTsKZXhwb3J0IGRlZmF1bHQgWVNDR0pCYXNlOw=="},null]}
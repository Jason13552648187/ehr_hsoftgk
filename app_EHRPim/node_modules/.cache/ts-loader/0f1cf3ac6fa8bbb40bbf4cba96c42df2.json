{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\orm-org\\default-searchform\\default-searchform-service.ts","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\orm-org\\default-searchform\\default-searchform-service.ts","mtime":1630509411014},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjsKaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSAidHNsaWIiOwppbXBvcnQgeyBFcnJvcmxvZyB9IGZyb20gJ0AvdXRpbHMnOwppbXBvcnQgQ29udHJvbFNlcnZpY2UgZnJvbSAnQC93aWRnZXRzL2NvbnRyb2wtc2VydmljZSc7CmltcG9ydCBPcm1PcmdTZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9vcm0tb3JnL29ybS1vcmctc2VydmljZSc7CmltcG9ydCBEZWZhdWx0TW9kZWwgZnJvbSAnLi9kZWZhdWx0LXNlYXJjaGZvcm0tbW9kZWwnOwovKioNCiAqIERlZmF1bHQg6YOo5Lu25pyN5Yqh5a+56LGhDQogKg0KICogQGV4cG9ydA0KICogQGNsYXNzIERlZmF1bHRTZXJ2aWNlDQogKi8KCnZhciBEZWZhdWx0U2VydmljZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db250cm9sU2VydmljZSkgewogIF9pbmhlcml0cyhEZWZhdWx0U2VydmljZSwgX0NvbnRyb2xTZXJ2aWNlKTsKCiAgLyoqDQogICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgRGVmYXVsdFNlcnZpY2UuDQogICAqDQogICAqIEBwYXJhbSB7Kn0gW29wdHM9e31dDQogICAqIEBtZW1iZXJvZiBEZWZhdWx0U2VydmljZQ0KICAgKi8KICBmdW5jdGlvbiBEZWZhdWx0U2VydmljZSgpIHsKICAgIHZhciBfdGhpczsKCiAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlZmF1bHRTZXJ2aWNlKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEZWZhdWx0U2VydmljZSkuY2FsbCh0aGlzLCBvcHRzKSk7CiAgICAvKioNCiAgICAgKiDnu4Tnu4fnrqHnkIbmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtPcm1PcmdTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBEZWZhdWx0U2VydmljZQ0KICAgICAqLwoKICAgIF90aGlzLmFwcEVudGl0eVNlcnZpY2UgPSBuZXcgT3JtT3JnU2VydmljZSh7CiAgICAgICRzdG9yZTogX3RoaXMuZ2V0U3RvcmUoKQogICAgfSk7CiAgICBfdGhpcy5tb2RlbCA9IG5ldyBEZWZhdWx0TW9kZWwoKTsKICAgIHJldHVybiBfdGhpczsKICB9CiAgLyoqDQogICAqIOiuvue9ruS7juaVsOaNruaooeW8jw0KICAgKg0KICAgKiBAdHlwZSB7Ym9vbGVhbn0NCiAgICogQG1lbWJlcm9mIERlZmF1bHRTZXJ2aWNlDQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKERlZmF1bHRTZXJ2aWNlLCBbewogICAga2V5OiAic2V0VGVtcE1vZGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRlbXBNb2RlKCkgewogICAgICB0aGlzLmlzVGVtcE1vZGUgPSBmYWxzZTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWkhOeQhuaVsOaNrg0KICAgICAqDQogICAgICogQHByaXZhdGUNCiAgICAgKiBAcGFyYW0ge1Byb21pc2U8YW55Pn0gcHJvbWlzZQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIERlZmF1bHRTZXJ2aWNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImRvSXRlbXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRvSXRlbXMocHJvbWlzZSwgZGVLZXlGaWVsZCwgZGVOYW1lKSB7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgIGl0ZW1bZGVOYW1lXSA9IGl0ZW1bZGVLZXlGaWVsZF07CiAgICAgICAgICAgICAgZGF0YVtpbmRleF0gPSBpdGVtOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChbXSk7CiAgICAgICAgICB9CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICByZWplY3QoW10pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOiOt+WPlui3qOWunuS9k+aVsOaNrumbhuWQiA0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lIOacjeWKoeWQjeensA0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnRlcmZhY2VOYW1lIOaOpeWPo+WQjeensA0KICAgICAqIEBwYXJhbSB7Kn0gZGF0YQ0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzbG9hZGluZ10NCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnlbXT59DQogICAgICogQG1lbWJlcm9mICBEZWZhdWx0U2VydmljZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRJdGVtcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXRlbXMoc2VydmljZU5hbWUsIGludGVyZmFjZU5hbWUpIHsKICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9OwogICAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwogICAgICB2YXIgaXNsb2FkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7CiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChbXSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDlkK/liqjlt6XkvZzmtYENCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb24NCiAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0PXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgICogQHBhcmFtIHtib29sZWFufSBbaXNsb2FkaW5nXQ0KICAgICAqIEBwYXJhbSB7Kn0gW2xvY2FsZGF0YV0NCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBEZWZhdWx0U2VydmljZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ3ZnN0YXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB3ZnN0YXJ0KGFjdGlvbikgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9OwogICAgICB2YXIgaXNsb2FkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7CiAgICAgIHZhciBsb2NhbGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDsKICAgICAgZGF0YSA9IHRoaXMuaGFuZGxlV0ZEYXRhKGRhdGEpOwogICAgICBjb250ZXh0ID0gdGhpcy5oYW5kbGVSZXF1ZXN0RGF0YShhY3Rpb24sIGNvbnRleHQsIGRhdGEpLmNvbnRleHQ7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICB2YXIgX2FwcEVudGl0eVNlcnZpY2UgPSBfdGhpczIuYXBwRW50aXR5U2VydmljZTsKCiAgICAgICAgaWYgKF9hcHBFbnRpdHlTZXJ2aWNlW2FjdGlvbl0gJiYgX2FwcEVudGl0eVNlcnZpY2VbYWN0aW9uXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgICByZXN1bHQgPSBfYXBwRW50aXR5U2VydmljZVthY3Rpb25dKGNvbnRleHQsIGRhdGEsIGlzbG9hZGluZywgbG9jYWxkYXRhKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0ID0gX3RoaXMyLmFwcEVudGl0eVNlcnZpY2UuV0ZTdGFydChjb250ZXh0LCBkYXRhLCBpc2xvYWRpbmcsIGxvY2FsZGF0YSk7CiAgICAgICAgfQoKICAgICAgICByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzMi5oYW5kbGVSZXNwb25zZShhY3Rpb24sIHJlc3BvbnNlKTsKCiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTsKICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5o+Q5Lqk5bel5L2c5rWBDQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uDQogICAgICogQHBhcmFtIHsqfSBbY29udGV4dD17fV0NCiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPXt9XQ0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzbG9hZGluZ10NCiAgICAgKiBAcGFyYW0geyp9IFtsb2NhbGRhdGFdDQogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0NCiAgICAgKiBAbWVtYmVyb2YgRGVmYXVsdFNlcnZpY2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAid2ZzdWJtaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHdmc3VibWl0KGFjdGlvbikgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9OwogICAgICB2YXIgaXNsb2FkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7CiAgICAgIHZhciBsb2NhbGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDsKICAgICAgZGF0YSA9IHRoaXMuaGFuZGxlV0ZEYXRhKGRhdGEsIHRydWUpOwogICAgICBjb250ZXh0ID0gdGhpcy5oYW5kbGVSZXF1ZXN0RGF0YShhY3Rpb24sIGNvbnRleHQsIGRhdGEsIHRydWUpLmNvbnRleHQ7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICB2YXIgX2FwcEVudGl0eVNlcnZpY2UgPSBfdGhpczMuYXBwRW50aXR5U2VydmljZTsKCiAgICAgICAgaWYgKF9hcHBFbnRpdHlTZXJ2aWNlW2FjdGlvbl0gJiYgX2FwcEVudGl0eVNlcnZpY2VbYWN0aW9uXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgICByZXN1bHQgPSBfYXBwRW50aXR5U2VydmljZVthY3Rpb25dKGNvbnRleHQsIGRhdGEsIGlzbG9hZGluZywgbG9jYWxkYXRhKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0ID0gX3RoaXMzLmFwcEVudGl0eVNlcnZpY2UuV0ZTdWJtaXQoY29udGV4dCwgZGF0YSwgaXNsb2FkaW5nLCBsb2NhbGRhdGEpOwogICAgICAgIH0KCiAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczMuaGFuZGxlUmVzcG9uc2UoYWN0aW9uLCByZXNwb25zZSk7CgogICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOa3u+WKoOaVsOaNrg0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbg0KICAgICAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9e31dDQogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0NCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc2xvYWRpbmddDQogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0NCiAgICAgKiBAbWVtYmVyb2YgRGVmYXVsdFNlcnZpY2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiYWRkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoYWN0aW9uKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogICAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CiAgICAgIHZhciBpc2xvYWRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDsKCiAgICAgIHZhciBfdGhpcyRoYW5kbGVSZXF1ZXN0RGEgPSB0aGlzLmhhbmRsZVJlcXVlc3REYXRhKGFjdGlvbiwgY29udGV4dCwgZGF0YSksCiAgICAgICAgICBEYXRhID0gX3RoaXMkaGFuZGxlUmVxdWVzdERhLmRhdGEsCiAgICAgICAgICBDb250ZXh0ID0gX3RoaXMkaGFuZGxlUmVxdWVzdERhLmNvbnRleHQ7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgdmFyIF9hcHBFbnRpdHlTZXJ2aWNlID0gX3RoaXM0LmFwcEVudGl0eVNlcnZpY2U7CgogICAgICAgIGlmIChfYXBwRW50aXR5U2VydmljZVthY3Rpb25dICYmIF9hcHBFbnRpdHlTZXJ2aWNlW2FjdGlvbl0gaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgcmVzdWx0ID0gX2FwcEVudGl0eVNlcnZpY2VbYWN0aW9uXShDb250ZXh0LCBEYXRhLCBpc2xvYWRpbmcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSBfdGhpczQuYXBwRW50aXR5U2VydmljZS5DcmVhdGUoQ29udGV4dCwgRGF0YSwgaXNsb2FkaW5nKTsKICAgICAgICB9CgogICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXM0LmhhbmRsZVJlc3BvbnNlKGFjdGlvbiwgcmVzcG9uc2UpOwoKICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpOwogICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDliKDpmaTmlbDmja4NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb24NCiAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0PXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgICogQHBhcmFtIHtib29sZWFufSBbaXNsb2FkaW5nXQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIERlZmF1bHRTZXJ2aWNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImRlbGV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShhY3Rpb24pIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgICAgIHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTsKICAgICAgdmFyIGlzbG9hZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwoKICAgICAgdmFyIF90aGlzJGhhbmRsZVJlcXVlc3REYTIgPSB0aGlzLmhhbmRsZVJlcXVlc3REYXRhKGFjdGlvbiwgY29udGV4dCwgZGF0YSksCiAgICAgICAgICBEYXRhID0gX3RoaXMkaGFuZGxlUmVxdWVzdERhMi5kYXRhLAogICAgICAgICAgQ29udGV4dCA9IF90aGlzJGhhbmRsZVJlcXVlc3REYTIuY29udGV4dDsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICB2YXIgX2FwcEVudGl0eVNlcnZpY2UgPSBfdGhpczUuYXBwRW50aXR5U2VydmljZTsKCiAgICAgICAgaWYgKF9hcHBFbnRpdHlTZXJ2aWNlW2FjdGlvbl0gJiYgX2FwcEVudGl0eVNlcnZpY2VbYWN0aW9uXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgICByZXN1bHQgPSBfYXBwRW50aXR5U2VydmljZVthY3Rpb25dKENvbnRleHQsIERhdGEsIGlzbG9hZGluZyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IF90aGlzNS5hcHBFbnRpdHlTZXJ2aWNlLlJlbW92ZShDb250ZXh0LCBEYXRhLCBpc2xvYWRpbmcpOwogICAgICAgIH0KCiAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTsKICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5L+u5pS55pWw5o2uDQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uDQogICAgICogQHBhcmFtIHsqfSBbY29udGV4dD17fV0NCiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPXt9XQ0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzbG9hZGluZ10NCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBEZWZhdWx0U2VydmljZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ1cGRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShhY3Rpb24pIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgICAgIHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTsKICAgICAgdmFyIGlzbG9hZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwoKICAgICAgdmFyIF90aGlzJGhhbmRsZVJlcXVlc3REYTMgPSB0aGlzLmhhbmRsZVJlcXVlc3REYXRhKGFjdGlvbiwgY29udGV4dCwgZGF0YSksCiAgICAgICAgICBEYXRhID0gX3RoaXMkaGFuZGxlUmVxdWVzdERhMy5kYXRhLAogICAgICAgICAgQ29udGV4dCA9IF90aGlzJGhhbmRsZVJlcXVlc3REYTMuY29udGV4dDsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICB2YXIgX2FwcEVudGl0eVNlcnZpY2UgPSBfdGhpczYuYXBwRW50aXR5U2VydmljZTsKCiAgICAgICAgaWYgKF9hcHBFbnRpdHlTZXJ2aWNlW2FjdGlvbl0gJiYgX2FwcEVudGl0eVNlcnZpY2VbYWN0aW9uXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgICByZXN1bHQgPSBfYXBwRW50aXR5U2VydmljZVthY3Rpb25dKENvbnRleHQsIERhdGEsIGlzbG9hZGluZyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IF90aGlzNi5hcHBFbnRpdHlTZXJ2aWNlLlVwZGF0ZShDb250ZXh0LCBEYXRhLCBpc2xvYWRpbmcpOwogICAgICAgIH0KCiAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczYuaGFuZGxlUmVzcG9uc2UoYWN0aW9uLCByZXNwb25zZSk7CgogICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOafpeivouaVsOaNrg0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbg0KICAgICAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9e31dDQogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0NCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc2xvYWRpbmddDQogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0NCiAgICAgKiBAbWVtYmVyb2YgRGVmYXVsdFNlcnZpY2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoYWN0aW9uKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogICAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CiAgICAgIHZhciBpc2xvYWRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDsKCiAgICAgIHZhciBfdGhpcyRoYW5kbGVSZXF1ZXN0RGE0ID0gdGhpcy5oYW5kbGVSZXF1ZXN0RGF0YShhY3Rpb24sIGNvbnRleHQsIGRhdGEpLAogICAgICAgICAgRGF0YSA9IF90aGlzJGhhbmRsZVJlcXVlc3REYTQuZGF0YSwKICAgICAgICAgIENvbnRleHQgPSBfdGhpcyRoYW5kbGVSZXF1ZXN0RGE0LmNvbnRleHQ7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgdmFyIF9hcHBFbnRpdHlTZXJ2aWNlID0gX3RoaXM3LmFwcEVudGl0eVNlcnZpY2U7CgogICAgICAgIGlmIChfYXBwRW50aXR5U2VydmljZVthY3Rpb25dICYmIF9hcHBFbnRpdHlTZXJ2aWNlW2FjdGlvbl0gaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgcmVzdWx0ID0gX2FwcEVudGl0eVNlcnZpY2VbYWN0aW9uXShDb250ZXh0LCBEYXRhLCBpc2xvYWRpbmcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSBfdGhpczcuYXBwRW50aXR5U2VydmljZS5HZXQoQ29udGV4dCwgRGF0YSwgaXNsb2FkaW5nKTsKICAgICAgICB9CgogICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXM3LmhhbmRsZVJlc3BvbnNlKGFjdGlvbiwgcmVzcG9uc2UpOwoKICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpOwogICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDliqDovb3ojYnnqL8NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb24NCiAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0PXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgICogQHBhcmFtIHtib29sZWFufSBbaXNsb2FkaW5nXQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIERlZmF1bHRTZXJ2aWNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImxvYWREcmFmdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZERyYWZ0KGFjdGlvbikgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9OwogICAgICB2YXIgaXNsb2FkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7CgogICAgICB2YXIgX3RoaXMkaGFuZGxlUmVxdWVzdERhNSA9IHRoaXMuaGFuZGxlUmVxdWVzdERhdGEoYWN0aW9uLCBjb250ZXh0LCBkYXRhKSwKICAgICAgICAgIERhdGEgPSBfdGhpcyRoYW5kbGVSZXF1ZXN0RGE1LmRhdGEsCiAgICAgICAgICBDb250ZXh0ID0gX3RoaXMkaGFuZGxlUmVxdWVzdERhNS5jb250ZXh0OwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgcmVzdWx0OwogICAgICAgIHZhciBfYXBwRW50aXR5U2VydmljZSA9IF90aGlzOC5hcHBFbnRpdHlTZXJ2aWNlOwoKICAgICAgICBpZiAoX2FwcEVudGl0eVNlcnZpY2VbYWN0aW9uXSAmJiBfYXBwRW50aXR5U2VydmljZVthY3Rpb25dIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICAgIHJlc3VsdCA9IF9hcHBFbnRpdHlTZXJ2aWNlW2FjdGlvbl0oQ29udGV4dCwgRGF0YSwgaXNsb2FkaW5nKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0ID0gX3RoaXM4LmFwcEVudGl0eVNlcnZpY2UuR2V0RHJhZnQoQ29udGV4dCwgRGF0YSwgaXNsb2FkaW5nKTsKICAgICAgICB9CgogICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXM4LmhhbmRsZVJlc3BvbnNlKGFjdGlvbiwgcmVzcG9uc2UsIHRydWUpOwoKICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpOwogICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAqIOWJjeWPsOmAu+i+kQ0KICAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbg0KICAgICogQHBhcmFtIHsqfSBbY29udGV4dD17fV0NCiAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc2xvYWRpbmddDQogICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICogQG1lbWJlcm9mIERlZmF1bHRTZXJ2aWNlDQogICAgKi8KCiAgfSwgewogICAga2V5OiAiZnJvbnRMb2dpYyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbnRMb2dpYyhhY3Rpb24pIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CgogICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgICAgIHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTsKICAgICAgdmFyIGlzbG9hZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwoKICAgICAgdmFyIF90aGlzJGhhbmRsZVJlcXVlc3REYTYgPSB0aGlzLmhhbmRsZVJlcXVlc3REYXRhKGFjdGlvbiwgY29udGV4dCwgZGF0YSksCiAgICAgICAgICBEYXRhID0gX3RoaXMkaGFuZGxlUmVxdWVzdERhNi5kYXRhLAogICAgICAgICAgQ29udGV4dCA9IF90aGlzJGhhbmRsZVJlcXVlc3REYTYuY29udGV4dDsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICB2YXIgX2FwcEVudGl0eVNlcnZpY2UgPSBfdGhpczkuYXBwRW50aXR5U2VydmljZTsKCiAgICAgICAgaWYgKF9hcHBFbnRpdHlTZXJ2aWNlW2FjdGlvbl0gJiYgX2FwcEVudGl0eVNlcnZpY2VbYWN0aW9uXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgICByZXN1bHQgPSBfYXBwRW50aXR5U2VydmljZVthY3Rpb25dKENvbnRleHQsIERhdGEsIGlzbG9hZGluZyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7CiAgICAgICAgICAgIHN0YXR1czogNTAwLAogICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgdGl0bGU6ICflpLHotKUnLAogICAgICAgICAgICAgIG1lc3NhZ2U6ICfns7vnu5/lvILluLgnCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczkuaGFuZGxlUmVzcG9uc2UoYWN0aW9uLCByZXNwb25zZSwgdHJ1ZSk7CgogICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWkhOeQhuivt+axguaVsOaNrg0KICAgICAqDQogICAgICogQHBhcmFtIGFjdGlvbiDooYzkuLoNCiAgICAgKiBAcGFyYW0gZGF0YSDmlbDmja4NCiAgICAgKiBAbWVtYmVyb2YgRGVmYXVsdFNlcnZpY2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaGFuZGxlUmVxdWVzdERhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3REYXRhKGFjdGlvbiwgY29udGV4dCkgewogICAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CiAgICAgIHZhciBpc01lcmdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTsKICAgICAgdmFyIG1vZGUgPSB0aGlzLmdldE1vZGUoKTsKCiAgICAgIGlmICghbW9kZSAmJiBtb2RlLmdldERhdGFJdGVtcyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgIH0KCiAgICAgIHZhciBmb3JtSXRlbUl0ZW1zID0gbW9kZS5nZXREYXRhSXRlbXMoKTsKICAgICAgdmFyIHJlcXVlc3REYXRhID0ge307CgogICAgICBpZiAoaXNNZXJnZSAmJiBkYXRhICYmIGRhdGEudmlld3BhcmFtcykgewogICAgICAgIE9iamVjdC5hc3NpZ24ocmVxdWVzdERhdGEsIGRhdGEudmlld3BhcmFtcyk7CiAgICAgIH0KCiAgICAgIGZvcm1JdGVtSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIGlmIChpdGVtICYmIGl0ZW0uZGF0YVR5cGUgJiYgT2JqZWN0LmlzKGl0ZW0uZGF0YVR5cGUsICdGT05US0VZJykpIHsKICAgICAgICAgIGlmIChpdGVtICYmIGl0ZW0ucHJvcCkgewogICAgICAgICAgICByZXF1ZXN0RGF0YVtpdGVtLnByb3BdID0gY29udGV4dFtpdGVtLm5hbWVdOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLnByb3ApIHsKICAgICAgICAgICAgcmVxdWVzdERhdGFbaXRlbS5wcm9wXSA9IGRhdGFbaXRlbS5uYW1lXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICB2YXIgdGVtcENvbnRleHQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbnRleHQpKTsKCiAgICAgIGlmICh0ZW1wQ29udGV4dCAmJiB0ZW1wQ29udGV4dC5zcmZzZXNzaW9uaWQpIHsKICAgICAgICB0ZW1wQ29udGV4dC5zcmZzZXNzaW9ua2V5ID0gdGVtcENvbnRleHQuc3Jmc2Vzc2lvbmlkOwogICAgICAgIGRlbGV0ZSB0ZW1wQ29udGV4dC5zcmZzZXNzaW9uaWQ7CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgY29udGV4dDogdGVtcENvbnRleHQsCiAgICAgICAgZGF0YTogcmVxdWVzdERhdGEKICAgICAgfTsKICAgIH0KICB9XSk7CgogIHJldHVybiBEZWZhdWx0U2VydmljZTsKfShDb250cm9sU2VydmljZSk7CgpleHBvcnQgeyBEZWZhdWx0U2VydmljZSBhcyBkZWZhdWx0IH07Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW0Vycm9ybG9nXSwgRGVmYXVsdFNlcnZpY2UucHJvdG90eXBlLCAiZ2V0SXRlbXMiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbRXJyb3Jsb2ddLCBEZWZhdWx0U2VydmljZS5wcm90b3R5cGUsICJ3ZnN0YXJ0IiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW0Vycm9ybG9nXSwgRGVmYXVsdFNlcnZpY2UucHJvdG90eXBlLCAid2ZzdWJtaXQiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbRXJyb3Jsb2ddLCBEZWZhdWx0U2VydmljZS5wcm90b3R5cGUsICJhZGQiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbRXJyb3Jsb2ddLCBEZWZhdWx0U2VydmljZS5wcm90b3R5cGUsICJkZWxldGUiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbRXJyb3Jsb2ddLCBEZWZhdWx0U2VydmljZS5wcm90b3R5cGUsICJ1cGRhdGUiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbRXJyb3Jsb2ddLCBEZWZhdWx0U2VydmljZS5wcm90b3R5cGUsICJnZXQiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbRXJyb3Jsb2ddLCBEZWZhdWx0U2VydmljZS5wcm90b3R5cGUsICJsb2FkRHJhZnQiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbRXJyb3Jsb2ddLCBEZWZhdWx0U2VydmljZS5wcm90b3R5cGUsICJmcm9udExvZ2ljIiwgbnVsbCk7"},null]}
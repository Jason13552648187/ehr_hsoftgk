{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\service\\entity-service.ts","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\service\\entity-service.ts","mtime":1630509410413},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.filter";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.object.define-property";
import "core-js/modules/es.object.is";
import "core-js/modules/es.object.keys";
import "core-js/modules/web.dom-collections.for-each";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import { Http } from '@/utils';
/**
 * 实体服务基类
 *
 * @export
 * @class EntityService
 */

var EntityService =
/*#__PURE__*/
function () {
  /**
   * Creates an instance of EntityService.
   *
   * @param {*} [opts={}]
   * @memberof EntityService
   */
  function EntityService() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EntityService);

    /**
     * Vue 状态管理器
     *
     * @private
     * @type {(any | null)}
     * @memberof EntityService
     */
    this.$store = null;
    /**
     * 当前DE标识
     *
     * @public
     * @type {(string)}
     * @memberof EntityService
     */

    this.APPDEKEY = '';
    /**
     * 当前APPDE标识
     *
     * @public
     * @type {(string)}
     * @memberof EntityService
     */

    this.APPLYDEKEY = '';
    /**
     * 当前NAME
     *
     * @public
     * @type {(string)}
     * @memberof EntityService
     */

    this.APPDENAME = '';
    /**
     * 当前主信息名
     *
     * @public
     * @type {(string)}
     * @memberof EntityService
     */

    this.APPDETEXT = '';
    /**
     * 当前系统名
     *
     * @public
     * @type {(string)}
     * @memberof EntityService
     */

    this.SYSTEMNAME = '';
    /**
     * 当前应用名
     *
     * @public
     * @type {(string)}
     * @memberof EntityService
     */

    this.APPNAME = '';
    this.$store = opts.$store;
    this.tempStorage = localStorage;
    this.initBasicData();
  }
  /**
   * 获取实体数据服务
   *
   * @protected
   * @param {string} name 实体名称
   * @returns {Promise<any>}
   * @memberof EntityService
   */


  _createClass(EntityService, [{
    key: "getService",
    value: function getService(name) {
      return window['entityServiceRegister'].getService(name);
    }
    /**
     * 获取状态管理器
     *
     * @returns {(any | null)}
     * @memberof EntityService
     */

  }, {
    key: "getStore",
    value: function getStore() {
      return this.$store;
    }
    /**
     * 初始化基础数据
     *
     * @memberof EntityService
     */

  }, {
    key: "initBasicData",
    value: function initBasicData() {}
    /**
     * Select接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "Select",
    value: function () {
      var _Select = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var context,
            data,
            isloading,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                context = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                data = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                isloading = _args.length > 2 ? _args[2] : undefined;
                return _context.abrupt("return", this.SelectTemp(context, data, isloading));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function Select() {
        return _Select.apply(this, arguments);
      }

      return Select;
    }()
    /**
     * SelectTemp接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "SelectTemp",
    value: function () {
      var _SelectTemp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var _this = this;

        var context,
            data,
            isloading,
            result,
            tempResult,
            tempResultData,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                context = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                isloading = _args2.length > 2 ? _args2[2] : undefined;

                if (!(context.srfsessionkey && !Object.is(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME), 'undefined'))) {
                  _context2.next = 12;
                  break;
                }

                result = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME));

                if (!result) {
                  _context2.next = 11;
                  break;
                }

                tempResult = result.filter(function (item) {
                  return Object.is(item[_this.APPDEKEY], data[_this.APPDEKEY]);
                });
                tempResultData = tempResult.length > 0 ? tempResult[0] : Object.assign({}, data);
                return _context2.abrupt("return", {
                  "status": 200,
                  "data": tempResultData
                });

              case 11:
                return _context2.abrupt("return", {
                  "status": 500,
                  "data": null
                });

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function SelectTemp() {
        return _SelectTemp.apply(this, arguments);
      }

      return SelectTemp;
    }()
    /**
     * CreateTemp接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "CreateTemp",
    value: function () {
      var _CreateTemp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var context,
            data,
            isloading,
            tempData,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                context = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                isloading = _args3.length > 2 ? _args3[2] : undefined;

                if (!(context.srfsessionkey && !Object.is(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME), 'undefined'))) {
                  _context3.next = 11;
                  break;
                }

                tempData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME));
                data.srffrontuf = "0";
                tempData.push(data);
                this.tempStorage.setItem(context.srfsessionkey + '_' + this.APPDENAME, JSON.stringify(tempData));
                return _context3.abrupt("return", {
                  "status": 200,
                  "data": data
                });

              case 11:
                return _context3.abrupt("return", {
                  "status": 200,
                  "data": {}
                });

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function CreateTemp() {
        return _CreateTemp.apply(this, arguments);
      }

      return CreateTemp;
    }()
    /**
     * GetTemp接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "GetTemp",
    value: function () {
      var _GetTemp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        var _this2 = this;

        var context,
            data,
            isloading,
            result,
            tempResult,
            tempResultData,
            _args4 = arguments;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                context = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
                data = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                isloading = _args4.length > 2 ? _args4[2] : undefined;

                if (!(context.srfsessionkey && !Object.is(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME), 'undefined'))) {
                  _context4.next = 12;
                  break;
                }

                result = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME));

                if (!result) {
                  _context4.next = 11;
                  break;
                }

                tempResult = result.filter(function (item) {
                  return Object.is(item[_this2.APPDEKEY], data[_this2.APPDEKEY]);
                });
                tempResultData = tempResult.length > 0 ? tempResult[0] : Object.assign({}, data);
                return _context4.abrupt("return", {
                  "status": 200,
                  "data": tempResultData
                });

              case 11:
                return _context4.abrupt("return", {
                  "status": 500,
                  "data": null
                });

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function GetTemp() {
        return _GetTemp.apply(this, arguments);
      }

      return GetTemp;
    }()
    /**
     * Update接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "Update",
    value: function () {
      var _Update = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        var context,
            data,
            isloading,
            _args5 = arguments;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                context = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
                data = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                isloading = _args5.length > 2 ? _args5[2] : undefined;
                return _context5.abrupt("return", this.UpdateTemp(context, data, isloading));

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function Update() {
        return _Update.apply(this, arguments);
      }

      return Update;
    }()
    /**
     * UpdateTempMajor接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "UpdateTempMajor",
    value: function () {
      var _UpdateTempMajor = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6() {
        var context,
            data,
            isloading,
            _args6 = arguments;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                context = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
                data = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                isloading = _args6.length > 2 ? _args6[2] : undefined;
                return _context6.abrupt("return", this.Update(context, data, isloading));

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function UpdateTempMajor() {
        return _UpdateTempMajor.apply(this, arguments);
      }

      return UpdateTempMajor;
    }()
    /**
     * Save接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "Save",
    value: function () {
      var _Save = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee7() {
        var context,
            data,
            isloading,
            _args7 = arguments;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                context = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
                data = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};
                isloading = _args7.length > 2 ? _args7[2] : undefined;
                return _context7.abrupt("return", {
                  status: 500,
                  data: {
                    title: '失败',
                    message: '预置实体行为 Save 未实现'
                  }
                });

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function Save() {
        return _Save.apply(this, arguments);
      }

      return Save;
    }()
    /**
     * UpdateTemp接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "UpdateTemp",
    value: function () {
      var _UpdateTemp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee8() {
        var _this3 = this;

        var context,
            data,
            isloading,
            result,
            tempData,
            _args8 = arguments;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                context = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
                data = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                isloading = _args8.length > 2 ? _args8[2] : undefined;

                if (!(context.srfsessionkey && !Object.is(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME), 'undefined'))) {
                  _context8.next = 13;
                  break;
                }

                result = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME));
                tempData = [];

                if (!(result && result.length > 0)) {
                  _context8.next = 12;
                  break;
                }

                result.forEach(function (item) {
                  var singleData = {};

                  if (Object.is(item[_this3.APPDEKEY], data[_this3.APPDEKEY])) {
                    Object.keys(item).forEach(function (field) {
                      singleData[field] = data[field] ? data[field] : item[field];
                    });
                  }

                  if (Object.keys(singleData).length > 0) {
                    tempData.push(singleData);
                  } else {
                    tempData.push(item);
                  }
                });
                this.tempStorage.setItem(context.srfsessionkey + '_' + this.APPDENAME, JSON.stringify(tempData));
                return _context8.abrupt("return", {
                  "status": 200,
                  "data": data
                });

              case 12:
                return _context8.abrupt("return", {
                  "status": 500,
                  "data": null
                });

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function UpdateTemp() {
        return _UpdateTemp.apply(this, arguments);
      }

      return UpdateTemp;
    }()
    /**
     * RemoveTemp接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "RemoveTemp",
    value: function () {
      var _RemoveTemp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee9() {
        var _this4 = this;

        var context,
            data,
            isloading,
            result,
            tempResult,
            _args9 = arguments;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                context = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
                data = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                isloading = _args9.length > 2 ? _args9[2] : undefined;

                if (!(context.srfsessionkey && !Object.is(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME), 'undefined'))) {
                  _context9.next = 12;
                  break;
                }

                result = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME));

                if (!result) {
                  _context9.next = 11;
                  break;
                }

                tempResult = result.filter(function (item) {
                  return !(Object.is(item[_this4.APPDEKEY], data[_this4.APPDEKEY]) && Object.is(item[_this4.APPDETEXT], data[_this4.APPDETEXT]));
                });
                this.tempStorage.setItem(context.srfsessionkey + '_' + this.APPDENAME, JSON.stringify(tempResult));
                return _context9.abrupt("return", {
                  "status": 200,
                  "data": data
                });

              case 11:
                return _context9.abrupt("return", {
                  "status": 500,
                  "data": null
                });

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function RemoveTemp() {
        return _RemoveTemp.apply(this, arguments);
      }

      return RemoveTemp;
    }()
    /**
     * CheckKey接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "CheckKey",
    value: function () {
      var _CheckKey = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee10() {
        var _this5 = this;

        var context,
            data,
            isloading,
            result,
            flag,
            _args10 = arguments;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                context = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
                data = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
                isloading = _args10.length > 2 ? _args10[2] : undefined;

                if (!(context.srfsessionkey && !Object.is(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME), 'undefined'))) {
                  _context10.next = 12;
                  break;
                }

                result = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_' + this.APPDENAME));

                if (!result) {
                  _context10.next = 11;
                  break;
                }

                flag = false;
                result.forEach(function (item) {
                  if (Object.is(item[_this5.APPDEKEY], data[_this5.APPDEKEY])) {
                    flag = true;
                  }
                });
                return _context10.abrupt("return", {
                  "status": 200,
                  "data": flag
                });

              case 11:
                return _context10.abrupt("return", {
                  "status": 500,
                  "data": null
                });

              case 12:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function CheckKey() {
        return _CheckKey.apply(this, arguments);
      }

      return CheckKey;
    }()
    /**
     * GetDraft接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "GetDraft",
    value: function () {
      var _GetDraft = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee11() {
        var context,
            data,
            isloading,
            _args11 = arguments;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                context = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
                data = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
                isloading = _args11.length > 2 ? _args11[2] : undefined;
                return _context11.abrupt("return", this.GetDraftTemp(context, data, isloading));

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function GetDraft() {
        return _GetDraft.apply(this, arguments);
      }

      return GetDraft;
    }()
    /**
     * Remove接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "Remove",
    value: function () {
      var _Remove = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee12() {
        var context,
            data,
            isloading,
            _args12 = arguments;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                context = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
                data = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};
                isloading = _args12.length > 2 ? _args12[2] : undefined;
                return _context12.abrupt("return", this.RemoveTemp(context, data, isloading));

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function Remove() {
        return _Remove.apply(this, arguments);
      }

      return Remove;
    }()
    /**
     * CreateTempMajor接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "CreateTempMajor",
    value: function () {
      var _CreateTempMajor = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee13() {
        var context,
            data,
            isloading,
            _args13 = arguments;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                context = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
                data = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};
                isloading = _args13.length > 2 ? _args13[2] : undefined;
                return _context13.abrupt("return", this.Create(context, data, isloading));

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function CreateTempMajor() {
        return _CreateTempMajor.apply(this, arguments);
      }

      return CreateTempMajor;
    }()
    /**
     * RemoveTempMajor接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "RemoveTempMajor",
    value: function () {
      var _RemoveTempMajor = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee14() {
        var context,
            data,
            isloading,
            _args14 = arguments;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                context = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
                data = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};
                isloading = _args14.length > 2 ? _args14[2] : undefined;
                return _context14.abrupt("return", this.Remove(context, data, isloading));

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function RemoveTempMajor() {
        return _RemoveTempMajor.apply(this, arguments);
      }

      return RemoveTempMajor;
    }()
    /**
     * Get接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "Get",
    value: function () {
      var _Get = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee15() {
        var context,
            data,
            isloading,
            _args15 = arguments;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                context = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};
                data = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                isloading = _args15.length > 2 ? _args15[2] : undefined;
                return _context15.abrupt("return", this.GetTemp(context, data, isloading));

              case 4:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function Get() {
        return _Get.apply(this, arguments);
      }

      return Get;
    }()
    /**
     * GetDraftTempMajor接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "GetDraftTempMajor",
    value: function () {
      var _GetDraftTempMajor = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee16() {
        var context,
            data,
            isloading,
            _args16 = arguments;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                context = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};
                data = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {};
                isloading = _args16.length > 2 ? _args16[2] : undefined;
                return _context16.abrupt("return", this.GetDraft(context, data, isloading));

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function GetDraftTempMajor() {
        return _GetDraftTempMajor.apply(this, arguments);
      }

      return GetDraftTempMajor;
    }()
    /**
     * Create接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "Create",
    value: function () {
      var _Create = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee17() {
        var context,
            data,
            isloading,
            _args17 = arguments;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                context = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};
                data = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};
                isloading = _args17.length > 2 ? _args17[2] : undefined;
                return _context17.abrupt("return", this.CreateTemp(context, data, isloading));

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function Create() {
        return _Create.apply(this, arguments);
      }

      return Create;
    }()
    /**
     * GetTempMajor接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "GetTempMajor",
    value: function () {
      var _GetTempMajor = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee18() {
        var context,
            data,
            isloading,
            _args18 = arguments;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                context = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};
                data = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {};
                isloading = _args18.length > 2 ? _args18[2] : undefined;
                return _context18.abrupt("return", this.Get(context, data, isloading));

              case 4:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function GetTempMajor() {
        return _GetTempMajor.apply(this, arguments);
      }

      return GetTempMajor;
    }()
    /**
     * GetDraftTemp接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "GetDraftTemp",
    value: function () {
      var _GetDraftTemp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee19() {
        var context,
            data,
            isloading,
            tempData,
            _args19 = arguments;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                context = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};
                data = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};
                isloading = _args19.length > 2 ? _args19[2] : undefined;
                tempData = {
                  srfsessionkey: context.srfsessionkey
                };
                Object.defineProperty(tempData, this.APPDEKEY, {
                  enumerable: true,
                  value: data[this.APPDEKEY]
                });
                Object.assign(data, tempData);
                return _context19.abrupt("return", {
                  "status": 200,
                  "data": data
                });

              case 7:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function GetDraftTemp() {
        return _GetDraftTemp.apply(this, arguments);
      }

      return GetDraftTemp;
    }()
    /**
     * FetchDefault接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FetchDefault",
    value: function () {
      var _FetchDefault = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee20() {
        var context,
            data,
            isloading,
            _args20 = arguments;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                context = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : {};
                data = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : {};
                isloading = _args20.length > 2 ? _args20[2] : undefined;
                return _context20.abrupt("return", {
                  status: 500,
                  data: {
                    title: '失败',
                    message: '预置实体行为 FetchDefault 未实现'
                  }
                });

              case 4:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }));

      function FetchDefault() {
        return _FetchDefault.apply(this, arguments);
      }

      return FetchDefault;
    }()
    /**
     * FetchTempDefault接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FetchTempDefault",
    value: function () {
      var _FetchTempDefault = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee21() {
        var context,
            data,
            isloading,
            _args21 = arguments;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                context = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : {};
                data = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : {};
                isloading = _args21.length > 2 ? _args21[2] : undefined;
                return _context21.abrupt("return", {
                  status: 500,
                  data: {
                    title: '失败',
                    message: '预置实体行为 FetchDefault 未实现'
                  }
                });

              case 4:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }));

      function FetchTempDefault() {
        return _FetchTempDefault.apply(this, arguments);
      }

      return FetchTempDefault;
    }()
    /**
     * FilterUpdate接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FilterUpdate",
    value: function () {
      var _FilterUpdate = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee22() {
        var context,
            data,
            isloading,
            _args22 = arguments;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                context = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};
                data = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : {};
                isloading = _args22.length > 2 ? _args22[2] : undefined;
                return _context22.abrupt("return", this.Update(context, data, isloading));

              case 4:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function FilterUpdate() {
        return _FilterUpdate.apply(this, arguments);
      }

      return FilterUpdate;
    }()
    /**
     * FilterSearch接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FilterSearch",
    value: function () {
      var _FilterSearch = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee23() {
        var context,
            data,
            isloading,
            _args23 = arguments;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                context = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};
                data = _args23.length > 1 && _args23[1] !== undefined ? _args23[1] : {};
                isloading = _args23.length > 2 ? _args23[2] : undefined;
                return _context23.abrupt("return", this.FetchDefault(context, data, isloading));

              case 4:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function FilterSearch() {
        return _FilterSearch.apply(this, arguments);
      }

      return FilterSearch;
    }()
    /**
     * FilterGet接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FilterGet",
    value: function () {
      var _FilterGet = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee24() {
        var context,
            data,
            isloading,
            _args24 = arguments;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                context = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};
                data = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : {};
                isloading = _args24.length > 2 ? _args24[2] : undefined;
                return _context24.abrupt("return", this.Get(context, data, isloading));

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function FilterGet() {
        return _FilterGet.apply(this, arguments);
      }

      return FilterGet;
    }()
    /**
     * FilterCreate接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FilterCreate",
    value: function () {
      var _FilterCreate = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee25() {
        var context,
            data,
            isloading,
            _args25 = arguments;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                context = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};
                data = _args25.length > 1 && _args25[1] !== undefined ? _args25[1] : {};
                isloading = _args25.length > 2 ? _args25[2] : undefined;
                return _context25.abrupt("return", this.Create(context, data, isloading));

              case 4:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function FilterCreate() {
        return _FilterCreate.apply(this, arguments);
      }

      return FilterCreate;
    }()
    /**
     * FilterGetDraft接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FilterGetDraft",
    value: function () {
      var _FilterGetDraft = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee26() {
        var context,
            data,
            isloading,
            _args26 = arguments;
        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                context = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};
                data = _args26.length > 1 && _args26[1] !== undefined ? _args26[1] : {};
                isloading = _args26.length > 2 ? _args26[2] : undefined;
                return _context26.abrupt("return", this.GetDraft(context, data, isloading));

              case 4:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function FilterGetDraft() {
        return _FilterGetDraft.apply(this, arguments);
      }

      return FilterGetDraft;
    }()
    /**
     * FilterRemove接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FilterRemove",
    value: function () {
      var _FilterRemove = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee27() {
        var context,
            data,
            isloading,
            _args27 = arguments;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                context = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};
                data = _args27.length > 1 && _args27[1] !== undefined ? _args27[1] : {};
                isloading = _args27.length > 2 ? _args27[2] : undefined;
                return _context27.abrupt("return", this.Remove(context, data, isloading));

              case 4:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function FilterRemove() {
        return _FilterRemove.apply(this, arguments);
      }

      return FilterRemove;
    }()
    /**
     * FilterFetch接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "FilterFetch",
    value: function () {
      var _FilterFetch = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee28() {
        var context,
            data,
            isloading,
            _args28 = arguments;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                context = _args28.length > 0 && _args28[0] !== undefined ? _args28[0] : {};
                data = _args28.length > 1 && _args28[1] !== undefined ? _args28[1] : {};
                isloading = _args28.length > 2 ? _args28[2] : undefined;
                return _context28.abrupt("return", this.FetchDefault(context, data, isloading));

              case 4:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function FilterFetch() {
        return _FilterFetch.apply(this, arguments);
      }

      return FilterFetch;
    }()
    /**
     * ImportData接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "ImportData",
    value: function () {
      var _ImportData = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee29() {
        var context,
            data,
            isloading,
            _args29 = arguments;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                context = _args29.length > 0 && _args29[0] !== undefined ? _args29[0] : {};
                data = _args29.length > 1 && _args29[1] !== undefined ? _args29[1] : {};
                isloading = _args29.length > 2 ? _args29[2] : undefined;
                return _context29.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/import"), data, isloading));

              case 4:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function ImportData() {
        return _ImportData.apply(this, arguments);
      }

      return ImportData;
    }()
    /**
     * createBatch接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "createBatch",
    value: function () {
      var _createBatch = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee30() {
        var context,
            data,
            isloading,
            _args30 = arguments;
        return regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                context = _args30.length > 0 && _args30[0] !== undefined ? _args30[0] : {};
                data = _args30.length > 1 ? _args30[1] : undefined;
                isloading = _args30.length > 2 ? _args30[2] : undefined;
                return _context30.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/batch"), data, isloading));

              case 4:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));

      function createBatch() {
        return _createBatch.apply(this, arguments);
      }

      return createBatch;
    }()
    /**
     * updateBatch接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "updateBatch",
    value: function () {
      var _updateBatch = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee31() {
        var context,
            data,
            isloading,
            _args31 = arguments;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                context = _args31.length > 0 && _args31[0] !== undefined ? _args31[0] : {};
                data = _args31.length > 1 ? _args31[1] : undefined;
                isloading = _args31.length > 2 ? _args31[2] : undefined;
                return _context31.abrupt("return", Http.getInstance().put("/".concat(this.APPDENAME, "/batch"), data, isloading));

              case 4:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function updateBatch() {
        return _updateBatch.apply(this, arguments);
      }

      return updateBatch;
    }()
    /**
     * removeBatch接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "removeBatch",
    value: function () {
      var _removeBatch = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee32() {
        var context,
            data,
            isloading,
            _args32 = arguments;
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                context = _args32.length > 0 && _args32[0] !== undefined ? _args32[0] : {};
                data = _args32.length > 1 ? _args32[1] : undefined;
                isloading = _args32.length > 2 ? _args32[2] : undefined;
                return _context32.abrupt("return", Http.getInstance()["delete"]("/".concat(this.APPDENAME, "/batch"), isloading, data[this.APPDEKEY]));

              case 4:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      function removeBatch() {
        return _removeBatch.apply(this, arguments);
      }

      return removeBatch;
    }()
    /**
     * getDataInfo接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "getDataInfo",
    value: function () {
      var _getDataInfo = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee33() {
        var context,
            data,
            isloading,
            _args33 = arguments;
        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                context = _args33.length > 0 && _args33[0] !== undefined ? _args33[0] : {};
                data = _args33.length > 1 ? _args33[1] : undefined;
                isloading = _args33.length > 2 ? _args33[2] : undefined;

                if (!context[this.APPLYDEKEY]) {
                  _context33.next = 5;
                  break;
                }

                return _context33.abrupt("return", this.Get(context, data, isloading));

              case 5:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function getDataInfo() {
        return _getDataInfo.apply(this, arguments);
      }

      return getDataInfo;
    }()
    /**
     * getDynaModel(获取动态模型)接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "getDynaModel",
    value: function () {
      var _getDynaModel = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee34() {
        var context,
            data,
            isloading,
            _args34 = arguments;
        return regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                context = _args34.length > 0 && _args34[0] !== undefined ? _args34[0] : {};
                data = _args34.length > 1 ? _args34[1] : undefined;
                isloading = _args34.length > 2 ? _args34[2] : undefined;

                if (!(data && data.configType && data.targetType)) {
                  _context34.next = 5;
                  break;
                }

                return _context34.abrupt("return", Http.getInstance().get("/configs/".concat(data.configType, "/").concat(data.targetType)));

              case 5:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34);
      }));

      function getDynaModel() {
        return _getDynaModel.apply(this, arguments);
      }

      return getDynaModel;
    }()
    /**
     * setDynaModel(设置动态模型)接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "setDynaModel",
    value: function () {
      var _setDynaModel = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee35() {
        var context,
            data,
            isloading,
            _args35 = arguments;
        return regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                context = _args35.length > 0 && _args35[0] !== undefined ? _args35[0] : {};
                data = _args35.length > 1 ? _args35[1] : undefined;
                isloading = _args35.length > 2 ? _args35[2] : undefined;

                if (!(data && data.configType && data.targetType)) {
                  _context35.next = 5;
                  break;
                }

                return _context35.abrupt("return", Http.getInstance().put("/configs/".concat(data.configType, "/").concat(data.targetType), {
                  model: data.model
                }));

              case 5:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35);
      }));

      function setDynaModel() {
        return _setDynaModel.apply(this, arguments);
      }

      return setDynaModel;
    }()
    /**
     * WFStart接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @param {*} [localdata]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFStart",
    value: function () {
      var _WFStart = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee36() {
        var context,
            data,
            isloading,
            localdata,
            requestData,
            _requestData,
            _args36 = arguments;

        return regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                context = _args36.length > 0 && _args36[0] !== undefined ? _args36[0] : {};
                data = _args36.length > 1 && _args36[1] !== undefined ? _args36[1] : {};
                isloading = _args36.length > 2 ? _args36[2] : undefined;
                localdata = _args36.length > 3 ? _args36[3] : undefined;

                if (!(localdata && Object.keys(localdata).length > 0)) {
                  _context36.next = 11;
                  break;
                }

                requestData = {};
                Object.assign(requestData, {
                  activedata: data
                });
                Object.assign(requestData, localdata);
                return _context36.abrupt("return", Http.getInstance().post("/wfcore/".concat(this.SYSTEMNAME, "-app-").concat(this.APPNAME, "/").concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/process-instances"), requestData, isloading));

              case 11:
                _requestData = {};
                Object.assign(_requestData, {
                  wfdata: data
                });
                return _context36.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/wfstart"), _requestData, isloading));

              case 14:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function WFStart() {
        return _WFStart.apply(this, arguments);
      }

      return WFStart;
    }()
    /**
     * WFClose接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFClose",
    value: function () {
      var _WFClose = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee37() {
        var context,
            data,
            isloading,
            _args37 = arguments;
        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                context = _args37.length > 0 && _args37[0] !== undefined ? _args37[0] : {};
                data = _args37.length > 1 && _args37[1] !== undefined ? _args37[1] : {};
                isloading = _args37.length > 2 ? _args37[2] : undefined;
                return _context37.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/wfclose"), data, isloading));

              case 4:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function WFClose() {
        return _WFClose.apply(this, arguments);
      }

      return WFClose;
    }()
    /**
     * WFMarkRead接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFMarkRead",
    value: function () {
      var _WFMarkRead = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee38() {
        var context,
            data,
            isloading,
            _args38 = arguments;
        return regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                context = _args38.length > 0 && _args38[0] !== undefined ? _args38[0] : {};
                data = _args38.length > 1 && _args38[1] !== undefined ? _args38[1] : {};
                isloading = _args38.length > 2 ? _args38[2] : undefined;
                return _context38.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/wfmarkread"), data, isloading));

              case 4:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function WFMarkRead() {
        return _WFMarkRead.apply(this, arguments);
      }

      return WFMarkRead;
    }()
    /**
     * WFGoto接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFGoto",
    value: function () {
      var _WFGoto = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee39() {
        var context,
            data,
            isloading,
            _args39 = arguments;
        return regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                context = _args39.length > 0 && _args39[0] !== undefined ? _args39[0] : {};
                data = _args39.length > 1 && _args39[1] !== undefined ? _args39[1] : {};
                isloading = _args39.length > 2 ? _args39[2] : undefined;
                return _context39.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/wfgoto"), data, isloading));

              case 4:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));

      function WFGoto() {
        return _WFGoto.apply(this, arguments);
      }

      return WFGoto;
    }()
    /**
     * WFRollback接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFRollback",
    value: function () {
      var _WFRollback = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee40() {
        var context,
            data,
            isloading,
            _args40 = arguments;
        return regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                context = _args40.length > 0 && _args40[0] !== undefined ? _args40[0] : {};
                data = _args40.length > 1 && _args40[1] !== undefined ? _args40[1] : {};
                isloading = _args40.length > 2 ? _args40[2] : undefined;
                return _context40.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/wfrollback"), data, isloading));

              case 4:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));

      function WFRollback() {
        return _WFRollback.apply(this, arguments);
      }

      return WFRollback;
    }()
    /**
     * WFRestart接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFRestart",
    value: function () {
      var _WFRestart = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee41() {
        var context,
            data,
            isloading,
            _args41 = arguments;
        return regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                context = _args41.length > 0 && _args41[0] !== undefined ? _args41[0] : {};
                data = _args41.length > 1 && _args41[1] !== undefined ? _args41[1] : {};
                isloading = _args41.length > 2 ? _args41[2] : undefined;
                return _context41.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/wfrestart"), data, isloading));

              case 4:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));

      function WFRestart() {
        return _WFRestart.apply(this, arguments);
      }

      return WFRestart;
    }()
    /**
     * WFReassign接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFReassign",
    value: function () {
      var _WFReassign = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee42() {
        var context,
            data,
            isloading,
            _args42 = arguments;
        return regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                context = _args42.length > 0 && _args42[0] !== undefined ? _args42[0] : {};
                data = _args42.length > 1 && _args42[1] !== undefined ? _args42[1] : {};
                isloading = _args42.length > 2 ? _args42[2] : undefined;
                return _context42.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/wfreassign"), data, isloading));

              case 4:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));

      function WFReassign() {
        return _WFReassign.apply(this, arguments);
      }

      return WFReassign;
    }()
    /**
     * WFGetWorkFlow接口方法(获取工作流定义)
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFGetWorkFlow",
    value: function () {
      var _WFGetWorkFlow = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee43() {
        var context,
            data,
            isloading,
            _args43 = arguments;
        return regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                context = _args43.length > 0 && _args43[0] !== undefined ? _args43[0] : {};
                data = _args43.length > 1 && _args43[1] !== undefined ? _args43[1] : {};
                isloading = _args43.length > 2 ? _args43[2] : undefined;
                return _context43.abrupt("return", Http.getInstance().get("/wfcore/".concat(this.SYSTEMNAME, "-app-").concat(this.APPNAME, "/").concat(this.APPDENAME, "/process-definitions")));

              case 4:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));

      function WFGetWorkFlow() {
        return _WFGetWorkFlow.apply(this, arguments);
      }

      return WFGetWorkFlow;
    }()
    /**
     * WFGetWFStep接口方法(根据系统实体查找当前适配的工作流模型步骤)
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFGetWFStep",
    value: function () {
      var _WFGetWFStep = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee44() {
        var context,
            data,
            isloading,
            _args44 = arguments;
        return regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                context = _args44.length > 0 && _args44[0] !== undefined ? _args44[0] : {};
                data = _args44.length > 1 && _args44[1] !== undefined ? _args44[1] : {};
                isloading = _args44.length > 2 ? _args44[2] : undefined;
                return _context44.abrupt("return", Http.getInstance().get("/wfcore/".concat(this.SYSTEMNAME, "-app-").concat(this.APPNAME, "/").concat(this.APPDENAME, "/process-definitions-nodes")));

              case 4:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));

      function WFGetWFStep() {
        return _WFGetWFStep.apply(this, arguments);
      }

      return WFGetWFStep;
    }()
    /**
     * GetWFLink接口方法(根据业务主键和当前步骤获取操作路径)
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "GetWFLink",
    value: function () {
      var _GetWFLink = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee45() {
        var context,
            data,
            isloading,
            _args45 = arguments;
        return regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                context = _args45.length > 0 && _args45[0] !== undefined ? _args45[0] : {};
                data = _args45.length > 1 && _args45[1] !== undefined ? _args45[1] : {};
                isloading = _args45.length > 2 ? _args45[2] : undefined;
                return _context45.abrupt("return", Http.getInstance().get("/wfcore/".concat(this.SYSTEMNAME, "-app-").concat(this.APPNAME, "/").concat(this.APPDENAME, "/").concat(context[this.APPLYDEKEY], "/usertasks/").concat(data['taskDefinitionKey'], "/ways")));

              case 4:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      function GetWFLink() {
        return _GetWFLink.apply(this, arguments);
      }

      return GetWFLink;
    }()
    /**
     * GetWFHistory接口方法(根据业务主键获取工作流程记录)
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "GetWFHistory",
    value: function () {
      var _GetWFHistory = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee46() {
        var context,
            data,
            isloading,
            _args46 = arguments;
        return regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                context = _args46.length > 0 && _args46[0] !== undefined ? _args46[0] : {};
                data = _args46.length > 1 && _args46[1] !== undefined ? _args46[1] : {};
                isloading = _args46.length > 2 ? _args46[2] : undefined;
                return _context46.abrupt("return", Http.getInstance().get("/wfcore/".concat(this.SYSTEMNAME, "-app-").concat(this.APPNAME, "/").concat(this.APPDENAME, "/").concat(context[this.APPLYDEKEY], "/process-instances/alls/history")));

              case 4:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, this);
      }));

      function GetWFHistory() {
        return _GetWFHistory.apply(this, arguments);
      }

      return GetWFHistory;
    }()
    /**
     * WFSubmit接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @param {*} [localdata]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFSubmit",
    value: function () {
      var _WFSubmit = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee47() {
        var context,
            data,
            isloading,
            localdata,
            requestData,
            _requestData2,
            _args47 = arguments;

        return regeneratorRuntime.wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                context = _args47.length > 0 && _args47[0] !== undefined ? _args47[0] : {};
                data = _args47.length > 1 && _args47[1] !== undefined ? _args47[1] : {};
                isloading = _args47.length > 2 ? _args47[2] : undefined;
                localdata = _args47.length > 3 ? _args47[3] : undefined;

                if (!(localdata && Object.keys(localdata).length > 0)) {
                  _context47.next = 12;
                  break;
                }

                requestData = {};

                if (data.viewparams) {
                  delete data.viewparams;
                }

                Object.assign(requestData, {
                  activedata: data
                });
                Object.assign(requestData, localdata);
                return _context47.abrupt("return", Http.getInstance().post("/wfcore/".concat(this.SYSTEMNAME, "-app-").concat(this.APPNAME, "/").concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/tasks/").concat(localdata['taskId']), requestData, isloading));

              case 12:
                _requestData2 = {};

                if (data.srfwfmemo) {
                  _requestData2.srfwfmemo = JSON.parse(JSON.stringify(data)).srfwfmemo;
                  delete data.srfwfmemo;
                }

                if (data.viewparams) {
                  delete data.viewparams;
                }

                Object.assign(_requestData2, {
                  wfdata: data
                });
                Object.assign(_requestData2, {
                  opdata: {
                    srfwfiatag: context.srfwfiatag,
                    srfwfstep: context.srfwfstep
                  }
                });
                return _context47.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/wfsubmit"), _requestData2, isloading));

              case 18:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47, this);
      }));

      function WFSubmit() {
        return _WFSubmit.apply(this, arguments);
      }

      return WFSubmit;
    }()
    /**
     * WFGetProxyData接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof EntityService
     */

  }, {
    key: "WFGetProxyData",
    value: function () {
      var _WFGetProxyData = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee48() {
        var context,
            data,
            isloading,
            _args48 = arguments;
        return regeneratorRuntime.wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                context = _args48.length > 0 && _args48[0] !== undefined ? _args48[0] : {};
                data = _args48.length > 1 && _args48[1] !== undefined ? _args48[1] : {};
                isloading = _args48.length > 2 ? _args48[2] : undefined;
                return _context48.abrupt("return", Http.getInstance().get("/".concat(this.APPDENAME, "/").concat(context[this.APPLYDEKEY], "/wfgetproxydata"), data, isloading));

              case 4:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));

      function WFGetProxyData() {
        return _WFGetProxyData.apply(this, arguments);
      }

      return WFGetProxyData;
    }()
    /**
     * 测试数据是否在工作流中
     *
     * @param context
     * @param data
     * @param isloading
     */

  }, {
    key: "testDataInWF",
    value: function () {
      var _testDataInWF = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee49() {
        var context,
            data,
            isloading,
            _args49 = arguments;
        return regeneratorRuntime.wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                context = _args49.length > 0 && _args49[0] !== undefined ? _args49[0] : {};
                data = _args49.length > 1 && _args49[1] !== undefined ? _args49[1] : {};
                isloading = _args49.length > 2 ? _args49[2] : undefined;

                if (!(!context.stateField || !context.stateValue)) {
                  _context49.next = 5;
                  break;
                }

                return _context49.abrupt("return", false);

              case 5:
                if (!(context.stateValue == data[context.stateField])) {
                  _context49.next = 7;
                  break;
                }

                return _context49.abrupt("return", true);

              case 7:
                return _context49.abrupt("return", false);

              case 8:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49);
      }));

      function testDataInWF() {
        return _testDataInWF.apply(this, arguments);
      }

      return testDataInWF;
    }()
    /**
     * 测试当前用户是否提交过工作流
     *
     * @param context
     * @param data
     * @param isloading
     */

  }, {
    key: "testUserWFSubmit",
    value: function () {
      var _testUserWFSubmit = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee50() {
        var context,
            data,
            isloading,
            _args50 = arguments;
        return regeneratorRuntime.wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                context = _args50.length > 0 && _args50[0] !== undefined ? _args50[0] : {};
                data = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};
                isloading = _args50.length > 2 ? _args50[2] : undefined;
                return _context50.abrupt("return", true);

              case 4:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50);
      }));

      function testUserWFSubmit() {
        return _testUserWFSubmit.apply(this, arguments);
      }

      return testUserWFSubmit;
    }()
    /**
     * 测试当前用户是否存在待办列表
     *
     * @param context
     * @param data
     * @param isloading
     */

  }, {
    key: "testUserExistWorklist",
    value: function () {
      var _testUserExistWorklist = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee51() {
        var context,
            data,
            isloading,
            requestData,
            _args51 = arguments;
        return regeneratorRuntime.wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                context = _args51.length > 0 && _args51[0] !== undefined ? _args51[0] : {};
                data = _args51.length > 1 && _args51[1] !== undefined ? _args51[1] : {};
                isloading = _args51.length > 2 ? _args51[2] : undefined;
                requestData = {};
                Object.assign(requestData, {
                  wfdata: data
                });
                return _context51.abrupt("return", Http.getInstance().post("/".concat(this.APPDENAME, "/").concat(data[this.APPDEKEY], "/testuserexistworklist"), requestData, isloading));

              case 6:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51, this);
      }));

      function testUserExistWorklist() {
        return _testUserExistWorklist.apply(this, arguments);
      }

      return testUserExistWorklist;
    }()
    /**
     * 获取所有应用数据
     *
     * @param context
     * @param data
     * @param isloading
     */

  }, {
    key: "getAllApp",
    value: function () {
      var _getAllApp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee52() {
        var context,
            data,
            isloading,
            _args52 = arguments;
        return regeneratorRuntime.wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                context = _args52.length > 0 && _args52[0] !== undefined ? _args52[0] : {};
                data = _args52.length > 1 && _args52[1] !== undefined ? _args52[1] : {};
                isloading = _args52.length > 2 ? _args52[2] : undefined;
                return _context52.abrupt("return", Http.getInstance().get("uaa/access-center/app-switcher/default", data, isloading));

              case 4:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52);
      }));

      function getAllApp() {
        return _getAllApp.apply(this, arguments);
      }

      return getAllApp;
    }()
    /**
     * 更新已选择的应用
     *
     * @param context
     * @param data
     * @param isloading
     */

  }, {
    key: "updateChooseApp",
    value: function () {
      var _updateChooseApp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee53() {
        var context,
            data,
            isloading,
            _args53 = arguments;
        return regeneratorRuntime.wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                context = _args53.length > 0 && _args53[0] !== undefined ? _args53[0] : {};
                data = _args53.length > 1 && _args53[1] !== undefined ? _args53[1] : {};
                isloading = _args53.length > 2 ? _args53[2] : undefined;
                return _context53.abrupt("return", Http.getInstance().put("uaa/access-center/app-switcher/default", data, isloading));

              case 4:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53);
      }));

      function updateChooseApp() {
        return _updateChooseApp.apply(this, arguments);
      }

      return updateChooseApp;
    }()
  }]);

  return EntityService;
}();

export { EntityService as default };"},null]}
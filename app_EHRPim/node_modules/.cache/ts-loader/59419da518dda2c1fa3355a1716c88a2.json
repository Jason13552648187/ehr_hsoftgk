{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-archives\\pim-archives-ui-service-base.ts","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-archives\\pim-archives-ui-service-base.ts","mtime":1630509410752},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICdAL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudCc7CmltcG9ydCB7IFVJQWN0aW9uVG9vbCwgVXRpbCB9IGZyb20gJ0AvdXRpbHMnOwppbXBvcnQgVUlTZXJ2aWNlIGZyb20gJy4uL3VpLXNlcnZpY2UnOwppbXBvcnQgUGltQXJjaGl2ZXNTZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9waW0tYXJjaGl2ZXMvcGltLWFyY2hpdmVzLXNlcnZpY2UnOwovKioNCiAqIOaho+ahiOS/oeaBr1VJ5pyN5Yqh5a+56LGh5Z+657G7DQogKg0KICogQGV4cG9ydA0KICogQGNsYXNzIFBpbUFyY2hpdmVzVUlTZXJ2aWNlQmFzZQ0KICovCgp2YXIgUGltQXJjaGl2ZXNVSVNlcnZpY2VCYXNlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1VJU2VydmljZSkgewogIF9pbmhlcml0cyhQaW1BcmNoaXZlc1VJU2VydmljZUJhc2UsIF9VSVNlcnZpY2UpOwoKICAvKioNCiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiAgUGltQXJjaGl2ZXNVSVNlcnZpY2VCYXNlLg0KICAgKg0KICAgKiBAcGFyYW0geyp9IFtvcHRzPXt9XQ0KICAgKiBAbWVtYmVyb2YgIFBpbUFyY2hpdmVzVUlTZXJ2aWNlQmFzZQ0KICAgKi8KICBmdW5jdGlvbiBQaW1BcmNoaXZlc1VJU2VydmljZUJhc2UoKSB7CiAgICB2YXIgX3RoaXMyOwoKICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGltQXJjaGl2ZXNVSVNlcnZpY2VCYXNlKTsKCiAgICBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUGltQXJjaGl2ZXNVSVNlcnZpY2VCYXNlKS5jYWxsKHRoaXMsIG9wdHMpKTsKICAgIC8qKg0KICAgICAqIOaYr+WQpuaUr+aMgeW3peS9nOa1gQ0KICAgICAqDQogICAgICogQG1lbWJlcm9mICBQaW1BcmNoaXZlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuaXNFbmFibGVXb3JrZmxvdyA9IGZhbHNlOwogICAgLyoqDQogICAgICog5b2T5YmNVUnmnI3liqHlr7nlupTnmoTmlbDmja7mnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQXJjaGl2ZXNVSVNlcnZpY2VCYXNlDQogICAgICovCgogICAgX3RoaXMyLmRhdGFTZXJ2aWNlID0gbmV3IFBpbUFyY2hpdmVzU2VydmljZSgpOwogICAgLyoqDQogICAgICog5omA5pyJ5YWz6IGU6KeG5Zu+DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUFyY2hpdmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5hbGxWaWV3TWFwID0gbmV3IE1hcCgpOwogICAgLyoqDQogICAgICog54q25oCB5YC8DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUFyY2hpdmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5zdGF0ZVZhbHVlID0gMDsKICAgIC8qKg0KICAgICAqIOeKtuaAgeWxnuaApw0KICAgICAqDQogICAgICogQG1lbWJlcm9mICBQaW1BcmNoaXZlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuc3RhdGVGaWVsZCA9ICIiOwogICAgLyoqDQogICAgICog5Li754q25oCB5bGe5oCn6ZuG5ZCIDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUFyY2hpdmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5tYWluU3RhdGVGaWVsZHMgPSBbXTsKICAgIC8qKg0KICAgICAqIOS4u+eKtuaAgembhuWQiE1hcA0KICAgICAqDQogICAgICogQG1lbWJlcm9mICBQaW1BcmNoaXZlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuYWxsRGVNYWluU3RhdGVNYXAgPSBuZXcgTWFwKCk7CgogICAgX3RoaXMyLmluaXRWaWV3TWFwKCk7CgogICAgX3RoaXMyLmluaXREZU1haW5TdGF0ZU1hcCgpOwoKICAgIHJldHVybiBfdGhpczI7CiAgfQogIC8qKg0KICAgKiDliJ3lp4vljJbop4blm75NYXANCiAgICoNCiAgICogQG1lbWJlcm9mICBQaW1BcmNoaXZlc1VJU2VydmljZUJhc2UNCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoUGltQXJjaGl2ZXNVSVNlcnZpY2VCYXNlLCBbewogICAga2V5OiAiaW5pdFZpZXdNYXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRWaWV3TWFwKCkgewogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnbG95ZWVub2ZpbGVncmlkdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1hcmNoaXZlcycKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJ1JFRElSRUNUVklFVzonLCB7CiAgICAgICAgdmlld25hbWU6ICdyZWRpcmVjdHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJjaGl2ZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnYWRtaW5lZGl0dmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1hcmNoaXZlcycKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdhcmNoaXZlc3JlY29yZGVkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFyY2hpdmVzJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ25vdG91dGVkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFyY2hpdmVzJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnTURBVEFWSUVXOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2dyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFyY2hpdmVzJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2dyZWRpdHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJjaGl2ZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCdFRElUVklFVzonLCB7CiAgICAgICAgdmlld25hbWU6ICdlZGl0dmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1hcmNoaXZlcycKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdub2xveWVlbm9maWxlZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJjaGl2ZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnbm90b3V0Z3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJjaGl2ZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnZ3JwaW1kYW5nYWdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFyY2hpdmVzJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnUElDS1VQVklFVzonLCB7CiAgICAgICAgdmlld25hbWU6ICdwaWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFyY2hpdmVzJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3RyZWVleHB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFyY2hpdmVzJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3BpbWRhbmdhZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJjaGl2ZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCdNUElDS1VQVklFVzonLCB7CiAgICAgICAgdmlld25hbWU6ICdtcGlja3VwdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1hcmNoaXZlcycKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdlZGl0dmlldzInLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJjaGl2ZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAncGlja3VwZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJjaGl2ZXMnCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5Yid5aeL5YyW5Li754q25oCB6ZuG5ZCIDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUFyY2hpdmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpbml0RGVNYWluU3RhdGVNYXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXREZU1haW5TdGF0ZU1hcCgpIHt9CiAgICAvKioNCiAgICAgKiDosIPlh7rmoaPmoYgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3Mg5b2T5YmN5pWw5o2uDQogICAgICogQHBhcmFtIHthbnl9IGNvbnRleHQg6KGM5Li66ZmE5Yqg5LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zXSDpmYTliqDlj4LmlbANCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdIOS6i+S7tua6kA0KICAgICAqIEBwYXJhbSB7Kn0gW3hEYXRhXSAg5omn6KGM6KGM5Li65omA6ZyA5b2T5YmN6YOo5Lu2DQogICAgICogQHBhcmFtIHsqfSBbYWN0aW9uQ29udGV4dF0gIOaJp+ihjOihjOS4uuS4iuS4i+aWhw0KICAgICAqIEBwYXJhbSB7Kn0gW3NyZlBhcmVudERlTmFtZV0g54i25a6e5L2T5ZCN56ewDQogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiUGltQXJjaGl2ZXNfRENEQVRDSyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX1BpbUFyY2hpdmVzX0RDREFUQ0sgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGFyZ3MpIHsKICAgICAgICB2YXIgY29udGV4dCwKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICAkZXZlbnQsCiAgICAgICAgICAgIHhEYXRhLAogICAgICAgICAgICBhY3Rpb25Db250ZXh0LAogICAgICAgICAgICBzcmZQYXJlbnREZU5hbWUsCiAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgIHBhcmVudENvbnRleHQsCiAgICAgICAgICAgIHBhcmVudFZpZXdQYXJhbSwKICAgICAgICAgICAgX3RoaXMsCiAgICAgICAgICAgIF9hcmdzLAogICAgICAgICAgICBhY3Rpb25UYXJnZXQsCiAgICAgICAgICAgIHBhcmVudE9iaiwKICAgICAgICAgICAgZGVSZXNQYXJhbWV0ZXJzLAogICAgICAgICAgICBwYXJhbWV0ZXJzLAogICAgICAgICAgICBvcGVuSW5kZXhWaWV3VGFiLAogICAgICAgICAgICBfYXJnczIgPSBhcmd1bWVudHM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBfYXJnczIubGVuZ3RoID4gMSAmJiBfYXJnczJbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlsxXSA6IHt9OwogICAgICAgICAgICAgICAgcGFyYW1zID0gX2FyZ3MyLmxlbmd0aCA+IDIgJiYgX2FyZ3MyWzJdICE9PSB1bmRlZmluZWQgPyBfYXJnczJbMl0gOiB7fTsKICAgICAgICAgICAgICAgICRldmVudCA9IF9hcmdzMi5sZW5ndGggPiAzID8gX2FyZ3MyWzNdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgeERhdGEgPSBfYXJnczIubGVuZ3RoID4gNCA/IF9hcmdzMls0XSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGFjdGlvbkNvbnRleHQgPSBfYXJnczIubGVuZ3RoID4gNSA/IF9hcmdzMls1XSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHNyZlBhcmVudERlTmFtZSA9IF9hcmdzMi5sZW5ndGggPiA2ID8gX2FyZ3MyWzZdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgZGF0YSA9IHt9OwogICAgICAgICAgICAgICAgcGFyZW50Q29udGV4dCA9IHt9OwogICAgICAgICAgICAgICAgcGFyZW50Vmlld1BhcmFtID0ge307CiAgICAgICAgICAgICAgICBfdGhpcyA9IGFjdGlvbkNvbnRleHQ7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgewogICAgICAgICAgICAgICAgICBhcmNoaXZlYWN0aW9uOiAiRENEQVRDSyIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2FyZ3MgPSBVdGlsLmRlZXBDb3B5KGFyZ3MpOwogICAgICAgICAgICAgICAgYWN0aW9uVGFyZ2V0ID0gJ1NJTkdMRUtFWSc7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHsKICAgICAgICAgICAgICAgICAgcGltYXJjaGl2ZXM6ICclcGltYXJjaGl2ZXMlJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgewogICAgICAgICAgICAgICAgICBwaW1hcmNoaXZlc2lkOiAnJXBpbWFyY2hpdmVzJScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsKICAgICAgICAgICAgICAgICAgcGltcGVyc29ubmFtZTogJyVwaW1wZXJzb25uYW1lJScKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgIHBhcmVudENvbnRleHQgPSBfdGhpcy5jb250ZXh0OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChfdGhpcy52aWV3cGFyYW1zKSB7CiAgICAgICAgICAgICAgICAgIHBhcmVudFZpZXdQYXJhbSA9IF90aGlzLnZpZXdwYXJhbXM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29udGV4dCA9IFVJQWN0aW9uVG9vbC5oYW5kbGVDb250ZXh0UGFyYW0oYWN0aW9uVGFyZ2V0LCBfYXJncywgcGFyZW50Q29udGV4dCwgcGFyZW50Vmlld1BhcmFtLCBjb250ZXh0KTsKICAgICAgICAgICAgICAgIGRhdGEgPSBVSUFjdGlvblRvb2wuaGFuZGxlQWN0aW9uUGFyYW0oYWN0aW9uVGFyZ2V0LCBfYXJncywgcGFyZW50Q29udGV4dCwgcGFyZW50Vmlld1BhcmFtLCBwYXJhbXMpOwogICAgICAgICAgICAgICAgY29udGV4dCA9IE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbkNvbnRleHQuY29udGV4dCwgY29udGV4dCk7CiAgICAgICAgICAgICAgICBwYXJlbnRPYmogPSB7CiAgICAgICAgICAgICAgICAgIHNyZnBhcmVudGRlbmFtZTogc3JmUGFyZW50RGVOYW1lID8gc3JmUGFyZW50RGVOYW1lIDogbnVsbCwKICAgICAgICAgICAgICAgICAgc3JmcGFyZW50a2V5OiBzcmZQYXJlbnREZU5hbWUgPyBjb250ZXh0W3NyZlBhcmVudERlTmFtZS50b0xvd2VyQ2FzZSgpXSA6IG51bGwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGRhdGEsIHBhcmVudE9iaik7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHBhcmVudE9iaik7CiAgICAgICAgICAgICAgICBkZVJlc1BhcmFtZXRlcnMgPSBbXTsKCiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5waW1wZXJzb24gJiYgdHJ1ZSkgewogICAgICAgICAgICAgICAgICBkZVJlc1BhcmFtZXRlcnMgPSBbewogICAgICAgICAgICAgICAgICAgIHBhdGhOYW1lOiAncGltcGVvcGxlJywKICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJOYW1lOiAncGltcGVyc29uJwogICAgICAgICAgICAgICAgICB9XTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzID0gW3sKICAgICAgICAgICAgICAgICAgcGF0aE5hbWU6ICdwaW1hcmNoaXZlcycsCiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlck5hbWU6ICdwaW1hcmNoaXZlcycKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgcGF0aE5hbWU6ICdhcmNoaXZlc3JlY29yZGVkaXR2aWV3JywKICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTmFtZTogJ2FyY2hpdmVzcmVjb3JkZWRpdHZpZXcnCiAgICAgICAgICAgICAgICB9XTsKCiAgICAgICAgICAgICAgICBvcGVuSW5kZXhWaWV3VGFiID0gZnVuY3Rpb24gb3BlbkluZGV4Vmlld1RhYihkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHZhciByb3V0ZVBhdGggPSBhY3Rpb25Db250ZXh0LiR2aWV3VG9vbC5idWlsZFVwUm91dGVQYXRoKGFjdGlvbkNvbnRleHQuJHJvdXRlLCBjb250ZXh0LCBkZVJlc1BhcmFtZXRlcnMsIHBhcmFtZXRlcnMsIF9hcmdzLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgYWN0aW9uQ29udGV4dC4kcm91dGVyLnB1c2gocm91dGVQYXRoKTsKCiAgICAgICAgICAgICAgICAgIGlmICh4RGF0YSAmJiB4RGF0YS5yZWZyZXNoICYmIHhEYXRhLnJlZnJlc2ggaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgICAgICAgICAgIHhEYXRhLnJlZnJlc2goYXJncyk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBvcGVuSW5kZXhWaWV3VGFiKGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDI5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIFBpbUFyY2hpdmVzX0RDREFUQ0soX3gpIHsKICAgICAgICByZXR1cm4gX1BpbUFyY2hpdmVzX0RDREFUQ0suYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIFBpbUFyY2hpdmVzX0RDREFUQ0s7CiAgICB9KCkKICAgIC8qKg0KICAgICAqIOiwg+WHuuaho+ahiA0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncyDlvZPliY3mlbDmja4NCiAgICAgKiBAcGFyYW0ge2FueX0gY29udGV4dCDooYzkuLrpmYTliqDkuIrkuIvmlocNCiAgICAgKiBAcGFyYW0geyp9IFtwYXJhbXNdIOmZhOWKoOWPguaVsA0KICAgICAqIEBwYXJhbSB7Kn0gWyRldmVudF0g5LqL5Lu25rqQDQogICAgICogQHBhcmFtIHsqfSBbeERhdGFdICDmiafooYzooYzkuLrmiYDpnIDlvZPliY3pg6jku7YNCiAgICAgKiBAcGFyYW0geyp9IFthY3Rpb25Db250ZXh0XSAg5omn6KGM6KGM5Li65LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbc3JmUGFyZW50RGVOYW1lXSDniLblrp7kvZPlkI3np7ANCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJQaW1BcmNoaXZlc19GSUxFT1VUIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfUGltQXJjaGl2ZXNfRklMRU9VVCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGFyZ3MpIHsKICAgICAgICB2YXIgY29udGV4dCwKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICAkZXZlbnQsCiAgICAgICAgICAgIHhEYXRhLAogICAgICAgICAgICBhY3Rpb25Db250ZXh0LAogICAgICAgICAgICBzcmZQYXJlbnREZU5hbWUsCiAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgIHBhcmVudENvbnRleHQsCiAgICAgICAgICAgIHBhcmVudFZpZXdQYXJhbSwKICAgICAgICAgICAgX3RoaXMsCiAgICAgICAgICAgIF9hcmdzLAogICAgICAgICAgICBhY3Rpb25UYXJnZXQsCiAgICAgICAgICAgIHBhcmVudE9iaiwKICAgICAgICAgICAgZGVSZXNQYXJhbWV0ZXJzLAogICAgICAgICAgICBwYXJhbWV0ZXJzLAogICAgICAgICAgICBvcGVuSW5kZXhWaWV3VGFiLAogICAgICAgICAgICBfYXJnczMgPSBhcmd1bWVudHM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb250ZXh0ID0gX2FyZ3MzLmxlbmd0aCA+IDEgJiYgX2FyZ3MzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJnczNbMV0gOiB7fTsKICAgICAgICAgICAgICAgIHBhcmFtcyA9IF9hcmdzMy5sZW5ndGggPiAyICYmIF9hcmdzM1syXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3MzWzJdIDoge307CiAgICAgICAgICAgICAgICAkZXZlbnQgPSBfYXJnczMubGVuZ3RoID4gMyA/IF9hcmdzM1szXSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHhEYXRhID0gX2FyZ3MzLmxlbmd0aCA+IDQgPyBfYXJnczNbNF0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBhY3Rpb25Db250ZXh0ID0gX2FyZ3MzLmxlbmd0aCA+IDUgPyBfYXJnczNbNV0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBzcmZQYXJlbnREZU5hbWUgPSBfYXJnczMubGVuZ3RoID4gNiA/IF9hcmdzM1s2XSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGRhdGEgPSB7fTsKICAgICAgICAgICAgICAgIHBhcmVudENvbnRleHQgPSB7fTsKICAgICAgICAgICAgICAgIHBhcmVudFZpZXdQYXJhbSA9IHt9OwogICAgICAgICAgICAgICAgX3RoaXMgPSBhY3Rpb25Db250ZXh0OwogICAgICAgICAgICAgICAgX2FyZ3MgPSBVdGlsLmRlZXBDb3B5KGFyZ3MpOwogICAgICAgICAgICAgICAgYWN0aW9uVGFyZ2V0ID0gJ1NJTkdMRUtFWSc7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHsKICAgICAgICAgICAgICAgICAgcGltYXJjaGl2ZXM6ICclcGltYXJjaGl2ZXMlJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgewogICAgICAgICAgICAgICAgICBwaW1hcmNoaXZlc2lkOiAnJXBpbWFyY2hpdmVzJScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsKICAgICAgICAgICAgICAgICAgcGltcGVyc29ubmFtZTogJyVwaW1wZXJzb25uYW1lJScKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgIHBhcmVudENvbnRleHQgPSBfdGhpcy5jb250ZXh0OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChfdGhpcy52aWV3cGFyYW1zKSB7CiAgICAgICAgICAgICAgICAgIHBhcmVudFZpZXdQYXJhbSA9IF90aGlzLnZpZXdwYXJhbXM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29udGV4dCA9IFVJQWN0aW9uVG9vbC5oYW5kbGVDb250ZXh0UGFyYW0oYWN0aW9uVGFyZ2V0LCBfYXJncywgcGFyZW50Q29udGV4dCwgcGFyZW50Vmlld1BhcmFtLCBjb250ZXh0KTsKICAgICAgICAgICAgICAgIGRhdGEgPSBVSUFjdGlvblRvb2wuaGFuZGxlQWN0aW9uUGFyYW0oYWN0aW9uVGFyZ2V0LCBfYXJncywgcGFyZW50Q29udGV4dCwgcGFyZW50Vmlld1BhcmFtLCBwYXJhbXMpOwogICAgICAgICAgICAgICAgY29udGV4dCA9IE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbkNvbnRleHQuY29udGV4dCwgY29udGV4dCk7CiAgICAgICAgICAgICAgICBwYXJlbnRPYmogPSB7CiAgICAgICAgICAgICAgICAgIHNyZnBhcmVudGRlbmFtZTogc3JmUGFyZW50RGVOYW1lID8gc3JmUGFyZW50RGVOYW1lIDogbnVsbCwKICAgICAgICAgICAgICAgICAgc3JmcGFyZW50a2V5OiBzcmZQYXJlbnREZU5hbWUgPyBjb250ZXh0W3NyZlBhcmVudERlTmFtZS50b0xvd2VyQ2FzZSgpXSA6IG51bGwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGRhdGEsIHBhcmVudE9iaik7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHBhcmVudE9iaik7CiAgICAgICAgICAgICAgICBkZVJlc1BhcmFtZXRlcnMgPSBbXTsKCiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5waW1hcmNoaXZlcyAmJiB0cnVlKSB7CiAgICAgICAgICAgICAgICAgIGRlUmVzUGFyYW1ldGVycyA9IFt7CiAgICAgICAgICAgICAgICAgICAgcGF0aE5hbWU6ICdwaW1hcmNoaXZlcycsCiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTmFtZTogJ3BpbWFyY2hpdmVzJwogICAgICAgICAgICAgICAgICB9XTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzID0gW3sKICAgICAgICAgICAgICAgICAgcGF0aE5hbWU6ICdwaW1hcmNoaXZlc2NoYW5nZXMnLAogICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJOYW1lOiAncGltYXJjaGl2ZXNjaGFuZ2UnCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIHBhdGhOYW1lOiAnZWRpdHZpZXcnLAogICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJOYW1lOiAnZWRpdHZpZXcnCiAgICAgICAgICAgICAgICB9XTsKCiAgICAgICAgICAgICAgICBvcGVuSW5kZXhWaWV3VGFiID0gZnVuY3Rpb24gb3BlbkluZGV4Vmlld1RhYihkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHZhciByb3V0ZVBhdGggPSBhY3Rpb25Db250ZXh0LiR2aWV3VG9vbC5idWlsZFVwUm91dGVQYXRoKGFjdGlvbkNvbnRleHQuJHJvdXRlLCBjb250ZXh0LCBkZVJlc1BhcmFtZXRlcnMsIHBhcmFtZXRlcnMsIF9hcmdzLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgYWN0aW9uQ29udGV4dC4kcm91dGVyLnB1c2gocm91dGVQYXRoKTsKCiAgICAgICAgICAgICAgICAgIGlmICh4RGF0YSAmJiB4RGF0YS5yZWZyZXNoICYmIHhEYXRhLnJlZnJlc2ggaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgICAgICAgICAgIHhEYXRhLnJlZnJlc2goYXJncyk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBvcGVuSW5kZXhWaWV3VGFiKGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gUGltQXJjaGl2ZXNfRklMRU9VVChfeDIpIHsKICAgICAgICByZXR1cm4gX1BpbUFyY2hpdmVzX0ZJTEVPVVQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIFBpbUFyY2hpdmVzX0ZJTEVPVVQ7CiAgICB9KCkKICAgIC8qKg0KICAgICAqIOiwg+WFpeaho+ahiA0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncyDlvZPliY3mlbDmja4NCiAgICAgKiBAcGFyYW0ge2FueX0gY29udGV4dCDooYzkuLrpmYTliqDkuIrkuIvmlocNCiAgICAgKiBAcGFyYW0geyp9IFtwYXJhbXNdIOmZhOWKoOWPguaVsA0KICAgICAqIEBwYXJhbSB7Kn0gWyRldmVudF0g5LqL5Lu25rqQDQogICAgICogQHBhcmFtIHsqfSBbeERhdGFdICDmiafooYzooYzkuLrmiYDpnIDlvZPliY3pg6jku7YNCiAgICAgKiBAcGFyYW0geyp9IFthY3Rpb25Db250ZXh0XSAg5omn6KGM6KGM5Li65LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbc3JmUGFyZW50RGVOYW1lXSDniLblrp7kvZPlkI3np7ANCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJQaW1BcmNoaXZlc19GSUxFSU4iLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9QaW1BcmNoaXZlc19GSUxFSU4gPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhhcmdzKSB7CiAgICAgICAgdmFyIGNvbnRleHQsCiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgJGV2ZW50LAogICAgICAgICAgICB4RGF0YSwKICAgICAgICAgICAgYWN0aW9uQ29udGV4dCwKICAgICAgICAgICAgc3JmUGFyZW50RGVOYW1lLAogICAgICAgICAgICBkYXRhLAogICAgICAgICAgICBwYXJlbnRDb250ZXh0LAogICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0sCiAgICAgICAgICAgIF90aGlzLAogICAgICAgICAgICBfYXJncywKICAgICAgICAgICAgYWN0aW9uVGFyZ2V0LAogICAgICAgICAgICBwYXJlbnRPYmosCiAgICAgICAgICAgIGRlUmVzUGFyYW1ldGVycywKICAgICAgICAgICAgcGFyYW1ldGVycywKICAgICAgICAgICAgb3BlbkluZGV4Vmlld1RhYiwKICAgICAgICAgICAgX2FyZ3M0ID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29udGV4dCA9IF9hcmdzNC5sZW5ndGggPiAxICYmIF9hcmdzNFsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3M0WzFdIDoge307CiAgICAgICAgICAgICAgICBwYXJhbXMgPSBfYXJnczQubGVuZ3RoID4gMiAmJiBfYXJnczRbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzNFsyXSA6IHt9OwogICAgICAgICAgICAgICAgJGV2ZW50ID0gX2FyZ3M0Lmxlbmd0aCA+IDMgPyBfYXJnczRbM10gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB4RGF0YSA9IF9hcmdzNC5sZW5ndGggPiA0ID8gX2FyZ3M0WzRdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgYWN0aW9uQ29udGV4dCA9IF9hcmdzNC5sZW5ndGggPiA1ID8gX2FyZ3M0WzVdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgc3JmUGFyZW50RGVOYW1lID0gX2FyZ3M0Lmxlbmd0aCA+IDYgPyBfYXJnczRbNl0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBkYXRhID0ge307CiAgICAgICAgICAgICAgICBwYXJlbnRDb250ZXh0ID0ge307CiAgICAgICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0gPSB7fTsKICAgICAgICAgICAgICAgIF90aGlzID0gYWN0aW9uQ29udGV4dDsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7CiAgICAgICAgICAgICAgICAgIGFyY2hpdmVhY3Rpb246ICJmaWxlaW4iCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9hcmdzID0gVXRpbC5kZWVwQ29weShhcmdzKTsKICAgICAgICAgICAgICAgIGFjdGlvblRhcmdldCA9ICdTSU5HTEVLRVknOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7CiAgICAgICAgICAgICAgICAgIHBpbWFyY2hpdmVzOiAnJXBpbWFyY2hpdmVzJScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsKICAgICAgICAgICAgICAgICAgcGltYXJjaGl2ZXNpZDogJyVwaW1hcmNoaXZlcyUnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7CiAgICAgICAgICAgICAgICAgIHBpbXBlcnNvbm5hbWU6ICclcGltcGVyc29ubmFtZSUnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29udGV4dCkgewogICAgICAgICAgICAgICAgICBwYXJlbnRDb250ZXh0ID0gX3RoaXMuY29udGV4dDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoX3RoaXMudmlld3BhcmFtcykgewogICAgICAgICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0gPSBfdGhpcy52aWV3cGFyYW1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBVSUFjdGlvblRvb2wuaGFuZGxlQ29udGV4dFBhcmFtKGFjdGlvblRhcmdldCwgX2FyZ3MsIHBhcmVudENvbnRleHQsIHBhcmVudFZpZXdQYXJhbSwgY29udGV4dCk7CiAgICAgICAgICAgICAgICBkYXRhID0gVUlBY3Rpb25Ub29sLmhhbmRsZUFjdGlvblBhcmFtKGFjdGlvblRhcmdldCwgX2FyZ3MsIHBhcmVudENvbnRleHQsIHBhcmVudFZpZXdQYXJhbSwgcGFyYW1zKTsKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBPYmplY3QuYXNzaWduKHt9LCBhY3Rpb25Db250ZXh0LmNvbnRleHQsIGNvbnRleHQpOwogICAgICAgICAgICAgICAgcGFyZW50T2JqID0gewogICAgICAgICAgICAgICAgICBzcmZwYXJlbnRkZW5hbWU6IHNyZlBhcmVudERlTmFtZSA/IHNyZlBhcmVudERlTmFtZSA6IG51bGwsCiAgICAgICAgICAgICAgICAgIHNyZnBhcmVudGtleTogc3JmUGFyZW50RGVOYW1lID8gY29udGV4dFtzcmZQYXJlbnREZU5hbWUudG9Mb3dlckNhc2UoKV0gOiBudWxsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCBwYXJlbnRPYmopOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCBwYXJlbnRPYmopOwogICAgICAgICAgICAgICAgZGVSZXNQYXJhbWV0ZXJzID0gW107CgogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQucGltYXJjaGl2ZXMgJiYgdHJ1ZSkgewogICAgICAgICAgICAgICAgICBkZVJlc1BhcmFtZXRlcnMgPSBbewogICAgICAgICAgICAgICAgICAgIHBhdGhOYW1lOiAncGltYXJjaGl2ZXMnLAogICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlck5hbWU6ICdwaW1hcmNoaXZlcycKICAgICAgICAgICAgICAgICAgfV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcGFyYW1ldGVycyA9IFt7CiAgICAgICAgICAgICAgICAgIHBhdGhOYW1lOiAncGltYXJjaGl2ZXNjaGFuZ2VzJywKICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTmFtZTogJ3BpbWFyY2hpdmVzY2hhbmdlJwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICBwYXRoTmFtZTogJ2VkaXR2aWV3JywKICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTmFtZTogJ2VkaXR2aWV3JwogICAgICAgICAgICAgICAgfV07CgogICAgICAgICAgICAgICAgb3BlbkluZGV4Vmlld1RhYiA9IGZ1bmN0aW9uIG9wZW5JbmRleFZpZXdUYWIoZGF0YSkgewogICAgICAgICAgICAgICAgICB2YXIgcm91dGVQYXRoID0gYWN0aW9uQ29udGV4dC4kdmlld1Rvb2wuYnVpbGRVcFJvdXRlUGF0aChhY3Rpb25Db250ZXh0LiRyb3V0ZSwgY29udGV4dCwgZGVSZXNQYXJhbWV0ZXJzLCBwYXJhbWV0ZXJzLCBfYXJncywgZGF0YSk7CiAgICAgICAgICAgICAgICAgIGFjdGlvbkNvbnRleHQuJHJvdXRlci5wdXNoKHJvdXRlUGF0aCk7CgogICAgICAgICAgICAgICAgICBpZiAoeERhdGEgJiYgeERhdGEucmVmcmVzaCAmJiB4RGF0YS5yZWZyZXNoIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICB4RGF0YS5yZWZyZXNoKGFyZ3MpOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgb3BlbkluZGV4Vmlld1RhYihkYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAyOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIFBpbUFyY2hpdmVzX0ZJTEVJTihfeDMpIHsKICAgICAgICByZXR1cm4gX1BpbUFyY2hpdmVzX0ZJTEVJTi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gUGltQXJjaGl2ZXNfRklMRUlOOwogICAgfSgpCiAgICAvKioNCiAgICAgKiDosIPlhaXmoaPmoYgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3Mg5b2T5YmN5pWw5o2uDQogICAgICogQHBhcmFtIHthbnl9IGNvbnRleHQg6KGM5Li66ZmE5Yqg5LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zXSDpmYTliqDlj4LmlbANCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdIOS6i+S7tua6kA0KICAgICAqIEBwYXJhbSB7Kn0gW3hEYXRhXSAg5omn6KGM6KGM5Li65omA6ZyA5b2T5YmN6YOo5Lu2DQogICAgICogQHBhcmFtIHsqfSBbYWN0aW9uQ29udGV4dF0gIOaJp+ihjOihjOS4uuS4iuS4i+aWhw0KICAgICAqIEBwYXJhbSB7Kn0gW3NyZlBhcmVudERlTmFtZV0g54i25a6e5L2T5ZCN56ewDQogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiUGltQXJjaGl2ZXNfRFJEQVRDSyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX1BpbUFyY2hpdmVzX0RSREFUQ0sgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChhcmdzKSB7CiAgICAgICAgdmFyIGNvbnRleHQsCiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgJGV2ZW50LAogICAgICAgICAgICB4RGF0YSwKICAgICAgICAgICAgYWN0aW9uQ29udGV4dCwKICAgICAgICAgICAgc3JmUGFyZW50RGVOYW1lLAogICAgICAgICAgICBkYXRhLAogICAgICAgICAgICBwYXJlbnRDb250ZXh0LAogICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0sCiAgICAgICAgICAgIF90aGlzLAogICAgICAgICAgICBfYXJncywKICAgICAgICAgICAgYWN0aW9uVGFyZ2V0LAogICAgICAgICAgICBwYXJlbnRPYmosCiAgICAgICAgICAgIGRlUmVzUGFyYW1ldGVycywKICAgICAgICAgICAgcGFyYW1ldGVycywKICAgICAgICAgICAgb3BlbkluZGV4Vmlld1RhYiwKICAgICAgICAgICAgX2FyZ3M1ID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29udGV4dCA9IF9hcmdzNS5sZW5ndGggPiAxICYmIF9hcmdzNVsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3M1WzFdIDoge307CiAgICAgICAgICAgICAgICBwYXJhbXMgPSBfYXJnczUubGVuZ3RoID4gMiAmJiBfYXJnczVbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzNVsyXSA6IHt9OwogICAgICAgICAgICAgICAgJGV2ZW50ID0gX2FyZ3M1Lmxlbmd0aCA+IDMgPyBfYXJnczVbM10gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB4RGF0YSA9IF9hcmdzNS5sZW5ndGggPiA0ID8gX2FyZ3M1WzRdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgYWN0aW9uQ29udGV4dCA9IF9hcmdzNS5sZW5ndGggPiA1ID8gX2FyZ3M1WzVdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgc3JmUGFyZW50RGVOYW1lID0gX2FyZ3M1Lmxlbmd0aCA+IDYgPyBfYXJnczVbNl0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBkYXRhID0ge307CiAgICAgICAgICAgICAgICBwYXJlbnRDb250ZXh0ID0ge307CiAgICAgICAgICAgICAgICBwYXJlbnRWaWV3UGFyYW0gPSB7fTsKICAgICAgICAgICAgICAgIF90aGlzID0gYWN0aW9uQ29udGV4dDsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7CiAgICAgICAgICAgICAgICAgIGFyY2hpdmVhY3Rpb246ICJEUkRBVENLIgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfYXJncyA9IFV0aWwuZGVlcENvcHkoYXJncyk7CiAgICAgICAgICAgICAgICBhY3Rpb25UYXJnZXQgPSAnU0lOR0xFS0VZJzsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwgewogICAgICAgICAgICAgICAgICBwaW1hcmNoaXZlczogJyVwaW1hcmNoaXZlcyUnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7CiAgICAgICAgICAgICAgICAgIHBpbWFyY2hpdmVzaWQ6ICclcGltYXJjaGl2ZXMlJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgewogICAgICAgICAgICAgICAgICBwaW1wZXJzb25uYW1lOiAnJXBpbXBlcnNvbm5hbWUlJwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgcGFyZW50Q29udGV4dCA9IF90aGlzLmNvbnRleHQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKF90aGlzLnZpZXdwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgcGFyZW50Vmlld1BhcmFtID0gX3RoaXMudmlld3BhcmFtczsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb250ZXh0ID0gVUlBY3Rpb25Ub29sLmhhbmRsZUNvbnRleHRQYXJhbShhY3Rpb25UYXJnZXQsIF9hcmdzLCBwYXJlbnRDb250ZXh0LCBwYXJlbnRWaWV3UGFyYW0sIGNvbnRleHQpOwogICAgICAgICAgICAgICAgZGF0YSA9IFVJQWN0aW9uVG9vbC5oYW5kbGVBY3Rpb25QYXJhbShhY3Rpb25UYXJnZXQsIF9hcmdzLCBwYXJlbnRDb250ZXh0LCBwYXJlbnRWaWV3UGFyYW0sIHBhcmFtcyk7CiAgICAgICAgICAgICAgICBjb250ZXh0ID0gT2JqZWN0LmFzc2lnbih7fSwgYWN0aW9uQ29udGV4dC5jb250ZXh0LCBjb250ZXh0KTsKICAgICAgICAgICAgICAgIHBhcmVudE9iaiA9IHsKICAgICAgICAgICAgICAgICAgc3JmcGFyZW50ZGVuYW1lOiBzcmZQYXJlbnREZU5hbWUgPyBzcmZQYXJlbnREZU5hbWUgOiBudWxsLAogICAgICAgICAgICAgICAgICBzcmZwYXJlbnRrZXk6IHNyZlBhcmVudERlTmFtZSA/IGNvbnRleHRbc3JmUGFyZW50RGVOYW1lLnRvTG93ZXJDYXNlKCldIDogbnVsbAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwgcGFyZW50T2JqKTsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwgcGFyZW50T2JqKTsKICAgICAgICAgICAgICAgIGRlUmVzUGFyYW1ldGVycyA9IFtdOwoKICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LnBpbXBlcnNvbiAmJiB0cnVlKSB7CiAgICAgICAgICAgICAgICAgIGRlUmVzUGFyYW1ldGVycyA9IFt7CiAgICAgICAgICAgICAgICAgICAgcGF0aE5hbWU6ICdwaW1wZW9wbGUnLAogICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlck5hbWU6ICdwaW1wZXJzb24nCiAgICAgICAgICAgICAgICAgIH1dOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSBbewogICAgICAgICAgICAgICAgICBwYXRoTmFtZTogJ3BpbWFyY2hpdmVzJywKICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTmFtZTogJ3BpbWFyY2hpdmVzJwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICBwYXRoTmFtZTogJ2FyY2hpdmVzcmVjb3JkZWRpdHZpZXcnLAogICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJOYW1lOiAnYXJjaGl2ZXNyZWNvcmRlZGl0dmlldycKICAgICAgICAgICAgICAgIH1dOwoKICAgICAgICAgICAgICAgIG9wZW5JbmRleFZpZXdUYWIgPSBmdW5jdGlvbiBvcGVuSW5kZXhWaWV3VGFiKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJvdXRlUGF0aCA9IGFjdGlvbkNvbnRleHQuJHZpZXdUb29sLmJ1aWxkVXBSb3V0ZVBhdGgoYWN0aW9uQ29udGV4dC4kcm91dGUsIGNvbnRleHQsIGRlUmVzUGFyYW1ldGVycywgcGFyYW1ldGVycywgX2FyZ3MsIGRhdGEpOwogICAgICAgICAgICAgICAgICBhY3Rpb25Db250ZXh0LiRyb3V0ZXIucHVzaChyb3V0ZVBhdGgpOwoKICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhICYmIHhEYXRhLnJlZnJlc2ggJiYgeERhdGEucmVmcmVzaCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgeERhdGEucmVmcmVzaChhcmdzKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIG9wZW5JbmRleFZpZXdUYWIoZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBQaW1BcmNoaXZlc19EUkRBVENLKF94NCkgewogICAgICAgIHJldHVybiBfUGltQXJjaGl2ZXNfRFJEQVRDSy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gUGltQXJjaGl2ZXNfRFJEQVRDSzsKICAgIH0oKQogICAgLyoqDQogICAgICog6I635Y+W5oyH5a6a5pWw5o2u55qE6YeN5a6a5ZCR6aG16Z2iDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3Jma2V5IOaVsOaNruS4u+mUrg0KICAgICAqIEBwYXJhbSBpc0VuYWJsZVdvcmtmbG93ICDph43lrprlkJHop4blm77mmK/lkKbpnIDopoHlpITnkIbmtYHnqIvkuK3nmoTmlbDmja4NCiAgICAgKiBAbWVtYmVyb2YgIFBpbUFyY2hpdmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRSREFwcFZpZXciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRSREFwcFZpZXcgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShzcmZrZXksIGlzRW5hYmxlV29ya2Zsb3cpIHsKICAgICAgICB2YXIgcmVzdWx0LCBjdXJEYXRhLCBpUmVhbERFTW9kZWwsIGJEYXRhSW5XRiwgYldGTW9kZSwgc3RyUERUVmlld1BhcmFtOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlV29ya2Zsb3cgPSBpc0VuYWJsZVdvcmtmbG93OyAvLyDov5vooYzmlbDmja7mn6Xor6IKCiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5HZXQoewogICAgICAgICAgICAgICAgICBwaW1hcmNoaXZlczogc3Jma2V5CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgICBjdXJEYXRhID0gcmVzdWx0LmRhdGE7IC8v5Yik5pat5b2T5YmN5pWw5o2u5qih5byPLOm7mOiupOS4unRydWXvvIx0b2RvCgogICAgICAgICAgICAgICAgaVJlYWxERU1vZGVsID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGJEYXRhSW5XRiA9IGZhbHNlOwogICAgICAgICAgICAgICAgYldGTW9kZSA9IGZhbHNlOyAvLyDorqHnrpfmlbDmja7mqKHlvI8KCiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVXb3JrZmxvdykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDExOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UudGVzdERhdGFJbldGKHsKICAgICAgICAgICAgICAgICAgc3RhdGVWYWx1ZTogdGhpcy5zdGF0ZVZhbHVlLAogICAgICAgICAgICAgICAgICBzdGF0ZUZpZWxkOiB0aGlzLnN0YXRlRmllbGQKICAgICAgICAgICAgICAgIH0sIGN1ckRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgYkRhdGFJbldGID0gX2NvbnRleHQ1LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFiRGF0YUluV0YpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgYkRhdGFJbldGID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS50ZXN0VXNlckV4aXN0V29ya2xpc3QobnVsbCwgY3VyRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBiV0ZNb2RlID0gX2NvbnRleHQ1LnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE5OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0REVTRERFVmlld1BEVFBhcmFtKGN1ckRhdGEsIGJEYXRhSW5XRiwgYldGTW9kZSk7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgICBzdHJQRFRWaWV3UGFyYW0gPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmFsbFZpZXdNYXAuZ2V0KHN0clBEVFZpZXdQYXJhbSkpOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0UkRBcHBWaWV3KF94NSwgX3g2KSB7CiAgICAgICAgcmV0dXJuIF9nZXRSREFwcFZpZXcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldFJEQXBwVmlldzsKICAgIH0oKQogICAgLyoqDQogICAgICog6I635Y+W5a6e6ZmF55qE5pWw5o2u57G75Z6LDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUFyY2hpdmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRSZWFsREVUeXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWFsREVUeXBlKGVudGl0eSkge30KICAgIC8qKg0KICAgICAqIOiOt+WPluWunuS9k+WNleaVsOaNruWunuS9k+inhuWbvumihOWumuS5ieWPguaVsA0KICAgICAqDQogICAgICogQHBhcmFtIGN1ckRhdGEg5b2T5YmN5pWw5o2uDQogICAgICogQHBhcmFtIGJEYXRhSW5XRiDmmK/lkKbmnInmlbDmja7lnKjlt6XkvZzmtYHkuK0NCiAgICAgKiBAcGFyYW0gYldGTW9kZSAgIOaYr+WQpuW3peS9nOa1geaooeW8jw0KICAgICAqIEBtZW1iZXJvZiAgUGltQXJjaGl2ZXNVSVNlcnZpY2VCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldERFU0RERVZpZXdQRFRQYXJhbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldERFU0RERVZpZXdQRFRQYXJhbSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KGN1ckRhdGEsIGJEYXRhSW5XRiwgYldGTW9kZSkgewogICAgICAgIHZhciBzdHJQRFRQYXJhbSwgaXNFbmFibGVNdWx0aUZvcm0sIG11bHRpRm9ybURFRmllbGQsIG9iakZvcm1WYWx1ZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RyUERUUGFyYW0gPSAnJzsKCiAgICAgICAgICAgICAgICBpZiAoYkRhdGFJbldGKSB7fSAvLyDliKTmlq3mlbDmja7mmK/lkKblnKjmtYHnqIvkuK0KICAgICAgICAgICAgICAgIC8v5aSa6KGo5Y2V77yMdG9kbwoKCiAgICAgICAgICAgICAgICBpc0VuYWJsZU11bHRpRm9ybSA9IGZhbHNlOwogICAgICAgICAgICAgICAgbXVsdGlGb3JtREVGaWVsZCA9IG51bGw7CgogICAgICAgICAgICAgICAgaWYgKCEoaXNFbmFibGVNdWx0aUZvcm0gJiYgbXVsdGlGb3JtREVGaWVsZCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBvYmpGb3JtVmFsdWUgPSBjdXJEYXRhW211bHRpRm9ybURFRmllbGRdOwoKICAgICAgICAgICAgICAgIGlmIChFbnZpcm9ubWVudC5pc0FwcE1vZGUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgJ01PQkVESVRWSUVXJyArIG9iakZvcm1WYWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCAnRURJVFZJRVcnICsgb2JqRm9ybVZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaWYgKEVudmlyb25tZW50LmlzQXBwTW9kZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0REVNYWluU3RhdGVUYWcoY3VyRGF0YSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnQwID0gIk1PQkVESVRWSUVXOk1TVEFHOiI7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0REVNYWluU3RhdGVUYWcoY3VyRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBfY29udGV4dDYudDEgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDYudDAuY29uY2F0LmNhbGwoX2NvbnRleHQ2LnQwLCBfY29udGV4dDYudDEpKTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCAnTU9CRURJVFZJRVc6Jyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0REVNYWluU3RhdGVUYWcoY3VyRGF0YSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnQyID0gIkVESVRWSUVXOk1TVEFHOiI7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0REVNYWluU3RhdGVUYWcoY3VyRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICBfY29udGV4dDYudDMgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDYudDIuY29uY2F0LmNhbGwoX2NvbnRleHQ2LnQyLCBfY29udGV4dDYudDMpKTsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCAnRURJVFZJRVc6Jyk7CgogICAgICAgICAgICAgIGNhc2UgMjQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRERVNEREVWaWV3UERUUGFyYW0oX3g3LCBfeDgsIF94OSkgewogICAgICAgIHJldHVybiBfZ2V0REVTRERFVmlld1BEVFBhcmFtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRERVNEREVWaWV3UERUUGFyYW07CiAgICB9KCkKICAgIC8qKg0KICAgICAqIOiOt+WPluaVsOaNruWvueixoeeahOS4u+eKtuaAgeagh+ivhg0KICAgICAqDQogICAgICogQHBhcmFtIGN1ckRhdGEg5b2T5YmN5pWw5o2uDQogICAgICogQG1lbWJlcm9mICBQaW1BcmNoaXZlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0REVNYWluU3RhdGVUYWciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRERU1haW5TdGF0ZVRhZyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KGN1ckRhdGEpIHsKICAgICAgICB2YXIgc3RyVGFnLCBpLCBfc3RyVGFnLCBqLCBzdHJUYWcyLCBrLCBzdHJUYWczOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCEodGhpcy5tYWluU3RhdGVGaWVsZHMubGVuZ3RoID09PSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCBudWxsKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgdGhpcy5tYWluU3RhdGVGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoc2luZ2xlTWFpbkZpZWxkKSB7CiAgICAgICAgICAgICAgICAgIGlmICghKHNpbmdsZU1haW5GaWVsZCBpbiBjdXJEYXRhKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlx1NUY1M1x1NTI0RFx1NjU3MFx1NjM2RVx1NUJGOVx1OEM2MVx1NEUwRFx1NTMwNVx1NTQyQlx1NUM1RVx1NjAyN3NpbmdsZU1haW5GaWVsZFx1RkYwQ1x1NTNFRlx1ODBGRFx1NEYxQVx1NTNEMVx1NzUxRlx1OTUxOVx1OEJFRiIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHN0clRhZyA9ICIiOwogICAgICAgICAgICAgICAgaSA9IDA7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGlmICghKGkgPD0gMSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAzMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3N0clRhZyA9IGN1ckRhdGFbdGhpcy5tYWluU3RhdGVGaWVsZHNbMF1dID8gaSA9PSAwID8gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1swXV0gOiAiIiA6ICIiOwoKICAgICAgICAgICAgICAgIGlmICghKHRoaXMubWFpblN0YXRlRmllbGRzLmxlbmd0aCA+PSAyKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBqID0gMDsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaWYgKCEoaiA8PSAxKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBzdHJUYWcyID0gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1sxXV0gPyAiIi5jb25jYXQoX3N0clRhZywgIl9fIikuY29uY2F0KGogPT0gMCA/IGN1ckRhdGFbdGhpcy5tYWluU3RhdGVGaWVsZHNbMV1dIDogIiIpIDogX3N0clRhZzsKCiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm1haW5TdGF0ZUZpZWxkcy5sZW5ndGggPj0gMykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgayA9IDA7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBpZiAoIShrIDw9IDEpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN0clRhZzMgPSBjdXJEYXRhW3RoaXMubWFpblN0YXRlRmllbGRzWzJdXSA/ICIiLmNvbmNhdChzdHJUYWcyLCAiX18iKS5jb25jYXQoayA9PSAwID8gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1syXV0gOiAiIikgOiBzdHJUYWcyOyAvLyDliKTmlq3mmK/lkKblrZjlnKgKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmFicnVwdCgicmV0dXJuIiwgdGhpcy5hbGxEZU1haW5TdGF0ZU1hcC5nZXQoc3RyVGFnMykpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgaysrOwogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIHRoaXMuYWxsRGVNYWluU3RhdGVNYXAuZ2V0KHN0clRhZzIpKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIGorKzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAyODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIHRoaXMuYWxsRGVNYWluU3RhdGVNYXAuZ2V0KF9zdHJUYWcpKTsKCiAgICAgICAgICAgICAgY2FzZSAyODoKICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICAgICAgICBjYXNlIDMyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU3LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0REVNYWluU3RhdGVUYWcoX3gxMCkgewogICAgICAgIHJldHVybiBfZ2V0REVNYWluU3RhdGVUYWcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldERFTWFpblN0YXRlVGFnOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gUGltQXJjaGl2ZXNVSVNlcnZpY2VCYXNlOwp9KFVJU2VydmljZSk7CgpleHBvcnQgeyBQaW1BcmNoaXZlc1VJU2VydmljZUJhc2UgYXMgZGVmYXVsdCB9Ow=="},null]}
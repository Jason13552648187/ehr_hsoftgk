{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\components\\app-dashboard-design\\app-dashboard-design.vue?vue&type=script&lang=ts&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\components\\app-dashboard-design\\app-dashboard-design.vue","mtime":1630509408666},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSAidHNsaWIiOwppbXBvcnQgeyBWdWUsIENvbXBvbmVudCwgUHJvcCB9IGZyb20gInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3IiOwppbXBvcnQgVnVlR3JpZExheW91dCBmcm9tICJ2dWUtZ3JpZC1sYXlvdXQiOwppbXBvcnQgaW50ZXJhY3QgZnJvbSAiaW50ZXJhY3RqcyI7CmltcG9ydCBBcHBEYXNoYm9hcmREZXNpZ25TZXJ2aWNlIGZyb20gJy4vYXBwLWRhc2hib2FyZC1kZXNpZ24tc2VydmljZSc7Cgp2YXIgQXBwRGFzaGJvYXJkRGVzaWduID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1Z1ZSkgewogIF9pbmhlcml0cyhBcHBEYXNoYm9hcmREZXNpZ24sIF9WdWUpOwoKICBmdW5jdGlvbiBBcHBEYXNoYm9hcmREZXNpZ24oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFwcERhc2hib2FyZERlc2lnbik7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXBwRGFzaGJvYXJkRGVzaWduKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsKICAgIC8qKg0KICAgICAqIOiuvuiuoeacjeWKoeWvueixoQ0KICAgICAqDQogICAgICogQHByb3RlY3RlZA0KICAgICAqIEB0eXBlIHtBcHBEYXNoYm9hcmREZXNpZ25TZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXNoYm9hcmREZXNpZ24NCiAgICAgKi8KCiAgICBfdGhpcy5kZXNpZ25TZXJ2aWNlID0gbmV3IEFwcERhc2hib2FyZERlc2lnblNlcnZpY2UoKTsKICAgIC8qKg0KICAgICAqIOaooeWei+WvueixoQ0KICAgICAqDQogICAgICogQHByb3RlY3RlZA0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXNoYm9hcmREZXNpZ24NCiAgICAgKi8KCiAgICBfdGhpcy5sYXlvdXRNb2RlbCA9IFtdOwogICAgLyoqDQogICAgICog5biD5bGA5YiX5pWwDQogICAgICoNCiAgICAgKiBAdHlwZSB7bnVtYmVyfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXNoYm9hcmREZXNpZ24NCiAgICAgKi8KCiAgICBfdGhpcy5sYXlvdXRDb2xOdW0gPSAxMjsKICAgIC8qKg0KICAgICAqIOW4g+WxgOihjOmrmA0KICAgICAqDQogICAgICogQHR5cGUge251bWJlcn0NCiAgICAgKiBAbWVtYmVyb2YgQXBwRGFzaGJvYXJkRGVzaWduDQogICAgICovCgogICAgX3RoaXMubGF5b3V0Um93SCA9IDgwOwogICAgLyoqDQogICAgICog5ouW5ou95a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7KGFueSB8IG51bGwpfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXNoYm9hcmREZXNpZ24NCiAgICAgKi8KCiAgICBfdGhpcy5kcmFnSXRlbSA9IG51bGw7CiAgICAvKioNCiAgICAgKiDmmK/lkKbmi5bmi73kuK0NCiAgICAgKg0KICAgICAqIEB0eXBlIHtib29sZWFufQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXNoYm9hcmREZXNpZ24NCiAgICAgKi8KCiAgICBfdGhpcy5pc0RyYWdFbnRlciA9IGZhbHNlOwogICAgLyoqDQogICAgICog6Zeo5oi36aG55YiX6KGoDQogICAgICoNCiAgICAgKiBAdHlwZSB7YW55W119DQogICAgICogQG1lbWJlcm9mIEFwcERhc2hib2FyZERlc2lnbg0KICAgICAqLwoKICAgIF90aGlzLmxpc3QgPSBbXTsKICAgIC8qKg0KICAgICAqIOmXqOaIt+mhueWIl+ihqA0KICAgICAqDQogICAgICogQHR5cGUge2FueVtdfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXNoYm9hcmREZXNpZ24NCiAgICAgKi8KCiAgICBfdGhpcy5wb3J0bGV0cyA9IFtdOwogICAgLyoqDQogICAgICog5YiG57uE6ZuG5ZCIDQogICAgICoNCiAgICAgKiBAdHlwZSB7YW55W119DQogICAgICogQG1lbWJlcm9mIEFwcERhc2hib2FyZERlc2lnbg0KICAgICAqLwoKICAgIF90aGlzLmdyb3VwcyA9IFtdOwogICAgLyoqDQogICAgICog5YiG57uE6L+H5ruk5YC8DQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXNoYm9hcmREZXNpZ24NCiAgICAgKi8KCiAgICBfdGhpcy5maWx0ZXJWYWwgPSAnJzsKICAgIHJldHVybiBfdGhpczsKICB9CiAgLyoqDQogICAqIOeUn+WRveWRqOacnw0KICAgKg0KICAgKiBAbWVtYmVyb2YgQXBwRGFzaGJvYXJkRGVzaWduDQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKEFwcERhc2hib2FyZERlc2lnbiwgW3sKICAgIGtleTogImNyZWF0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdGhpcy5sb2FkTGlzdCgpOwogICAgICB0aGlzLmxvYWQoKTsKCiAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZSkgewogICAgICAgIHRoaXMudmlld1N0YXRlRXZlbnQgPSB0aGlzLnZpZXdTdGF0ZS5zdWJzY3JpYmUoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICAgIHZhciB0YWcgPSBfcmVmLnRhZywKICAgICAgICAgICAgICBhY3Rpb24gPSBfcmVmLmFjdGlvbiwKICAgICAgICAgICAgICBkYXRhID0gX3JlZi5kYXRhOwoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3NhdmUnLCBhY3Rpb24pKSB7CiAgICAgICAgICAgIF90aGlzMi5zYXZlKCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOaJp+ihjGRlc3Ryb3llZOWQjueahOmAu+i+kQ0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhc2hib2FyZERlc2lnbg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhZnRlckRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyRGVzdHJveSgpIHsKICAgICAgaWYgKHRoaXMudmlld1N0YXRlRXZlbnQpIHsKICAgICAgICB0aGlzLnZpZXdTdGF0ZUV2ZW50LnVuc3Vic2NyaWJlKCk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOWKoOi9vemXqOaIt+WIl+ihqA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhc2hib2FyZERlc2lnbg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJsb2FkTGlzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZExpc3QoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIHBvc3QgPSB0aGlzLmRlc2lnblNlcnZpY2UubG9hZFBvcnRsZXRMaXN0KHRoaXMuY29udGV4dCwgdGhpcy52aWV3cGFyYW1zKTsKICAgICAgcG9zdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBfdGhpczMucG9ydGxldHMgPSByZXN1bHQuZGF0YTsKICAgICAgICBfdGhpczMubGlzdCA9IHJlc3VsdC5yZXN1bHQ7CiAgICAgICAgX3RoaXMzLmdyb3VwcyA9IHJlc3VsdC5ncm91cHM7CgogICAgICAgIF90aGlzMy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMzLmFkZEV2ZW50TGlzdGVuZXIoKTsKICAgICAgICB9KTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWKoOi9vQ0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhc2hib2FyZERlc2lnbg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJsb2FkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHZhciBwb3N0ID0gdGhpcy5kZXNpZ25TZXJ2aWNlLmxvYWRNb2RlbCh0aGlzLnV0aWxTZXJ2aWNlTmFtZSwgdGhpcy5jb250ZXh0LCB0aGlzLnZpZXdwYXJhbXMpOwogICAgICBwb3N0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgIF90aGlzNC5sYXlvdXRNb2RlbCA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgfQogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5L+d5a2YDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgQXBwRGFzaGJvYXJkRGVzaWduDQogICAgICovCgogIH0sIHsKICAgIGtleTogInNhdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmUoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIHBhcmFtID0ge307CiAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW0sIF9vYmplY3RTcHJlYWQoewogICAgICAgIG1vZGVsOiB0aGlzLmxheW91dE1vZGVsCiAgICAgIH0sIHRoaXMudmlld3BhcmFtcykpOwogICAgICB2YXIgcG9zdCA9IHRoaXMuZGVzaWduU2VydmljZS5zYXZlTW9kZWwodGhpcy51dGlsU2VydmljZU5hbWUsIHRoaXMuY29udGV4dCwgcGFyYW0pOwogICAgICBwb3N0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXM1LiRlbWl0KCJzYXZlIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDmmK/lkKbnpoHmraLmi5bliqgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gaXRlbQ0KICAgICAqIEByZXR1cm5zDQogICAgICogQG1lbWJlcm9mIEFwcERhc2hib2FyZERlc2lnbg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc0Rpc2FibGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0Rpc2FibGVkKGl0ZW0pIHsKICAgICAgdmFyIGluZGV4ID0gdGhpcy5sYXlvdXRNb2RlbC5maW5kSW5kZXgoZnVuY3Rpb24gKGEpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LmlzKGEuaSwgaXRlbS5wb3J0bGV0Q29kZU5hbWUpOwogICAgICB9KTsKCiAgICAgIGlmIChpbmRleCA+PSAwKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWIoOmZpOmhuQ0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IGlkDQogICAgICogQG1lbWJlcm9mIEFwcERhc2hib2FyZERlc2lnbg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZW1vdmVJdGVtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVJdGVtKGlkKSB7CiAgICAgIHZhciBpbmRleCA9IHRoaXMubGF5b3V0TW9kZWwuZmluZEluZGV4KGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5pcyhpdGVtLmksIGlkKTsKICAgICAgfSk7CgogICAgICBpZiAoaW5kZXggIT09IC0xKSB7CiAgICAgICAgdGhpcy5sYXlvdXRNb2RlbC5zcGxpY2UoaW5kZXgsIDEpOwogICAgICB9CgogICAgICB2YXIgaXRlbSA9IHRoaXMucG9ydGxldHMuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBPYmplY3QuaXMoaXRlbS5wb3J0bGV0Q29kZU5hbWUsIGlkKTsKICAgICAgfSk7CgogICAgICBpZiAoaXRlbSkgewogICAgICAgIGl0ZW0ubW92ZWQgPSBmYWxzZTsKICAgICAgfQogICAgfQogICAgLyoqDQogICAgICog5re75Yqg5LqL5Lu2DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgQXBwRGFzaGJvYXJkRGVzaWduDQogICAgICovCgogIH0sIHsKICAgIGtleTogImFkZEV2ZW50TGlzdGVuZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuJHJlZnMuZHJhZ0Rpdkl0ZW0pIHsKICAgICAgICB2YXIgZHJhZ0Rpdkl0ZW1zID0gdGhpcy4kcmVmcy5kcmFnRGl2SXRlbTsKICAgICAgICBkcmFnRGl2SXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoZHJhZ0Rpdkl0ZW0pIHsKICAgICAgICAgIHZhciBpbnRlcmFjdE9iaiA9IGludGVyYWN0KGRyYWdEaXZJdGVtLiRlbCk7CiAgICAgICAgICBpbnRlcmFjdE9iai5kcmFnZ2FibGUoe30pOwogICAgICAgICAgaW50ZXJhY3RPYmoub24oImRyYWdzdGFydCBkcmFnbW92ZSBkcmFnZW5kIiwgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIF90aGlzNi5oYW5kbGVEcmFnKGV2ZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDmi5bliqgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gZXZlbnQNCiAgICAgKiBAcmV0dXJucw0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXNoYm9hcmREZXNpZ24NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaGFuZGxlRHJhZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRHJhZyhldmVudCkgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKCiAgICAgIHZhciB0YWcgPSBldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgidGFnIik7CiAgICAgIHZhciBpdGVtID0gdGhpcy5wb3J0bGV0cy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5pcyhpdGVtLnBvcnRsZXRDb2RlTmFtZSwgdGFnKTsKICAgICAgfSk7CgogICAgICBpZiAoaXRlbS5tb3ZlZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7CiAgICAgICAgY2FzZSAiZHJhZ3N0YXJ0IjoKICAgICAgICAgIHsKICAgICAgICAgICAgaWYgKGl0ZW0pIHsKICAgICAgICAgICAgICB0aGlzLmRyYWdJdGVtID0gaXRlbTsKICAgICAgICAgICAgICB2YXIgZHJhZ0RpdiA9IHRoaXMuJHJlZnMuZHJhZ0RpdjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgIGNhc2UgImRyYWdtb3ZlIjoKICAgICAgICAgIHsKICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdJdGVtKSB7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgX2RyYWdEaXYgPSB0aGlzLiRyZWZzLmRyYWdEaXY7CiAgICAgICAgICAgIHZhciBtb3VzZVggPSBNYXRoLnJvdW5kKGV2ZW50LmNsaWVudC54KTsKICAgICAgICAgICAgdmFyIG1vdXNlWSA9IE1hdGgucm91bmQoZXZlbnQuY2xpZW50LnkpOwoKICAgICAgICAgICAgaWYgKF9kcmFnRGl2KSB7CiAgICAgICAgICAgICAgX2RyYWdEaXYuc3R5bGUubGVmdCA9IG1vdXNlWCArICJweCI7CiAgICAgICAgICAgICAgX2RyYWdEaXYuc3R5bGUudG9wID0gbW91c2VZICsgInB4IjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5sYXlvdXRNb2RlbC5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmlzKGl0ZW0ucG9ydGxldENvZGVOYW1lLCBfdGhpczcuZHJhZ0l0ZW0ucG9ydGxldENvZGVOYW1lKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBncmlkTGF5b3V0UGFuZWwgPSB0aGlzLiRyZWZzLmdyaWRMYXlvdXRQYW5lbDsKICAgICAgICAgICAgdmFyIGdyaWRMYXlvdXQgPSB0aGlzLiRyZWZzLmdyaWRMYXlvdXQ7CiAgICAgICAgICAgIHZhciBjdGFpblJlY3QgPSBncmlkTGF5b3V0UGFuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CgogICAgICAgICAgICBpZiAobW91c2VYID4gY3RhaW5SZWN0LnggJiYgbW91c2VYIDwgY3RhaW5SZWN0LnggKyBjdGFpblJlY3Qud2lkdGggJiYgbW91c2VZID4gY3RhaW5SZWN0LnkgJiYgbW91c2VZIDwgY3RhaW5SZWN0LnkgKyBjdGFpblJlY3QuaGVpZ2h0KSB7CiAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICAgICAgdmFyIGFkZEl0ZW0gPSB7CiAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgIHc6IDQsCiAgICAgICAgICAgICAgICAgIGg6IDMsCiAgICAgICAgICAgICAgICAgIGk6IHRoaXMuZHJhZ0l0ZW0ucG9ydGxldENvZGVOYW1lCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhZGRJdGVtLCB0aGlzLmRyYWdJdGVtKTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBhZGRJdGVtLm1vdmVkOwogICAgICAgICAgICAgICAgdGhpcy5sYXlvdXRNb2RlbC5wdXNoKGFkZEl0ZW0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFyIHggPSBNYXRoLnJvdW5kKChtb3VzZVggLSBjdGFpblJlY3QueCkgLyAoKGN0YWluUmVjdC53aWR0aCAtIDEwKSAvIHRoaXMubGF5b3V0Q29sTnVtKSk7CgogICAgICAgICAgICAgIGlmICh4ID49IDEpIHsKICAgICAgICAgICAgICAgIHggLT0gMTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgMDsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZhciB5ID0gTWF0aC5yb3VuZCgobW91c2VZIC0gY3RhaW5SZWN0LnkpIC8gKHRoaXMubGF5b3V0Um93SCArIDEwKSk7CgogICAgICAgICAgICAgIGlmICh5ID49IDIpIHsKICAgICAgICAgICAgICAgIHkgLT0gMjsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgeSA9IDA7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBncmlkTGF5b3V0LmRyYWdFdmVudChldmVudC50eXBlLCB0aGlzLmRyYWdJdGVtLnBvcnRsZXRDb2RlTmFtZSwgeCwgeSwgMywgNCk7CiAgICAgICAgICAgICAgdGhpcy5pc0RyYWdFbnRlciA9IHRydWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgZ3JpZExheW91dC5kcmFnRXZlbnQoImRyYWdsZWF2ZSIsIHRoaXMuZHJhZ0l0ZW0ucG9ydGxldENvZGVOYW1lLCAwLCAwLCAwLCAwKTsKICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0TW9kZWwuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRoaXMuaXNEcmFnRW50ZXIgPSBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgIGNhc2UgImRyYWdlbmQiOgogICAgICAgICAgewogICAgICAgICAgICB2YXIgX2l0ZW0gPSB0aGlzLmxheW91dE1vZGVsLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmlzKGl0ZW0ucG9ydGxldENvZGVOYW1lLCBfdGhpczcuZHJhZ0l0ZW0ucG9ydGxldENvZGVOYW1lKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgX2dyaWRMYXlvdXQgPSB0aGlzLiRyZWZzLmdyaWRMYXlvdXQ7CgogICAgICAgICAgICBpZiAoX2l0ZW0pIHsKICAgICAgICAgICAgICB0aGlzLmRyYWdJdGVtLm1vdmVkID0gdHJ1ZTsKCiAgICAgICAgICAgICAgX2dyaWRMYXlvdXQuZHJhZ0V2ZW50KGV2ZW50LnR5cGUsIHRoaXMuZHJhZ0l0ZW0ucG9ydGxldENvZGVOYW1lLCBfaXRlbS54LCBfaXRlbS55LCBfaXRlbS5oLCBfaXRlbS53KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5kcmFnSXRlbSA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuaXNEcmFnRW50ZXIgPSBmYWxzZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBBcHBEYXNoYm9hcmREZXNpZ247Cn0oVnVlKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCh7CiAgImRlZmF1bHQiOiB7fQp9KV0sIEFwcERhc2hib2FyZERlc2lnbi5wcm90b3R5cGUsICJjb250ZXh0Iiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCh7CiAgImRlZmF1bHQiOiB7fQp9KV0sIEFwcERhc2hib2FyZERlc2lnbi5wcm90b3R5cGUsICJ2aWV3cGFyYW1zIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgQXBwRGFzaGJvYXJkRGVzaWduLnByb3RvdHlwZSwgInV0aWxTZXJ2aWNlTmFtZSIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIEFwcERhc2hib2FyZERlc2lnbi5wcm90b3R5cGUsICJ2aWV3U3RhdGUiLCB2b2lkIDApOwoKQXBwRGFzaGJvYXJkRGVzaWduID0gdHNsaWJfMS5fX2RlY29yYXRlKFtDb21wb25lbnQoewogIGNvbXBvbmVudHM6IHsKICAgIEdyaWRMYXlvdXQ6IFZ1ZUdyaWRMYXlvdXQuR3JpZExheW91dCwKICAgIEdyaWRJdGVtOiBWdWVHcmlkTGF5b3V0LkdyaWRJdGVtCiAgfQp9KV0sIEFwcERhc2hib2FyZERlc2lnbik7CmV4cG9ydCBkZWZhdWx0IEFwcERhc2hib2FyZERlc2lnbjs="},null]}
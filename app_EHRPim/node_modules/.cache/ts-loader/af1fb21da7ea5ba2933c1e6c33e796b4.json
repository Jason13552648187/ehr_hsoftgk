{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--14-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\orm-org\\org-bar-chart\\org-bar-chart-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\orm-org\\org-bar-chart\\org-bar-chart-base.vue","mtime":1630509411036},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI7CmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IFZ1ZSwgQ29tcG9uZW50LCBQcm9wIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IFV0aWwgfSBmcm9tICdAL3V0aWxzJzsKaW1wb3J0IE9ybU9yZ1NlcnZpY2UgZnJvbSAnQC9zZXJ2aWNlL29ybS1vcmcvb3JtLW9yZy1zZXJ2aWNlJzsKaW1wb3J0IE9yZ0JhclNlcnZpY2UgZnJvbSAnLi9vcmctYmFyLWNoYXJ0LXNlcnZpY2UnOwppbXBvcnQgZWNoYXJ0cyBmcm9tICdlY2hhcnRzJzsKaW1wb3J0IG1vbWVudCBmcm9tICJtb21lbnQiOwppbXBvcnQgQ29kZUxpc3RTZXJ2aWNlIGZyb20gIkBzZXJ2aWNlL2FwcC9jb2RlbGlzdC1zZXJ2aWNlIjsKaW1wb3J0IHsgQ2hhcnRCYXJTZXJpZXMgfSBmcm9tICdAL21vZGVsL2NoYXJ0LWRldGFpbCc7Cgp2YXIgT3JnQmFyQmFzZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9WdWUpIHsKICBfaW5oZXJpdHMoT3JnQmFyQmFzZSwgX1Z1ZSk7CgogIGZ1bmN0aW9uIE9yZ0JhckJhc2UoKSB7CiAgICB2YXIgX3RoaXMyOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcmdCYXJCYXNlKTsKCiAgICBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoT3JnQmFyQmFzZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICAvKioNCiAgICAgKiDlu7rmnoTpg6jku7bmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtPcmdCYXJTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBPcmdCYXJCYXNlDQogICAgICovCgogICAgX3RoaXMyLnNlcnZpY2UgPSBuZXcgT3JnQmFyU2VydmljZSh7CiAgICAgICRzdG9yZTogX3RoaXMyLiRzdG9yZQogICAgfSk7CiAgICAvKioNCiAgICAgKiDlrp7kvZPmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtPcm1PcmdTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBPcmdCYXJCYXNlDQogICAgICovCgogICAgX3RoaXMyLmFwcEVudGl0eVNlcnZpY2UgPSBuZXcgT3JtT3JnU2VydmljZSh7CiAgICAgICRzdG9yZTogX3RoaXMyLiRzdG9yZQogICAgfSk7CiAgICAvKioNCiAgICAgKiDmmK/lkKbml6DmlbDmja4NCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0NCiAgICAgKiBAbWVtYmVyb2YgRGJfc3lzcG9ydGxldDFfY2hhcnRCYXNlDQogICAgICovCgogICAgX3RoaXMyLmlzTm9EYXRhID0gZmFsc2U7CiAgICAvKioNCiAgICAgKiDlm77ooahkaXbnu5HlrprnmoRpZA0KICAgICAqDQogICAgICogQHR5cGUge30NCiAgICAgKiBAbWVtYmVyb2YgRGJfc3lzcG9ydGxldDFfY2hhcnRCYXNlDQogICAgICovCgogICAgX3RoaXMyLmNoYXJ0SWQgPSBfdGhpczIuJHV0aWwuY3JlYXRlVVVJRCgpOwogICAgLyoqDQogICAgICog5Luj56CB6KGo5pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7Q29kZUxpc3RTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBEYl9zeXNwb3J0bGV0MV9jaGFydEJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuY29kZUxpc3RTZXJ2aWNlID0gbmV3IENvZGVMaXN0U2VydmljZSh7CiAgICAgICRzdG9yZTogX3RoaXMyLiRzdG9yZQogICAgfSk7CiAgICAvKioNCiAgICAgKiDluo/liJfmqKHlnosNCiAgICAgKg0KICAgICAqIEB0eXBlIHt9DQogICAgICogQG1lbWJlcm9mIERiX3N5c3BvcnRsZXQxX2NoYXJ0QmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5zZXJpZXNNb2RlbCA9IHsKICAgICAgb3JnYmFyOiBuZXcgQ2hhcnRCYXJTZXJpZXMoewogICAgICAgIG5hbWU6ICdvcmdiYXInLAogICAgICAgIGNhdGVnb3JGaWVsZDogJ29yZ2lkJywKICAgICAgICBjYXRlZ29yQ29kZUxpc3Q6IHsKICAgICAgICAgIHR5cGU6ICdEWU5BTUlDJywKICAgICAgICAgIHRhZzogJ0VockNvZGVMaXN0MDIxMScsCiAgICAgICAgICBlbXB0eWNvZGU6ICdlbXB0eScsCiAgICAgICAgICBlbXB0eXRleHQ6ICcnCiAgICAgICAgfSwKICAgICAgICB2YWx1ZUZpZWxkOiAnY291bnRudW0nLAogICAgICAgIHNlcmllc1ZhbHVlczogW10sCiAgICAgICAgc2VyaWVzSW5kZXg6IDAsCiAgICAgICAgZGF0YTogW10sCiAgICAgICAgc2VyaWVzTWFwOiB7fSwKICAgICAgICBkYXRhU2V0RmllbGRzOiBbewogICAgICAgICAgbmFtZTogIm9yZ2lkIiwKICAgICAgICAgIGNvZGVsaXN0OiB7CiAgICAgICAgICAgIHR5cGU6ICJEWU5BTUlDIiwKICAgICAgICAgICAgdGFnOiAiRWhyQ29kZUxpc3QwMjExIiwKICAgICAgICAgICAgZW1wdHljb2RlOiAnZW1wdHknLAogICAgICAgICAgICBlbXB0eXRleHQ6ICcnCiAgICAgICAgICB9LAogICAgICAgICAgaXNHcm91cEZpZWxkOiB0cnVlLAogICAgICAgICAgZ3JvdXBNb2RlOiAiQ09ERUxJU1QiCiAgICAgICAgfSwgewogICAgICAgICAgbmFtZTogImNvdW50bnVtIiwKICAgICAgICAgIGNvZGVsaXN0OiBudWxsLAogICAgICAgICAgaXNHcm91cEZpZWxkOiBmYWxzZSwKICAgICAgICAgIGdyb3VwTW9kZTogIiIKICAgICAgICB9XSwKICAgICAgICBlY3hPYmplY3Q6IHsKICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIHBvc2l0aW9uOiAnaW5zaWRlJwogICAgICAgICAgfSwKICAgICAgICAgIGxhYmVsTGluZTogewogICAgICAgICAgICBsZW5ndGg6IDEwLAogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICB3aWR0aDogMSwKICAgICAgICAgICAgICB0eXBlOiAnc29saWQnCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmJywKICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEKICAgICAgICAgIH0sCiAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgIGZvbnRTaXplOiAyMAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBlY09iamVjdDogewogICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgZm9ybWF0dGVyOiAne0Bjb3VudG51bX3kuronLAogICAgICAgICAgICBwb3NpdGlvbjogJ3JpZ2h0JwogICAgICAgICAgfSwKICAgICAgICAgIGJhcldpZHRoOiAxMCwKICAgICAgICAgIGVuY29kZTogewogICAgICAgICAgICB4OiBbJ2NvdW50bnVtJ10sCiAgICAgICAgICAgIHk6IFsnb3JnaWQnXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2VyaWVzVGVtcDogewogICAgICAgICAgdHlwZTogJ2JhcicKICAgICAgICB9LAogICAgICAgIGJhc2VPcHRpb246IHt9LAogICAgICAgIHNlcmllc0xheW91dEJ5OiAiY29sdW1uIgogICAgICB9KQogICAgfTsKICAgIC8qKg0KICAgICAqIOWbvuihqOiHquWumuS5ieWPguaVsOmbhuWQiA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIERiX3N5c3BvcnRsZXQxX2NoYXJ0QmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5jaGFydFVzZXJQYXJhbXMgPSB7CiAgICAgIGdyaWQ6IHsKICAgICAgICBsZWZ0OiA3MAogICAgICB9LAogICAgICB4QXhpczogewogICAgICAgIHR5cGU6ICd2YWx1ZScKICAgICAgfSwKICAgICAgY29sb3I6IFsnIzg4NmZlYycsICcjMDQwNGY2JywgJyM4QkMzNEEnLCAnIzI1ZmFkMycsICcjOTFjN2FlJywgJyM3NDlmODMnLCAnI2NhODYyMicsICcjYmRhMjlhJywgJyM2ZTcwNzQnLCAnIzU0NjU3MCcsICcjYzRjY2QzJ10sCiAgICAgIHlBeGlzOiB7CiAgICAgICAgdHlwZTogJ2NhdGVnb3J5JwogICAgICB9CiAgICB9OwogICAgLyoqDQogICAgICog5Zu+6KGo5Z+656GA5Yqo5oCB5qih5Z6LDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgRGJfc3lzcG9ydGxldDFfY2hhcnRCYXNlDQogICAgICovCgogICAgX3RoaXMyLmNoYXJ0QmFzZU9QdGlvbiA9IHt9OwogICAgLyoqDQogICAgICog5Yid5aeL5YyW5Zu+6KGo5omA6ZyA5Y+C5pWwDQogICAgICoNCiAgICAgKiBAdHlwZSB7fQ0KICAgICAqIEBtZW1iZXJvZiBEYl9zeXNwb3J0bGV0MV9jaGFydEJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuY2hhcnRPcHRpb24gPSB7CiAgICAgIHRpdGxlOiB7CiAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICB0ZXh0OiAn57uE57uH5YiG5biDJywKICAgICAgICBzdWJ0ZXh0OiAnJwogICAgICB9LAogICAgICBsZWdlbmQ6IHsKICAgICAgICBzaG93OiBmYWxzZQogICAgICB9LAogICAgICBncmlkOiBbe31dLAogICAgICB4QXhpczogW3sKICAgICAgICBncmlkSW5kZXg6IDAsCiAgICAgICAgcG9zaXRpb246ICJib3R0b20iLAogICAgICAgIHR5cGU6ICdjYXRlZ29yeScsCiAgICAgICAgbmFtZTogJ+e7hOe7hycKICAgICAgfV0sCiAgICAgIHlBeGlzOiBbewogICAgICAgIGdyaWRJbmRleDogMCwKICAgICAgICBwb3NpdGlvbjogInRvcCIsCiAgICAgICAgdHlwZTogJ3ZhbHVlJywKICAgICAgICBuYW1lOiAn5Lq65pWwJwogICAgICB9XSwKICAgICAgdG9vbHRpcDogewogICAgICAgIHNob3c6IHRydWUKICAgICAgfSwKICAgICAgZGF0YXNldDogW10sCiAgICAgIHNlcmllczogW3sKICAgICAgICBpZDogJ29yZ2JhcicsCiAgICAgICAgbmFtZTogJ+e7hOe7h+WIhuW4gycsCiAgICAgICAgdHlwZTogJ2JhcicsCiAgICAgICAgeEF4aXNJbmRleDogMCwKICAgICAgICB5QXhpc0luZGV4OiAwLAogICAgICAgIGRhdGFzZXRJbmRleDogMCwKICAgICAgICBlbmNvZGU6IHsKICAgICAgICAgIHg6IFsnb3JnaWQnXSwKICAgICAgICAgIHk6IFsnY291bnRudW0nXQogICAgICAgIH0KICAgICAgfV0KICAgIH07CiAgICByZXR1cm4gX3RoaXMyOwogIH0KICAvKioNCiAgICog6I635Y+W6YOo5Lu257G75Z6LDQogICAqDQogICAqIEByZXR1cm5zIHtzdHJpbmd9DQogICAqIEBtZW1iZXJvZiBPcmdCYXJCYXNlDQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKE9yZ0JhckJhc2UsIFt7CiAgICBrZXk6ICJnZXRDb250cm9sVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udHJvbFR5cGUoKSB7CiAgICAgIHJldHVybiAnQ0hBUlQnOwogICAgfQogICAgLyoqDQogICAgICog5YWz6Zet6KeG5Zu+DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBPcmdCYXJCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImNsb3NlVmlldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VWaWV3KGFyZ3MpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLiRlbWl0KCdjbG9zZXZpZXcnLCBbYXJnc10pOwogICAgfQogICAgLyoqDQogICAgICogIOiuoeaVsOWZqOWIt+aWsA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIE9yZ0JhckJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY291bnRlclJlZnJlc2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvdW50ZXJSZWZyZXNoKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkgJiYgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5sZW5ndGggPiAwKSB7CiAgICAgICAgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICBpZiAoaXRlbS5yZWZyZXNoRGF0YSAmJiBpdGVtLnJlZnJlc2hEYXRhIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICAgICAgaXRlbS5yZWZyZXNoRGF0YSgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDojrflj5blpJrpobnmlbDmja4NCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHthbnlbXX0NCiAgICAgKiBAbWVtYmVyb2YgT3JnQmFyQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXREYXRhcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YXMoKSB7CiAgICAgIHJldHVybiBbXTsKICAgIH0KICAgIC8qKg0KICAgICAqIOiOt+WPluWNlemhueagkQ0KICAgICAqDQogICAgICogQHJldHVybnMgeyp9DQogICAgICogQG1lbWJlcm9mIE9yZ0JhckJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0RGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YSgpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICAvKioNCiAgICAqIFZ1ZeWjsOaYjuWRqOacnyjnu4Tku7bliJ3lp4vljJblrozmr5UpDQogICAgKg0KICAgICogQG1lbWJlcm9mIE9yZ0JhckJhc2UNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjcmVhdGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgICB0aGlzLmFmdGVyQ3JlYXRlZCgpOwogICAgfQogICAgLyoqDQogICAgKiDmiafooYxjcmVhdGVk5ZCO55qE6YC76L6RDQogICAgKg0KICAgICogQG1lbWJlcm9mIE9yZ0JhckJhc2UNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhZnRlckNyZWF0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyQ3JlYXRlZCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICBpZiAodGhpcy52aWV3U3RhdGUpIHsKICAgICAgICB0aGlzLnZpZXdTdGF0ZUV2ZW50ID0gdGhpcy52aWV3U3RhdGUuc3Vic2NyaWJlKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgICB2YXIgdGFnID0gX3JlZi50YWcsCiAgICAgICAgICAgICAgYWN0aW9uID0gX3JlZi5hY3Rpb24sCiAgICAgICAgICAgICAgZGF0YSA9IF9yZWYuZGF0YTsKCiAgICAgICAgICBpZiAoIU9iamVjdC5pcyh0YWcsIF90aGlzMy5uYW1lKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKE9iamVjdC5pcygnbG9hZCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXMzLmxvYWQoZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIHZ1ZSDnlJ/lkb3lkajmnJ8NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBPcmdCYXJCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImRlc3Ryb3llZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveWVkKCkgewogICAgICB0aGlzLmFmdGVyRGVzdHJveSgpOwogICAgfQogICAgLyoqDQogICAgICog5omn6KGMZGVzdHJveWVk5ZCO55qE6YC76L6RDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgT3JnQmFyQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhZnRlckRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyRGVzdHJveSgpIHsKICAgICAgaWYgKHRoaXMudmlld1N0YXRlRXZlbnQpIHsKICAgICAgICB0aGlzLnZpZXdTdGF0ZUV2ZW50LnVuc3Vic2NyaWJlKCk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOWIt+aWsA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQ0KICAgICAqIEBtZW1iZXJvZiBEYl9zeXNwb3J0bGV0MV9jaGFydEJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVmcmVzaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaCgpIHsKICAgICAgdmFyIG9wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgIHRoaXMubG9hZChvcHQpOwogICAgfQogICAgLyoqDQogICAgICog6I635Y+W5Zu+6KGo5pWw5o2uDQogICAgICoNCiAgICAgKiBAcmV0dXJucyB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgRGJfc3lzcG9ydGxldDFfY2hhcnRCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImxvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQob3B0KSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcmcgPSBfb2JqZWN0U3ByZWFkKHt9LCBvcHQpOwoKICAgICAgdmFyIHBhcmVudGRhdGEgPSB7fTsKICAgICAgdGhpcy4kZW1pdCgnYmVmb3JlbG9hZCcsIHBhcmVudGRhdGEpOwogICAgICBPYmplY3QuYXNzaWduKGFyZywgcGFyZW50ZGF0YSk7CiAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7CiAgICAgICAgdmlld3BhcmFtczogdGhpcy52aWV3cGFyYW1zLAogICAgICAgIHBhZ2U6IDAsCiAgICAgICAgc2l6ZTogMTAwMAogICAgICB9KTsKICAgICAgdGhpcy5zZXJ2aWNlLnNlYXJjaCh0aGlzLmZldGNoQWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLCBhcmcsIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgIF90aGlzNC50cmFuc2Zvcm1Ub0Jhc2ljQ2hhcnRTZXREYXRhKHJlcy5kYXRhLCBmdW5jdGlvbiAoY29kZWxpc3QpIHsKICAgICAgICAgICAgX3RoaXMuZHJhd0NoYXJ0cyhjb2RlbGlzdCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOe7mOWItuWbvuihqA0KICAgICAqDQogICAgICogQHJldHVybnMgeyp9DQogICAgICogQG1lbWJlcm9mIERiX3N5c3BvcnRsZXQxX2NoYXJ0QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkcmF3Q2hhcnRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3Q2hhcnRzKGNvZGVsaXN0KSB7CiAgICAgIGlmICghdGhpcy5teUNoYXJ0KSB7CiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNoYXJ0SWQpOwogICAgICAgIHRoaXMubXlDaGFydCA9IGVjaGFydHMuaW5pdChlbGVtZW50KTsKICAgICAgfQoKICAgICAgdmFyIF9jaGFydE9wdGlvbiA9IHRoaXMuaGFuZGxlQ2hhcnRPUHRpb24oY29kZWxpc3QpOwoKICAgICAgY29uc29sZS5sb2coX2NoYXJ0T3B0aW9uKTsKICAgICAgdGhpcy5teUNoYXJ0LnNldE9wdGlvbihfY2hhcnRPcHRpb24pOwogICAgICB0aGlzLm15Q2hhcnQucmVzaXplKCk7CiAgICB9CiAgICAvKioNCiAgICAgKiDlpITnkIblm77ooajlj4LmlbANCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBEYl9zeXNwb3J0bGV0MV9jaGFydEJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaGFuZGxlQ2hhcnRPUHRpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNoYXJ0T1B0aW9uKGFsbGNvZGVsaXN0KSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIF9jaGFydE9wdGlvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jaGFydE9wdGlvbikpOwoKICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuc2VyaWVzTW9kZWwpLmxlbmd0aCA+IDApIHsKICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHRlbXBEYXRhU291cmNlTWFwID0gbmV3IE1hcCgpOwoKICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHsKICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhfdGhpczUuc2VyaWVzTW9kZWwpLmZvckVhY2goZnVuY3Rpb24gKHNlcmllc3ZhbHVlKSB7CiAgICAgICAgICAgICAgaWYgKHNlcmllc3ZhbHVlLnNlcmllc0luZGV4ID09PSBpKSB7CiAgICAgICAgICAgICAgICB0ZW1wRGF0YVNvdXJjZU1hcC5zZXQoc2VyaWVzdmFsdWUubmFtZSwgc2VyaWVzdmFsdWUuZGF0YSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH07CgogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBPYmplY3Qua2V5cyhfdGhpczUuc2VyaWVzTW9kZWwpLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIF9sb29wKGkpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh0ZW1wRGF0YVNvdXJjZU1hcC5zaXplID4gMCkgewogICAgICAgICAgICB0ZW1wRGF0YVNvdXJjZU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgX2NoYXJ0T3B0aW9uLmRhdGFzZXQucHVzaCh7CiAgICAgICAgICAgICAgICAnc291cmNlJzogaXRlbQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICBPYmplY3Qua2V5cyhfdGhpczUuc2VyaWVzTW9kZWwpLmZvckVhY2goZnVuY3Rpb24gKHNlcmllc05hbWUpIHsKICAgICAgICAgICAgaWYgKF9jaGFydE9wdGlvbiAmJiBfY2hhcnRPcHRpb24uc2VyaWVzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICBfY2hhcnRPcHRpb24uc2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmIChfdGhpczUuc2VyaWVzTW9kZWxbc2VyaWVzTmFtZV0uZWN4T2JqZWN0ICYmIE9iamVjdC5pcyhzZXJpZXNOYW1lLCBpdGVtLmlkKSkgewogICAgICAgICAgICAgICAgICBpdGVtID0gVXRpbC5kZWVwT2JqZWN0TWVyZ2UoaXRlbSwgX3RoaXM1LnNlcmllc01vZGVsW3Nlcmllc05hbWVdLmVjeE9iamVjdCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKF90aGlzNS5zZXJpZXNNb2RlbFtzZXJpZXNOYW1lXS5iYXNlT3B0aW9uICYmIE9iamVjdC5rZXlzKF90aGlzNS5zZXJpZXNNb2RlbFtzZXJpZXNOYW1lXS5iYXNlT3B0aW9uKS5sZW5ndGggPiAwICYmIE9iamVjdC5pcyhzZXJpZXNOYW1lLCBpdGVtLmlkKSkgewogICAgICAgICAgICAgICAgICBpdGVtID0gVXRpbC5kZWVwT2JqZWN0TWVyZ2UoaXRlbSwgX3RoaXM1LnNlcmllc01vZGVsW3Nlcmllc05hbWVdLmJhc2VPcHRpb24pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChfdGhpczUuc2VyaWVzTW9kZWxbc2VyaWVzTmFtZV0uZWNPYmplY3QgJiYgT2JqZWN0LmlzKHNlcmllc05hbWUsIGl0ZW0uaWQpKSB7CiAgICAgICAgICAgICAgICAgIGl0ZW0gPSBVdGlsLmRlZXBPYmplY3RNZXJnZShpdGVtLCBfdGhpczUuc2VyaWVzTW9kZWxbc2VyaWVzTmFtZV0uZWNPYmplY3QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IC8v6K6+572u5aSa5bqP5YiXCgoKICAgICAgICAgICAgdmFyIHRlbXBTZXJpZXMgPSBfdGhpczUuc2VyaWVzTW9kZWxbc2VyaWVzTmFtZV07IC8vIOmdnumbt+i+vuWbvgoKICAgICAgICAgICAgaWYgKHRlbXBTZXJpZXMgJiYgdGVtcFNlcmllcy5zZXJpZXNJZEZpZWxkICYmIHRlbXBTZXJpZXMuc2VyaWVzVmFsdWVzLmxlbmd0aCA+IDAgJiYgIU9iamVjdC5pcyh0ZW1wU2VyaWVzLnR5cGUsICdyYWRhcicpKSB7CiAgICAgICAgICAgICAgdmFyIHJldHVybkluZGV4ID0gX2NoYXJ0T3B0aW9uLnNlcmllcy5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuaXMoaXRlbS5pZCwgc2VyaWVzTmFtZSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF9jaGFydE9wdGlvbi5zZXJpZXMuc3BsaWNlKHJldHVybkluZGV4LCAxKTsKCiAgICAgICAgICAgICAgdmFyIHRlbXBTZXJpZXNBcnJheSA9IFtdOwogICAgICAgICAgICAgIHRlbXBTZXJpZXMuc2VyaWVzVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHNlcmllc3ZhbHVlSXRlbSkgewogICAgICAgICAgICAgICAgdmFyIHRlbXBTZXJpZXNUZW1wID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0ZW1wU2VyaWVzLnNlcmllc1RlbXApKTsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGVtcFNlcmllc1RlbXAsIHsKICAgICAgICAgICAgICAgICAgbmFtZTogdGVtcFNlcmllcy5zZXJpZXNNYXBbc2VyaWVzdmFsdWVJdGVtXSwKICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiB0ZW1wU2VyaWVzLnNlcmllc0luZGV4LAogICAgICAgICAgICAgICAgICBlbmNvZGU6IHsKICAgICAgICAgICAgICAgICAgICB4OiB0ZW1wU2VyaWVzLmNhdGVnb3JGaWVsZCwKICAgICAgICAgICAgICAgICAgICB5OiAiIi5jb25jYXQoc2VyaWVzdmFsdWVJdGVtKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBfY2hhcnRPcHRpb24uc2VyaWVzLnB1c2godGVtcFNlcmllc1RlbXApOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9KSgpOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5jaGFydEJhc2VPUHRpb24pLmxlbmd0aCA+IDApIHsKICAgICAgICBPYmplY3QuYXNzaWduKF9jaGFydE9wdGlvbiwgdGhpcy5jaGFydEJhc2VPUHRpb24pOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5jaGFydFVzZXJQYXJhbXMpLmxlbmd0aCA+IDApIHsKICAgICAgICBPYmplY3QuYXNzaWduKF9jaGFydE9wdGlvbiwgdGhpcy5jaGFydFVzZXJQYXJhbXMpOwogICAgICB9CgogICAgICByZXR1cm4gX2NoYXJ0T3B0aW9uOwogICAgfQogICAgLyoqDQogICAgICog5a6e5L2T5pWw5o2u6ZuG6L2s5YyW5Li65Zu+6KGo5pWw5o2u6ZuGDQogICAgICoNCiAgICAgKiAxLuiOt+WPluWbvuihqOaJgOacieS7o+eggeihqOWAvA0KICAgICAqIDIu5p+l6K+i6ZuG5ZCI5pig5bCE5Zu+6KGo5pWw5o2u6ZuGDQogICAgICogMy7ooaXlhajlm77ooajmlbDmja7pm4YNCiAgICAgKiA0LuWbvuihqOaVsOaNrumbhuWIhue7hOaxguWSjA0KICAgICAqIDUu5o6S5bqP5Zu+6KGo5pWw5o2u6ZuGDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IGRhdGEg5a6e5L2T5pWw5o2u6ZuGDQogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sg5Zue6LCDDQogICAgICogQG1lbWJlcm9mIERiX3N5c3BvcnRsZXQxX2NoYXJ0QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ0cmFuc2Zvcm1Ub0Jhc2ljQ2hhcnRTZXREYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdHJhbnNmb3JtVG9CYXNpY0NoYXJ0U2V0RGF0YSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZGF0YSwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgICAgdmFyIGFsbENvZGVMaXN0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKCFkYXRhIHx8ICFBcnJheS5pc0FycmF5KGRhdGEpIHx8IGRhdGEubGVuZ3RoID09PSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5pc05vRGF0YSA9IHRydWU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgdGhpcy5pc05vRGF0YSA9IGZhbHNlOyAvL+iOt+WPluS7o+eggeihqOWAvAoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hhcnRBbGxDb2RlTGlzdCgpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBhbGxDb2RlTGlzdCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXModGhpcy5zZXJpZXNNb2RlbCkubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuc2VyaWVzTW9kZWwpLmZvckVhY2goZnVuY3Rpb24gKHNpbmdsZVNlcmllcywgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAvLyDlgLzlsZ7mgKfkuLpzcmZjb3VudOiuvue9rntzcmZjb3VudDoxfeWIsGRhdGEKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVGaWVsZCA9IHNpbmdsZVNlcmllcy5kYXRhU2V0RmllbGRzLmZpbmQoZnVuY3Rpb24gKGRhdGFzZXRGaWVsZCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXRGaWVsZC5uYW1lID09PSBzaW5nbGVTZXJpZXMudmFsdWVGaWVsZDsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlRmllbGQgJiYgdmFsdWVGaWVsZC5uYW1lICYmIE9iamVjdC5pcyh2YWx1ZUZpZWxkLm5hbWUsICJzcmZjb3VudCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKHNpbmdsZURhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzaW5nbGVEYXRhLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JmY291bnQ6IDEKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9IC8vIOWIhue7hOWxnuaApwoKCiAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwRmllbGQgPSBzaW5nbGVTZXJpZXMuZGF0YVNldEZpZWxkcy5maW5kKGZ1bmN0aW9uIChkYXRhc2V0RmllbGQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhc2V0RmllbGQubmFtZSA9PT0gc2luZ2xlU2VyaWVzLmNhdGVnb3JGaWVsZDsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcENoYXJ0U2V0RGF0YSA9IFtdOwogICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wU2VyaWVzVmFsdWVzID0gbmV3IE1hcCgpOwogICAgICAgICAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBDaGFydFNldERhdGFJdGVtID0ge307IC8vIOW6j+WIl+WxnuaAp+S4jeWtmOWcqAoKICAgICAgICAgICAgICAgICAgICAgIGlmICghc2luZ2xlU2VyaWVzLnNlcmllc0lkRmllbGQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZW1wQ2hhcnRTZXREYXRhSXRlbSwgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNpbmdsZVNlcmllcy5uYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpbmdsZVNlcmllcy5kYXRhU2V0RmllbGRzICYmIHNpbmdsZVNlcmllcy5kYXRhU2V0RmllbGRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGVTZXJpZXMuZGF0YVNldEZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChzaW5nbGVEYXRhU2V0RmllbGQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNi5oYW5kbGVTaW5nbGVEYXRhU2V0RmllbGQoaXRlbSwgc2luZ2xlRGF0YVNldEZpZWxkLCBhbGxDb2RlTGlzdCwgdGVtcENoYXJ0U2V0RGF0YUl0ZW0sIGdyb3VwRmllbGQpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAvLyDluo/liJflsZ7mgKflrZjlnKjml7YKICAgICAgICAgICAgICAgICAgICAgICAgLy8g5bqP5YiX5Luj56CB6KGo5a2Y5Zyo5pe2LOe/u+ivkXRlbXBTZXJpZXNWYWx1ZXPnmoTplK7lgLzlr7kKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpbmdsZVNlcmllcy5zZXJpZXNDb2RlTGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXJpZXNDb2RlTGlzdCA9IGFsbENvZGVMaXN0LmdldChzaW5nbGVTZXJpZXMuc2VyaWVzQ29kZUxpc3QudGFnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcFNlcmllc1ZhbHVlSXRlbSA9IHRlbXBTZXJpZXNWYWx1ZXMuZ2V0KHNlcmllc0NvZGVMaXN0LmdldChpdGVtW3NpbmdsZVNlcmllcy5zZXJpZXNJZEZpZWxkXSkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlbXBTZXJpZXNWYWx1ZUl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTZXJpZXNWYWx1ZXMuc2V0KHNlcmllc0NvZGVMaXN0LmdldChpdGVtW3NpbmdsZVNlcmllcy5zZXJpZXNJZEZpZWxkXSksIHNlcmllc0NvZGVMaXN0LmdldChpdGVtW3NpbmdsZVNlcmllcy5zZXJpZXNJZEZpZWxkXSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RlbXBTZXJpZXNWYWx1ZUl0ZW0gPSB0ZW1wU2VyaWVzVmFsdWVzLmdldChpdGVtW3NpbmdsZVNlcmllcy5zZXJpZXNJZEZpZWxkXSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RlbXBTZXJpZXNWYWx1ZUl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTZXJpZXNWYWx1ZXMuc2V0KGl0ZW1bc2luZ2xlU2VyaWVzLnNlcmllc0lkRmllbGRdLCBpdGVtW3NpbmdsZVNlcmllcy5zZXJpZXNOYW1lRmllbGRdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGVtcENoYXJ0U2V0RGF0YUl0ZW0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtW3NpbmdsZVNlcmllcy5zZXJpZXNJZEZpZWxkXQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaW5nbGVTZXJpZXMuZGF0YVNldEZpZWxkcyAmJiBzaW5nbGVTZXJpZXMuZGF0YVNldEZpZWxkcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlU2VyaWVzLmRhdGFTZXRGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoc2luZ2xlRGF0YVNldEZpZWxkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczYuaGFuZGxlU2luZ2xlRGF0YVNldEZpZWxkKGl0ZW0sIHNpbmdsZURhdGFTZXRGaWVsZCwgYWxsQ29kZUxpc3QsIHRlbXBDaGFydFNldERhdGFJdGVtLCBncm91cEZpZWxkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIHRlbXBDaGFydFNldERhdGEucHVzaCh0ZW1wQ2hhcnRTZXREYXRhSXRlbSk7CiAgICAgICAgICAgICAgICAgICAgfSk7IC8vIOihpeWFqOaVsOaNrumbhuWQiAoKICAgICAgICAgICAgICAgICAgICBfdGhpczYuY29tcGxldGVEYXRhU2V0KHRlbXBDaGFydFNldERhdGEsIHNpbmdsZVNlcmllcywgYWxsQ29kZUxpc3QpOyAvLyDluo/liJfku6PnoIHooajlrZjlnKjml7Ys6KGl5YWo5bqP5YiXCgoKICAgICAgICAgICAgICAgICAgICBpZiAoc2luZ2xlU2VyaWVzLnNlcmllc0NvZGVMaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VyaWVzQ29kZUxpc3QgPSBhbGxDb2RlTGlzdC5nZXQoc2luZ2xlU2VyaWVzLnNlcmllc0NvZGVMaXN0LnRhZyk7CiAgICAgICAgICAgICAgICAgICAgICB0ZW1wU2VyaWVzVmFsdWVzID0gbmV3IE1hcCgpOwogICAgICAgICAgICAgICAgICAgICAgc2VyaWVzQ29kZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU2VyaWVzVmFsdWVzLnNldChpdGVtLCBpdGVtKTsKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgc2luZ2xlU2VyaWVzLnNlcmllc1ZhbHVlcyA9IF90b0NvbnN1bWFibGVBcnJheSh0ZW1wU2VyaWVzVmFsdWVzLmtleXMoKSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBTZXJpZXNNYXBPYmogPSB7fTsKICAgICAgICAgICAgICAgICAgICB0ZW1wU2VyaWVzVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsKICAgICAgICAgICAgICAgICAgICAgIHRlbXBTZXJpZXNNYXBPYmpba2V5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHNpbmdsZVNlcmllcy5zZXJpZXNNYXAgPSB0ZW1wU2VyaWVzTWFwT2JqOwogICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFja0Z1bmN0aW9uID0gaW5kZXggPT09IE9iamVjdC52YWx1ZXMoX3RoaXM2LnNlcmllc01vZGVsKS5sZW5ndGggLSAxID8gY2FsbGJhY2sgOiBudWxsOwoKICAgICAgICAgICAgICAgICAgICBfdGhpczYudHJhbnNmb3JtVG9DaGFydFNlcmllc0RhdGFTZXQodGVtcENoYXJ0U2V0RGF0YSwgc2luZ2xlU2VyaWVzLCBjYWxsYmFja0Z1bmN0aW9uLCBhbGxDb2RlTGlzdCk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtVG9CYXNpY0NoYXJ0U2V0RGF0YShfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF90cmFuc2Zvcm1Ub0Jhc2ljQ2hhcnRTZXREYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cmFuc2Zvcm1Ub0Jhc2ljQ2hhcnRTZXREYXRhOwogICAgfSgpCiAgICAvKioNCiAgICAgKiDmnoTlu7rlm77ooajluo/liJfmlbDmja7pm4blkIgNCiAgICAgKg0KICAgICAqIDEu5YiG57uE5rGC5ZKMDQogICAgICogMi7mjpLluo/msYLlkozmlbDnu4QNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gZGF0YSDkvKDlhaXmlbDmja4NCiAgICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGl0ZW0g5Y2V5Liq5bqP5YiXDQogICAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBjYWxsYmFjayDlm57osIMNCiAgICAgKiBAcGFyYW0geyp9IGFsbENvZGVMaXN0IOaJgOacieS7o+eggeihqA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIERiX3N5c3BvcnRsZXQxX2NoYXJ0QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ0cmFuc2Zvcm1Ub0NoYXJ0U2VyaWVzRGF0YVNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtVG9DaGFydFNlcmllc0RhdGFTZXQoZGF0YSwgaXRlbSwgY2FsbGJhY2ssIGFsbENvZGVMaXN0KSB7CiAgICAgIGlmIChpdGVtLnNlcmllc0lkRmllbGQpIHsKICAgICAgICAvLyDlpJrluo/liJcKICAgICAgICB2YXIgZ3JvdXBGaWVsZCA9IGl0ZW0uZGF0YVNldEZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGRhdGFzZXRGaWVsZCkgewogICAgICAgICAgcmV0dXJuIGRhdGFzZXRGaWVsZC5uYW1lID09PSBpdGVtLmNhdGVnb3JGaWVsZDsKICAgICAgICB9KTsKICAgICAgICB2YXIgdGVtcEdyb3VwRmllbGQgPSBncm91cEZpZWxkLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZTsKICAgICAgICB9KTsKICAgICAgICB2YXIgc2VyaWVzRmllbGQgPSBpdGVtLmRhdGFTZXRGaWVsZHMuZmlsdGVyKGZ1bmN0aW9uIChkYXRhc2V0RmllbGQpIHsKICAgICAgICAgIHJldHVybiBkYXRhc2V0RmllbGQubmFtZSA9PT0gaXRlbS5zZXJpZXNJZEZpZWxkOwogICAgICAgIH0pOwogICAgICAgIHZhciB0ZW1wU2VyaWVzRmllbGQgPSBzZXJpZXNGaWVsZC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtLm5hbWU7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHZhbHVlRmllbGQgPSBpdGVtLmRhdGFTZXRGaWVsZHMuZmlsdGVyKGZ1bmN0aW9uIChkYXRhc2V0RmllbGQpIHsKICAgICAgICAgIHJldHVybiBkYXRhc2V0RmllbGQubmFtZSA9PT0gaXRlbS52YWx1ZUZpZWxkOwogICAgICAgIH0pOwogICAgICAgIHZhciB0ZW1wVmFsdWVGaWVsZCA9IHZhbHVlRmllbGQubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lOwogICAgICAgIH0pOwogICAgICAgIGl0ZW0uZGF0YSA9IHRoaXMuZ3JvdXBBbmRBZGQodGVtcEdyb3VwRmllbGQsIHRlbXBTZXJpZXNGaWVsZCwgdGVtcFZhbHVlRmllbGQsIGRhdGEsIGl0ZW0sIGdyb3VwRmllbGQsIGFsbENvZGVMaXN0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvL+WNleW6j+WIlwogICAgICAgIHZhciBfZ3JvdXBGaWVsZCA9IGl0ZW0uZGF0YVNldEZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGRhdGFzZXRGaWVsZCkgewogICAgICAgICAgcmV0dXJuIGRhdGFzZXRGaWVsZC5uYW1lID09PSBpdGVtLmNhdGVnb3JGaWVsZDsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIF90ZW1wR3JvdXBGaWVsZCA9IF9ncm91cEZpZWxkLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIF92YWx1ZUZpZWxkID0gaXRlbS5kYXRhU2V0RmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZGF0YXNldEZpZWxkKSB7CiAgICAgICAgICByZXR1cm4gZGF0YXNldEZpZWxkLm5hbWUgPT09IGl0ZW0udmFsdWVGaWVsZDsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIF90ZW1wVmFsdWVGaWVsZCA9IF92YWx1ZUZpZWxkLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZTsKICAgICAgICB9KTsKCiAgICAgICAgaXRlbS5kYXRhID0gdGhpcy5ncm91cEFuZEFkZChfdGVtcEdyb3VwRmllbGQsIFtdLCBfdGVtcFZhbHVlRmllbGQsIGRhdGEsIGl0ZW0sIF9ncm91cEZpZWxkLCBhbGxDb2RlTGlzdCk7CiAgICAgIH0KCiAgICAgIGlmIChjYWxsYmFjayAmJiBjYWxsYmFjayBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgY2FsbGJhY2soYWxsQ29kZUxpc3QpOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDliIbnu4TlkozmsYLlkowNCiAgICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGdyb3VwRmllbGQg5YiG57uE5bGe5oCnDQogICAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBncm91cEZpZWxkIOWAvOWxnuaApw0KICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gZGF0YSDkvKDlhaXmlbDmja4NCiAgICAgKiBAcGFyYW0geyp9IGdyb3VwRmllbGRNb2RlbCDliIbnu4TlsZ7mgKfmqKHlnosNCiAgICAgKiBAcGFyYW0geyp9IGFsbENvZGVMaXN0IOaJgOacieS7o+eggeihqA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIERiX3N5c3BvcnRsZXQxX2NoYXJ0QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJncm91cEFuZEFkZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBBbmRBZGQoZ3JvdXBGaWVsZCwgc2VyaWVzRmllbGQsIHZhbHVlRmllbGQsIGRhdGEsIGl0ZW0sIGdyb3VwRmllbGRNb2RlbCwgYWxsQ29kZUxpc3QpIHsKICAgICAgdmFyIHRlbXBNYXAgPSBuZXcgTWFwKCk7CiAgICAgIHZhciBncm91cE1vZGUgPSBncm91cEZpZWxkTW9kZWxbMF0uZ3JvdXBNb2RlOwogICAgICB2YXIgZ3JvdXBLZXlTdHIgPSAiIjsKICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgdmFyIHRlbXBHcm91cEZpZWxkID0gZ3JvdXBGaWVsZFswXTsKICAgICAgICBncm91cEtleVN0ciA9IGl0ZW1bdGVtcEdyb3VwRmllbGRdOwogICAgICAgIHZhciB0ZW1wTWFwSXRlbSA9IHRlbXBNYXAuZ2V0KGdyb3VwS2V5U3RyKTsKCiAgICAgICAgaWYgKHRlbXBNYXBJdGVtKSB7CiAgICAgICAgICB0ZW1wTWFwSXRlbS5wdXNoKGl0ZW0pOwogICAgICAgICAgdGVtcE1hcC5zZXQoZ3JvdXBLZXlTdHIsIHRlbXBNYXBJdGVtKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGVtcE1hcC5zZXQoZ3JvdXBLZXlTdHIsIFtpdGVtXSk7CiAgICAgICAgfQogICAgICB9KTsgLy8g5aSE55CG5aSa5bqP5YiXCgogICAgICBpZiAoc2VyaWVzRmllbGQubGVuZ3RoID4gMCAmJiB0ZW1wTWFwLnNpemUgPiAwKSB7CiAgICAgICAgdmFyIHRlbXBTZXJpZXNGaWVsZCA9IHNlcmllc0ZpZWxkWzBdOwogICAgICAgIHRlbXBNYXAuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwga2V5KSB7CiAgICAgICAgICB2YXIgdGVtcEl0ZW1NYXAgPSBuZXcgTWFwKCk7CiAgICAgICAgICBpdGVtLmZvckVhY2goZnVuY3Rpb24gKHNpbmdsZUl0ZW0pIHsKICAgICAgICAgICAgdmFyIHNlcmllc1ZhbHVlQXJyYXkgPSB0ZW1wSXRlbU1hcC5nZXQoc2luZ2xlSXRlbVt0ZW1wU2VyaWVzRmllbGRdKTsKCiAgICAgICAgICAgIGlmIChzZXJpZXNWYWx1ZUFycmF5KSB7CiAgICAgICAgICAgICAgc2VyaWVzVmFsdWVBcnJheS5wdXNoKHNpbmdsZUl0ZW0pOwogICAgICAgICAgICAgIHRlbXBJdGVtTWFwLnNldChzaW5nbGVJdGVtW3RlbXBTZXJpZXNGaWVsZF0sIHNlcmllc1ZhbHVlQXJyYXkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRlbXBJdGVtTWFwLnNldChzaW5nbGVJdGVtW3RlbXBTZXJpZXNGaWVsZF0sIFtzaW5nbGVJdGVtXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgdGVtcE1hcC5zZXQoa2V5LCB0ZW1wSXRlbU1hcCk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHZhciByZXR1cm5BcnJheSA9IFtdOwoKICAgICAgaWYgKHNlcmllc0ZpZWxkLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgLy/ljZXluo/liJcKICAgICAgICB0ZW1wTWFwLmZvckVhY2goZnVuY3Rpb24gKHRlbXBJdGVtKSB7CiAgICAgICAgICBpZiAodGVtcEl0ZW0ubGVuZ3RoID4gMCkgewogICAgICAgICAgICB2YXIgY3VyT2JqZWN0ID0ge307CiAgICAgICAgICAgIHZhciB2YWx1ZVJlc3VsdCA9IDA7CiAgICAgICAgICAgIHZhciBjYXRlZ29yUmVzdWx0OwogICAgICAgICAgICB0ZW1wSXRlbS5mb3JFYWNoKGZ1bmN0aW9uIChzaW5nbGVJdGVtKSB7CiAgICAgICAgICAgICAgY2F0ZWdvclJlc3VsdCA9IHNpbmdsZUl0ZW1bZ3JvdXBGaWVsZFswXV07CiAgICAgICAgICAgICAgdmFsdWVSZXN1bHQgKz0gc2luZ2xlSXRlbVt2YWx1ZUZpZWxkWzBdXTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJPYmplY3QsIGdyb3VwRmllbGRbMF0sIHsKICAgICAgICAgICAgICB2YWx1ZTogY2F0ZWdvclJlc3VsdCwKICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ck9iamVjdCwgdmFsdWVGaWVsZFswXSwgewogICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVJlc3VsdCwKICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuQXJyYXkucHVzaChjdXJPYmplY3QpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIOWkmuW6j+WIlwogICAgICAgIHZhciBzZXJpZXNWYWx1ZXNBcnJheSA9IGl0ZW0uc2VyaWVzVmFsdWVzOwogICAgICAgIHRlbXBNYXAuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXBJdGVtLCBncm91cEtleSkgewogICAgICAgICAgLy/msYLlkowKICAgICAgICAgIHZhciBjdXJPYmplY3QgPSB7fTsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJPYmplY3QsIGdyb3VwRmllbGRbMF0sIHsKICAgICAgICAgICAgdmFsdWU6IGdyb3VwS2V5LAogICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICAgIHNlcmllc1ZhbHVlc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKHNlcmllc1ZhbHVlSXRlbSkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VyT2JqZWN0LCBzZXJpZXNWYWx1ZUl0ZW0sIHsKICAgICAgICAgICAgICB2YWx1ZTogMCwKICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgICAgZ3JvdXBJdGVtLmZvckVhY2goZnVuY3Rpb24gKHNlcmllc0l0ZW0sIHNlcmllc0tleSkgewogICAgICAgICAgICB2YXIgc2VyaWVzTnVtID0gMDsKICAgICAgICAgICAgc2VyaWVzSXRlbS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhSXRlbSkgewogICAgICAgICAgICAgIHNlcmllc051bSArPSBkYXRhSXRlbVt2YWx1ZUZpZWxkWzBdXTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGN1ck9iamVjdFtzZXJpZXNLZXldID0gc2VyaWVzTnVtOwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm5BcnJheS5wdXNoKGN1ck9iamVjdCk7CiAgICAgICAgfSk7CiAgICAgIH0gLy8g6KGl5YWo56m655m95YiG57G7CgoKICAgICAgaWYgKHJldHVybkFycmF5Lmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgZW1wdHlUZXh0ID0gZ3JvdXBGaWVsZE1vZGVsWzBdICYmIGdyb3VwRmllbGRNb2RlbFswXS5jb2RlTGlzdCA/IGdyb3VwRmllbGRNb2RlbFswXS5jb2RlTGlzdC5lbXB0eXRleHQgOiAi5pyq5a6a5LmJIjsKICAgICAgICByZXR1cm5BcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICBpZiAoIWl0ZW1bZ3JvdXBGaWVsZFswXV0pIHsKICAgICAgICAgICAgaXRlbVtncm91cEZpZWxkWzBdXSA9IGVtcHR5VGV4dDsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuQXJyYXkgPSB0aGlzLnNvcnRSZXR1cm5BcnJheShyZXR1cm5BcnJheSwgZ3JvdXBGaWVsZE1vZGVsLCBhbGxDb2RlTGlzdCk7IC8vIOmbt+i+vuWbvuaVsOaNruagvOW8j+WkhOeQhgoKICAgICAgaWYgKE9iamVjdC5pcyhpdGVtLnR5cGUsICdyYWRhcicpICYmIHJldHVybkFycmF5Lmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgdGVtcFJldHVybkFycmF5ID0gW107CiAgICAgICAgdmFyIHNlcmllc1ZhbHVlcyA9IGl0ZW0uc2VyaWVzVmFsdWVzOwoKICAgICAgICBpZiAoc2VyaWVzVmFsdWVzICYmIHNlcmllc1ZhbHVlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBzZXJpZXNWYWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2luZ2xlU2VyaWVzTmFtZSkgewogICAgICAgICAgICB2YXIgc2luZ2xlU2VyaWVzT2JqID0ge307CiAgICAgICAgICAgIHJldHVybkFycmF5LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHNpbmdsZVNlcmllc09iaiwgX2RlZmluZVByb3BlcnR5KHt9LCBpdGVtW2dyb3VwRmllbGRbMF1dLCBpdGVtW3NpbmdsZVNlcmllc05hbWVdKSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBPYmplY3QuYXNzaWduKHNpbmdsZVNlcmllc09iaiwgewogICAgICAgICAgICAgIHR5cGU6IHNpbmdsZVNlcmllc05hbWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHRlbXBSZXR1cm5BcnJheS5wdXNoKHNpbmdsZVNlcmllc09iaik7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHJldHVybkFycmF5ID0gdGVtcFJldHVybkFycmF5OwogICAgICB9CgogICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXR1cm5BcnJheSkpOwogICAgICByZXR1cm4gcmV0dXJuQXJyYXk7CiAgICB9CiAgICAvKioNCiAgICAgKiDmjpLluo/mlbDnu4QNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIOS8oOWFpeaVsOe7hA0KICAgICAqIEBwYXJhbSB7Kn0gZ3JvdXBGaWVsZCDliIbnu4TlsZ7mgKcNCiAgICAgKiBAcGFyYW0geyp9IGFsbENvZGVMaXN0IOaJgOacieS7o+eggeihqA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIERiX3N5c3BvcnRsZXQxX2NoYXJ0QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzb3J0UmV0dXJuQXJyYXkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNvcnRSZXR1cm5BcnJheShhcnIsIGdyb3VwRmllbGQsIGFsbENvZGVMaXN0KSB7CiAgICAgIHZhciByZXR1cm5BcnJheSA9IFtdOyAvLyB0b2RvCiAgICAgIC8vIOWIhue7hOWxnuaAp+acieS7o+eggeihqOeahOaDheWGtSjmnIDlkI7miafooYwpCgogICAgICBpZiAoZ3JvdXBGaWVsZFswXS5jb2RlbGlzdCkgewogICAgICAgIHZhciBjdXJDb2RlTGlzdCA9IGFsbENvZGVMaXN0LmdldChncm91cEZpZWxkWzBdLmNvZGVsaXN0LnRhZyk7CiAgICAgICAgY3VyQ29kZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoY29kZWxpc3QpIHsKICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIGlmIChPYmplY3QuaXMoaXRlbVtncm91cEZpZWxkWzBdLm5hbWVdLCBjb2RlbGlzdCkpIHsKICAgICAgICAgICAgICByZXR1cm5BcnJheS5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgIGl0ZW0uaGFzdXNlZCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgaWYgKCFpdGVtLmhhc3VzZWQpIHsKICAgICAgICAgICAgcmV0dXJuQXJyYXkucHVzaChpdGVtKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm5BcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICBkZWxldGUgaXRlbS5oYXN1c2VkOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIOWIhue7hOS4uuW5tOS7vQogICAgICAgIGlmIChPYmplY3QuaXMoZ3JvdXBGaWVsZFswXS5ncm91cE1vZGUsICJZRUFSIikpIHsKICAgICAgICAgIHJldHVybkFycmF5ID0gYXJyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgcmV0dXJuIE51bWJlcihhW2dyb3VwRmllbGRbMF0ubmFtZV0pIC0gTnVtYmVyKGJbZ3JvdXBGaWVsZFswXS5uYW1lXSk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5pcyhncm91cEZpZWxkWzBdLmdyb3VwTW9kZSwgIlFVQVJURVIiKSkgewogICAgICAgICAgcmV0dXJuQXJyYXkgPSB0aGlzLmhhbmRsZVNvcnRHcm91cERhdGEoYXJyLCBncm91cEZpZWxkLCAi5a2j5bqmIik7CiAgICAgICAgfSBlbHNlIGlmIChPYmplY3QuaXMoZ3JvdXBGaWVsZFswXS5ncm91cE1vZGUsICJNT05USCIpKSB7CiAgICAgICAgICByZXR1cm5BcnJheSA9IHRoaXMuaGFuZGxlU29ydEdyb3VwRGF0YShhcnIsIGdyb3VwRmllbGQsICLmnIgiKTsKICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5pcyhncm91cEZpZWxkWzBdLmdyb3VwTW9kZSwgIllFQVJXRUVLIikpIHsKICAgICAgICAgIHJldHVybkFycmF5ID0gdGhpcy5oYW5kbGVTb3J0R3JvdXBEYXRhKGFyciwgZ3JvdXBGaWVsZCwgIuWRqCIpOwogICAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmlzKGdyb3VwRmllbGRbMF0uZ3JvdXBNb2RlLCAiREFZIikpIHsKICAgICAgICAgIHJldHVybkFycmF5ID0gYXJyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgcmV0dXJuIG1vbWVudChhW2dyb3VwRmllbGRbMF0ubmFtZV0pLnVuaXgoKSAtIG1vbWVudChiW2dyb3VwRmllbGRbMF0ubmFtZV0pLnVuaXgoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgZ3JvdXBGaWVsZE5hbWUgPSBncm91cEZpZWxkWzBdLm5hbWU7CiAgICAgICAgICB2YXIgaXNDb252ZXJ0ID0gdHJ1ZTsKICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIGlmIChpc05hTihpdGVtW2dyb3VwRmllbGROYW1lXSkpIHsKICAgICAgICAgICAgICBpc0NvbnZlcnQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKGlzQ29udmVydCkgewogICAgICAgICAgICByZXR1cm5BcnJheSA9IGFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGFbZ3JvdXBGaWVsZE5hbWVdIC0gYltncm91cEZpZWxkTmFtZV07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuQXJyYXkgPSBhcnI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gcmV0dXJuQXJyYXk7CiAgICB9CiAgICAvKioNCiAgICAgKiDmjpLluo/liIbnu4TmqKHlvI/kuIvnmoTmlbDmja4NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIOS8oOWFpeaVsOaNrg0KICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gZ3JvdXBGaWVsZCDliIbnu4TlsZ7mgKcNCiAgICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGxhYmVsIGxhYmVs5qCH562+DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgRGJfc3lzcG9ydGxldDFfY2hhcnRCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImhhbmRsZVNvcnRHcm91cERhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVNvcnRHcm91cERhdGEoYXJyLCBncm91cEZpZWxkLCBsYWJlbCkgewogICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHZhciBzb3J0RmllbGRWYWx1ZSA9IGl0ZW1bZ3JvdXBGaWVsZFswXS5uYW1lXS5zcGxpdCgiLSIpOwogICAgICAgIE9iamVjdC5hc3NpZ24oaXRlbSwgewogICAgICAgICAgc29ydEZpZWxkOiBOdW1iZXIoc29ydEZpZWxkVmFsdWVbMF0pICogMTAwMDAgKyBOdW1iZXIoc29ydEZpZWxkVmFsdWVbMV0pCiAgICAgICAgfSk7CiAgICAgICAgaXRlbVtncm91cEZpZWxkWzBdLm5hbWVdID0gc29ydEZpZWxkVmFsdWVbMF0gKyAi5bm0IiArIHNvcnRGaWVsZFZhbHVlWzFdICsgbGFiZWw7CiAgICAgIH0pOwogICAgICBhcnIuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgIHJldHVybiBOdW1iZXIoYS5zb3J0RmllbGQpIC0gTnVtYmVyKGIuc29ydEZpZWxkKTsKICAgICAgfSk7CiAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgZGVsZXRlIGl0ZW0uc29ydEZpZWxkOwogICAgICB9KTsKICAgICAgcmV0dXJuIGFycjsKICAgIH0KICAgIC8qKg0KICAgICAqIOihpeWFqOaVsOaNrumbhg0KICAgICAqDQogICAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBkYXRhIOS8oOWFpeaVsOaNrg0KICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gaXRlbSDljZXkuKrluo/liJcNCiAgICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGFsbENvZGVMaXN0IOaJgOacieeahOS7o+eggeihqA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIERiX3N5c3BvcnRsZXQxX2NoYXJ0QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb21wbGV0ZURhdGFTZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBsZXRlRGF0YVNldChkYXRhLCBpdGVtLCBhbGxDb2RlTGlzdCkgewogICAgICAvLyDliIbnu4TlsZ7mgKcKICAgICAgdmFyIGdyb3VwRmllbGQgPSBpdGVtLmRhdGFTZXRGaWVsZHMuZmluZChmdW5jdGlvbiAoZGF0YXNldEZpZWxkKSB7CiAgICAgICAgcmV0dXJuIGRhdGFzZXRGaWVsZC5uYW1lID09PSBpdGVtLmNhdGVnb3JGaWVsZDsKICAgICAgfSk7CgogICAgICBpZiAoT2JqZWN0LmlzKGdyb3VwRmllbGQuZ3JvdXBNb2RlLCAiIikpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy/liIbnu4TmqKHlvI/kuLrku6PnoIHooajvvIjooaXlgLzvvIkKCgogICAgICBpZiAoT2JqZWN0LmlzKGdyb3VwRmllbGQuZ3JvdXBNb2RlLCAnQ09ERUxJU1QnKSkgewogICAgICAgIHRoaXMuY29tcGxldGVDb2RlTGlzdChkYXRhLCBpdGVtLCBhbGxDb2RlTGlzdCk7CiAgICAgIH0gLy/liIbnu4TmqKHlvI/kuLrlubQv5a2j5bqmL+aciOS7ve+8iOacgOWkp+WAvO+8jOacgOWwj+WAvO+8jOWIhue7hO+8jOihpeWAvO+8iQoKCiAgICAgIGlmIChPYmplY3QuaXMoZ3JvdXBGaWVsZC5ncm91cE1vZGUsICJZRUFSIikgfHwgT2JqZWN0LmlzKGdyb3VwRmllbGQuZ3JvdXBNb2RlLCAiUVVBUlRFUiIpIHx8IE9iamVjdC5pcyhncm91cEZpZWxkLmdyb3VwTW9kZSwgIk1PTlRIIikgfHwgT2JqZWN0LmlzKGdyb3VwRmllbGQuZ3JvdXBNb2RlLCAiWUVBUldFRUsiKSB8fCBPYmplY3QuaXMoZ3JvdXBGaWVsZC5ncm91cE1vZGUsICJEQVkiKSkgewogICAgICAgIHRoaXMuaGFuZGxlVGltZURhdGEoZGF0YSwgaXRlbSwgYWxsQ29kZUxpc3QsIGdyb3VwRmllbGQpOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDojrflj5bmnIDlpKflgLzmnIDlsI/lgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gdGVtcFRpbWVBcnJheSDkvKDlhaXmlbDmja4NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBEYl9zeXNwb3J0bGV0MV9jaGFydEJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0UmFuZ2VEYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5nZURhdGEodGVtcFRpbWVBcnJheSkgewogICAgICB0ZW1wVGltZUFycmF5LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICB2YXIgdGVtcFBhcmFtcyA9IGl0ZW0uX2kuc3BsaXQoIi0iKTsKCiAgICAgICAgaXRlbS5zb3J0RmllbGQgPSBOdW1iZXIodGVtcFBhcmFtc1swXSArIHRlbXBQYXJhbXNbMV0pOwogICAgICB9KTsKICAgICAgdGVtcFRpbWVBcnJheS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIE51bWJlcihhLnNvcnRGaWVsZCkgLSBOdW1iZXIoYi5zb3J0RmllbGQpOwogICAgICB9KTsKICAgICAgdGVtcFRpbWVBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgZGVsZXRlIGl0ZW0uc29ydEZpZWxkOwogICAgICB9KTsKICAgICAgcmV0dXJuIHRlbXBUaW1lQXJyYXk7CiAgICB9CiAgICAvKioNCiAgICAgICog6KGl5YWo5pe26Ze057G75Z6L5pWw5o2u6ZuGDQogICAgICAqDQogICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gZGF0YSDkvKDlhaXmlbDmja4NCiAgICAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBpdGVtIOWNleS4quW6j+WIlw0KICAgICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGFsbENvZGVMaXN0IOaJgOacieeahOS7o+eggeihqA0KICAgICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGdyb3VwRmllbGQg5YiG57uE5bGe5oCnDQogICAgICAqDQogICAgICAqIEBtZW1iZXJvZiBEYl9zeXNwb3J0bGV0MV9jaGFydEJhc2UNCiAgICAgICovCgogIH0sIHsKICAgIGtleTogImhhbmRsZVRpbWVEYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVUaW1lRGF0YShkYXRhLCBpdGVtLCBhbGxDb2RlTGlzdCwgZ3JvdXBGaWVsZCkgewogICAgICB2YXIgdmFsdWVGaWVsZCA9IGl0ZW0uZGF0YVNldEZpZWxkcy5maW5kKGZ1bmN0aW9uIChkYXRhc2V0RmllbGQpIHsKICAgICAgICByZXR1cm4gZGF0YXNldEZpZWxkLm5hbWUgPT09IGl0ZW0udmFsdWVGaWVsZDsKICAgICAgfSk7CiAgICAgIHZhciBncm91cE1vZGUgPSBncm91cEZpZWxkLmdyb3VwTW9kZTsgLy8g5o6S5bqP5pWw5o2u77yM5om+5Yiw5pyA5aSn5YC844CB5pyA5bCP5YC8CgogICAgICB2YXIgdGVtcFRpbWVBcnJheSA9IFtdOwoKICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhSXRlbSkgewogICAgICAgICAgLy8g5Yik5pat5pe26Ze057G75Z6L5piv5ZCm5Li656m677yM5Li656m65LiN5aSE55CGCiAgICAgICAgICBpZiAoZGF0YUl0ZW1bZ3JvdXBGaWVsZC5uYW1lXSkgewogICAgICAgICAgICB0ZW1wVGltZUFycmF5LnB1c2gobW9tZW50KGRhdGFJdGVtW2dyb3VwRmllbGQubmFtZV0pKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdmFyIG1heFRpbWU7CiAgICAgIHZhciBtaW5UaW1lOwoKICAgICAgaWYgKE9iamVjdC5pcyhncm91cE1vZGUsICJZRUFSIikgfHwgT2JqZWN0LmlzKGdyb3VwTW9kZSwgIkRBWSIpKSB7CiAgICAgICAgbWF4VGltZSA9IG1vbWVudC5tYXgodGVtcFRpbWVBcnJheSk7CiAgICAgICAgbWluVGltZSA9IG1vbWVudC5taW4odGVtcFRpbWVBcnJheSk7CiAgICAgIH0KCiAgICAgIGlmIChPYmplY3QuaXMoZ3JvdXBNb2RlLCAiUVVBUlRFUiIpKSB7CiAgICAgICAgdGVtcFRpbWVBcnJheSA9IHRoaXMuZ2V0UmFuZ2VEYXRhKHRlbXBUaW1lQXJyYXkpOwogICAgICAgIG1pblRpbWUgPSBtb21lbnQoKS55ZWFyKHRlbXBUaW1lQXJyYXlbMF0uX2kuc3BsaXQoIi0iKVswXSkucXVhcnRlcnModGVtcFRpbWVBcnJheVswXS5faS5zcGxpdCgiLSIpWzFdKTsKICAgICAgICBtYXhUaW1lID0gbW9tZW50KCkueWVhcih0ZW1wVGltZUFycmF5W3RlbXBUaW1lQXJyYXkubGVuZ3RoIC0gMV0uX2kuc3BsaXQoIi0iKVswXSkucXVhcnRlcnModGVtcFRpbWVBcnJheVt0ZW1wVGltZUFycmF5Lmxlbmd0aCAtIDFdLl9pLnNwbGl0KCItIilbMV0pOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmlzKGdyb3VwTW9kZSwgIk1PTlRIIikpIHsKICAgICAgICB0ZW1wVGltZUFycmF5ID0gdGhpcy5nZXRSYW5nZURhdGEodGVtcFRpbWVBcnJheSk7CiAgICAgICAgbWluVGltZSA9IG1vbWVudCgpLnllYXIodGVtcFRpbWVBcnJheVswXS5faS5zcGxpdCgiLSIpWzBdKS5tb250aCh0ZW1wVGltZUFycmF5WzBdLl9pLnNwbGl0KCItIilbMV0pOwogICAgICAgIG1heFRpbWUgPSBtb21lbnQoKS55ZWFyKHRlbXBUaW1lQXJyYXlbdGVtcFRpbWVBcnJheS5sZW5ndGggLSAxXS5faS5zcGxpdCgiLSIpWzBdKS5tb250aCh0ZW1wVGltZUFycmF5W3RlbXBUaW1lQXJyYXkubGVuZ3RoIC0gMV0uX2kuc3BsaXQoIi0iKVsxXSk7CiAgICAgIH0KCiAgICAgIGlmIChPYmplY3QuaXMoZ3JvdXBNb2RlLCAiWUVBUldFRUsiKSkgewogICAgICAgIHRlbXBUaW1lQXJyYXkgPSB0aGlzLmdldFJhbmdlRGF0YSh0ZW1wVGltZUFycmF5KTsKICAgICAgICBtaW5UaW1lID0gbW9tZW50KCkueWVhcih0ZW1wVGltZUFycmF5WzBdLl9pLnNwbGl0KCItIilbMF0pLndlZWsodGVtcFRpbWVBcnJheVswXS5faS5zcGxpdCgiLSIpWzFdKTsKICAgICAgICBtYXhUaW1lID0gbW9tZW50KCkueWVhcih0ZW1wVGltZUFycmF5W3RlbXBUaW1lQXJyYXkubGVuZ3RoIC0gMV0uX2kuc3BsaXQoIi0iKVswXSkud2Vlayh0ZW1wVGltZUFycmF5W3RlbXBUaW1lQXJyYXkubGVuZ3RoIC0gMV0uX2kuc3BsaXQoIi0iKVsxXSk7CiAgICAgIH0KCiAgICAgIHZhciB0aW1lRnJhZ21lbnRBcnJheSA9IFtdOwogICAgICB2YXIgdGVtcEdyb3VucERhdGEgPSBuZXcgTWFwKCk7IC8vIOaXtumXtOWIhuautQogICAgICAvL2dyb3VwTW9kZeS4uiJZRUFSIgoKICAgICAgaWYgKE9iamVjdC5pcyhncm91cE1vZGUsICJZRUFSIikpIHsKICAgICAgICB2YXIgY3VyVGltZSA9IG1pblRpbWU7CgogICAgICAgIHdoaWxlIChjdXJUaW1lKSB7CiAgICAgICAgICBpZiAoY3VyVGltZS5pc1NhbWVPckJlZm9yZShtYXhUaW1lKSkgewogICAgICAgICAgICB2YXIgdGVtcGN1clRpbWUgPSBjdXJUaW1lLmNsb25lKCk7CiAgICAgICAgICAgIHRpbWVGcmFnbWVudEFycmF5LnB1c2godGVtcGN1clRpbWUueWVhcigpLnRvU3RyaW5nKCkpOwogICAgICAgICAgICBjdXJUaW1lID0gdGVtcGN1clRpbWUuY2xvbmUoKS5hZGQoMSwgJ3llYXJzJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjdXJUaW1lID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gLy9ncm91cE1vZGXkuLoiUVVBUlRFUiIKCgogICAgICBpZiAoT2JqZWN0LmlzKGdyb3VwTW9kZSwgIlFVQVJURVIiKSkgewogICAgICAgIHZhciBfY3VyVGltZSA9IG1pblRpbWU7CgogICAgICAgIHdoaWxlIChfY3VyVGltZSkgewogICAgICAgICAgaWYgKF9jdXJUaW1lLmlzU2FtZU9yQmVmb3JlKG1heFRpbWUpKSB7CiAgICAgICAgICAgIHZhciBfdGVtcGN1clRpbWUgPSBfY3VyVGltZS5jbG9uZSgpOwoKICAgICAgICAgICAgdGltZUZyYWdtZW50QXJyYXkucHVzaChfdGVtcGN1clRpbWUueWVhcigpLnRvU3RyaW5nKCkgKyAiLSIgKyBfdGVtcGN1clRpbWUucXVhcnRlcigpLnRvU3RyaW5nKCkpOwogICAgICAgICAgICBfY3VyVGltZSA9IF90ZW1wY3VyVGltZS5jbG9uZSgpLmFkZCgxLCAncXVhcnRlcnMnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF9jdXJUaW1lID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gLy9ncm91cE1vZGXkuLoiTU9OVEgiCgoKICAgICAgaWYgKE9iamVjdC5pcyhncm91cE1vZGUsICJNT05USCIpKSB7CiAgICAgICAgdmFyIF9jdXJUaW1lMiA9IG1pblRpbWU7CgogICAgICAgIHdoaWxlIChfY3VyVGltZTIpIHsKICAgICAgICAgIGlmIChfY3VyVGltZTIuaXNTYW1lT3JCZWZvcmUobWF4VGltZSkpIHsKICAgICAgICAgICAgdmFyIF90ZW1wY3VyVGltZTIgPSBfY3VyVGltZTIuY2xvbmUoKTsKCiAgICAgICAgICAgIHRpbWVGcmFnbWVudEFycmF5LnB1c2goX3RlbXBjdXJUaW1lMi55ZWFyKCkudG9TdHJpbmcoKSArICItIiArIF90ZW1wY3VyVGltZTIubW9udGgoKS50b1N0cmluZygpKTsKICAgICAgICAgICAgX2N1clRpbWUyID0gX3RlbXBjdXJUaW1lMi5jbG9uZSgpLmFkZCgxLCAnbW9udGhzJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfY3VyVGltZTIgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSAvL2dyb3VwTW9kZeS4uiJZRUFSV0VFSyIKCgogICAgICBpZiAoT2JqZWN0LmlzKGdyb3VwTW9kZSwgIllFQVJXRUVLIikpIHsKICAgICAgICB2YXIgX2N1clRpbWUzID0gbWluVGltZTsKCiAgICAgICAgd2hpbGUgKF9jdXJUaW1lMykgewogICAgICAgICAgaWYgKF9jdXJUaW1lMy5pc1NhbWVPckJlZm9yZShtYXhUaW1lKSkgewogICAgICAgICAgICB2YXIgX3RlbXBjdXJUaW1lMyA9IF9jdXJUaW1lMy5jbG9uZSgpOwoKICAgICAgICAgICAgdGltZUZyYWdtZW50QXJyYXkucHVzaChfdGVtcGN1clRpbWUzLnllYXIoKS50b1N0cmluZygpICsgIi0iICsgX3RlbXBjdXJUaW1lMy53ZWVrKCkudG9TdHJpbmcoKSk7CiAgICAgICAgICAgIF9jdXJUaW1lMyA9IF90ZW1wY3VyVGltZTMuY2xvbmUoKS5hZGQoMSwgJ3dlZWtzJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfY3VyVGltZTMgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSAvL2dyb3VwTW9kZeS4uiJEQVkiCgoKICAgICAgaWYgKE9iamVjdC5pcyhncm91cE1vZGUsICJEQVkiKSkgewogICAgICAgIHZhciBfY3VyVGltZTQgPSBtaW5UaW1lOwoKICAgICAgICB3aGlsZSAoX2N1clRpbWU0KSB7CiAgICAgICAgICBpZiAoX2N1clRpbWU0LmlzU2FtZU9yQmVmb3JlKG1heFRpbWUpKSB7CiAgICAgICAgICAgIHZhciBfdGVtcGN1clRpbWU0ID0gX2N1clRpbWU0LmNsb25lKCk7CgogICAgICAgICAgICB0aW1lRnJhZ21lbnRBcnJheS5wdXNoKF90ZW1wY3VyVGltZTQuZm9ybWF0KCdZWVlZLU1NLUREJykpOwogICAgICAgICAgICBfY3VyVGltZTQgPSBfdGVtcGN1clRpbWU0LmNsb25lKCkuYWRkKDEsICdkYXlzJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfY3VyVGltZTQgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgdmFyIHRlbXBLZXlTdHIgPSBpdGVtW2dyb3VwRmllbGQubmFtZV07CiAgICAgICAgdmFyIHRlbXBHcm91bnBJdGVtID0gdGVtcEdyb3VucERhdGEuZ2V0KHRlbXBLZXlTdHIpOwoKICAgICAgICBpZiAoIXRlbXBHcm91bnBJdGVtKSB7CiAgICAgICAgICB0ZW1wR3JvdW5wRGF0YS5zZXQodGVtcEtleVN0ciwgaXRlbSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdGltZUZyYWdtZW50QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodGltZUZyYWdtZW50KSB7CiAgICAgICAgaWYgKCF0ZW1wR3JvdW5wRGF0YS5nZXQodGltZUZyYWdtZW50KSkgewogICAgICAgICAgdmFyIGNvcHlUZW1wID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhWzBdKSk7CiAgICAgICAgICB2YXIgY3VyT2JqID0ge307CiAgICAgICAgICBjdXJPYmpbZ3JvdXBGaWVsZC5uYW1lXSA9IHRpbWVGcmFnbWVudDsKICAgICAgICAgIGN1ck9ialt2YWx1ZUZpZWxkLm5hbWVdID0gMDsKICAgICAgICAgIE9iamVjdC5hc3NpZ24oY29weVRlbXAsIGN1ck9iaik7CiAgICAgICAgICBkYXRhLnB1c2goY29weVRlbXApOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDooaXlhajku6PnoIHooagNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gZGF0YSDkvKDlhaXmlbDmja4NCiAgICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGl0ZW0g5Y2V5Liq5bqP5YiXDQogICAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBhbGxDb2RlTGlzdCDmiYDmnInnmoTku6PnoIHooagNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBEYl9zeXNwb3J0bGV0MV9jaGFydEJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY29tcGxldGVDb2RlTGlzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGxldGVDb2RlTGlzdChkYXRhLCBpdGVtLCBhbGxDb2RlTGlzdCkgewogICAgICB2YXIgZ3JvdXBGaWVsZCA9IGl0ZW0uZGF0YVNldEZpZWxkcy5maW5kKGZ1bmN0aW9uIChkYXRhc2V0RmllbGQpIHsKICAgICAgICByZXR1cm4gZGF0YXNldEZpZWxkLm5hbWUgPT09IGl0ZW0uY2F0ZWdvckZpZWxkOwogICAgICB9KTsKCiAgICAgIGlmICghZ3JvdXBGaWVsZC5jb2RlbGlzdCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHZhbHVlRmllbGQgPSBpdGVtLmRhdGFTZXRGaWVsZHMuZmluZChmdW5jdGlvbiAoZGF0YXNldEZpZWxkKSB7CiAgICAgICAgcmV0dXJuIGRhdGFzZXRGaWVsZC5uYW1lID09PSBpdGVtLnZhbHVlRmllbGQ7CiAgICAgIH0pOwogICAgICB2YXIgY3VyQ29kZUxpc3QgPSBhbGxDb2RlTGlzdC5nZXQoZ3JvdXBGaWVsZC5jb2RlbGlzdC50YWcpOyAvLyDlr7nliIbnsbvlrp7njrDliIbnu4QKCiAgICAgIHZhciB0ZW1wR3JvdW5wRGF0YSA9IG5ldyBNYXAoKTsKICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgdmFyIHRlbXBHcm91bnBJdGVtID0gdGVtcEdyb3VucERhdGEuZ2V0KGl0ZW1bZ3JvdXBGaWVsZC5uYW1lICsgJ19zcmZ2YWx1ZSddKTsKCiAgICAgICAgaWYgKCF0ZW1wR3JvdW5wSXRlbSkgewogICAgICAgICAgdGVtcEdyb3VucERhdGEuc2V0KGl0ZW1bZ3JvdXBGaWVsZC5uYW1lICsgJ19zcmZ2YWx1ZSddLCBpdGVtKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKGN1ckNvZGVMaXN0LnNpemUgIT09IHRlbXBHcm91bnBEYXRhLnNpemUpIHsKICAgICAgICBjdXJDb2RlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh0ZXh0LCB2YWx1ZSkgewogICAgICAgICAgaWYgKCF0ZW1wR3JvdW5wRGF0YS5nZXQodmFsdWUpKSB7CiAgICAgICAgICAgIHZhciBjb3B5VGVtcCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YVswXSkpOwogICAgICAgICAgICB2YXIgY3VyT2JqID0ge307CiAgICAgICAgICAgIGN1ck9ialtncm91cEZpZWxkLm5hbWUgKyAnX3NyZnZhbHVlJ10gPSB2YWx1ZTsKICAgICAgICAgICAgY3VyT2JqW2dyb3VwRmllbGQubmFtZV0gPSB0ZXh0OwogICAgICAgICAgICBjdXJPYmpbdmFsdWVGaWVsZC5uYW1lXSA9IDA7CiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY29weVRlbXAsIGN1ck9iaik7CiAgICAgICAgICAgIGRhdGEucHVzaChjb3B5VGVtcCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOWkhOeQhuWNleS4quWxnuaApw0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBpbnB1dCDovpPlhaXlgLwNCiAgICAgKiBAcGFyYW0geyp9IGZpZWxkIOWxnuaAp+WAvA0KICAgICAqIEBwYXJhbSB7Kn0gYWxsQ29kZUxpc3Qg5omA5pyJ5Luj56CB6KGoDQogICAgICogQHBhcmFtIHsqfSByZXN1bHQg57uT5p6c5YC8DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgRGJfc3lzcG9ydGxldDFfY2hhcnRCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImhhbmRsZVNpbmdsZURhdGFTZXRGaWVsZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2luZ2xlRGF0YVNldEZpZWxkKGlucHV0LCBmaWVsZCwgYWxsQ29kZUxpc3QsIHJlc3VsdCwgZ3JvdXBGaWVsZCkgewogICAgICB2YXIgdGVtcEZpZWxkT2JqID0ge307IC8v5a2Y5Zyo5Luj56CB6KGo55qE5oOF5Ya1KOiHquWKqOi9rOWMluWAvCkKCiAgICAgIGlmIChmaWVsZC5jb2RlbGlzdCkgewogICAgICAgIC8v6I635Y+W5Luj56CB6KGoCiAgICAgICAgdmFyIGN1ckNvZGVMaXN0ID0gYWxsQ29kZUxpc3QuZ2V0KGZpZWxkLmNvZGVsaXN0LnRhZyk7CiAgICAgICAgdGVtcEZpZWxkT2JqW2ZpZWxkLm5hbWVdID0gY3VyQ29kZUxpc3QuZ2V0KGlucHV0W2ZpZWxkLm5hbWVdKTsKICAgICAgICB0ZW1wRmllbGRPYmpbZmllbGQubmFtZSArICdfc3JmdmFsdWUnXSA9IGlucHV0W2ZpZWxkLm5hbWVdOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIOS4jeWtmOWcqOS7o+eggeihqOeahOaDheWGtQogICAgICAgIGlmIChncm91cEZpZWxkICYmIE9iamVjdC5pcyhncm91cEZpZWxkLm5hbWUsIGZpZWxkLm5hbWUpKSB7CiAgICAgICAgICBpZiAoT2JqZWN0LmlzKGdyb3VwRmllbGQuZ3JvdXBNb2RlLCAiWUVBUiIpKSB7CiAgICAgICAgICAgIHRlbXBGaWVsZE9ialtmaWVsZC5uYW1lXSA9IG1vbWVudChpbnB1dFtmaWVsZC5uYW1lXSkueWVhcigpLnRvU3RyaW5nKCk7CiAgICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5pcyhncm91cEZpZWxkLmdyb3VwTW9kZSwgIlFVQVJURVIiKSkgewogICAgICAgICAgICB0ZW1wRmllbGRPYmpbZmllbGQubmFtZV0gPSBtb21lbnQoaW5wdXRbZmllbGQubmFtZV0pLnllYXIoKS50b1N0cmluZygpICsgIi0iICsgbW9tZW50KGlucHV0W2ZpZWxkLm5hbWVdKS5xdWFydGVycygpLnRvU3RyaW5nKCk7CiAgICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5pcyhncm91cEZpZWxkLmdyb3VwTW9kZSwgIk1PTlRIIikpIHsKICAgICAgICAgICAgdGVtcEZpZWxkT2JqW2ZpZWxkLm5hbWVdID0gbW9tZW50KGlucHV0W2ZpZWxkLm5hbWVdKS55ZWFyKCkudG9TdHJpbmcoKSArICItIiArIG1vbWVudChpbnB1dFtmaWVsZC5uYW1lXSkubW9udGgoKS50b1N0cmluZygpOwogICAgICAgICAgfSBlbHNlIGlmIChPYmplY3QuaXMoZ3JvdXBGaWVsZC5ncm91cE1vZGUsICJZRUFSV0VFSyIpKSB7CiAgICAgICAgICAgIHRlbXBGaWVsZE9ialtmaWVsZC5uYW1lXSA9IG1vbWVudChpbnB1dFtmaWVsZC5uYW1lXSkueWVhcigpLnRvU3RyaW5nKCkgKyAiLSIgKyBtb21lbnQoaW5wdXRbZmllbGQubmFtZV0pLndlZWsoKS50b1N0cmluZygpOwogICAgICAgICAgfSBlbHNlIGlmIChPYmplY3QuaXMoZ3JvdXBGaWVsZC5ncm91cE1vZGUsICJEQVkiKSkgewogICAgICAgICAgICB0ZW1wRmllbGRPYmpbZmllbGQubmFtZV0gPSBtb21lbnQoaW5wdXRbZmllbGQubmFtZV0pLmZvcm1hdCgiWVlZWS1NTS1ERCIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGVtcEZpZWxkT2JqW2ZpZWxkLm5hbWVdID0gaW5wdXRbZmllbGQubmFtZV07CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRlbXBGaWVsZE9ialtmaWVsZC5uYW1lXSA9IGlucHV0W2ZpZWxkLm5hbWVdOwogICAgICAgIH0KICAgICAgfQoKICAgICAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIHRlbXBGaWVsZE9iaik7CiAgICB9CiAgICAvKioNCiAgICAgKiDojrflj5blm77ooajmiYDpnIDku6PnoIHooagNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBEYl9zeXNwb3J0bGV0MV9jaGFydEJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0Q2hhcnRBbGxDb2RlTGlzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hhcnRBbGxDb2RlTGlzdCgpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBjb2RlTGlzdE1hcCA9IG5ldyBNYXAoKTsKCiAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoX3RoaXM3LnNlcmllc01vZGVsKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICB2YXIgdGVtcEZsYWcgPSB0cnVlOwogICAgICAgICAgT2JqZWN0LnZhbHVlcyhfdGhpczcuc2VyaWVzTW9kZWwpLmZvckVhY2goZnVuY3Rpb24gKHNpbmdsZVNlcmllcykgewogICAgICAgICAgICBpZiAoc2luZ2xlU2VyaWVzLmRhdGFTZXRGaWVsZHMgJiYgc2luZ2xlU2VyaWVzLmRhdGFTZXRGaWVsZHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIHZhciBwcm9taXNlQXJyYXkgPSBbXTsKICAgICAgICAgICAgICB2YXIgcHJvbWlzZUtleUFycmF5ID0gW107CiAgICAgICAgICAgICAgc2luZ2xlU2VyaWVzLmRhdGFTZXRGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoc2luZ2xlRGF0YVNldEZpZWxkLCBpbmRleCkgewogICAgICAgICAgICAgICAgaWYgKHNpbmdsZURhdGFTZXRGaWVsZC5jb2RlbGlzdCkgewogICAgICAgICAgICAgICAgICB0ZW1wRmxhZyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgaWYgKCFjb2RlTGlzdE1hcC5nZXQoc2luZ2xlRGF0YVNldEZpZWxkLmNvZGVsaXN0LnRhZykpIHsKICAgICAgICAgICAgICAgICAgICBwcm9taXNlQXJyYXkucHVzaChfdGhpczcuZ2V0Q29kZUxpc3Qoc2luZ2xlRGF0YVNldEZpZWxkLmNvZGVsaXN0KSk7CiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZUtleUFycmF5LnB1c2goc2luZ2xlRGF0YVNldEZpZWxkLmNvZGVsaXN0LnRhZyk7CiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZUFycmF5KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGNvZGVMaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBDb2RlTGlzdE1hcCA9IG5ldyBNYXAoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGVMaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGNvZGVMaXN0SXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQ29kZUxpc3RNYXAuc2V0KGNvZGVMaXN0SXRlbS52YWx1ZSwgY29kZUxpc3RJdGVtLnRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlTGlzdE1hcC5zZXQoc2luZ2xlRGF0YVNldEZpZWxkLmNvZGVsaXN0LnRhZywgdGVtcENvZGVMaXN0TWFwKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY29kZUxpc3RNYXApOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwoKICAgICAgICAgIGlmICh0ZW1wRmxhZykgewogICAgICAgICAgICByZXNvbHZlKGNvZGVMaXN0TWFwKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShjb2RlTGlzdE1hcCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOiOt+WPluS7o+eggeihqA0KICAgICAqDQogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0NCiAgICAgKiBAbWVtYmVyb2YgRGJfc3lzcG9ydGxldDFfY2hhcnRCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldENvZGVMaXN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb2RlTGlzdChjb2RlTGlzdE9iamVjdCkgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgaWYgKGNvZGVMaXN0T2JqZWN0LnRhZyAmJiBPYmplY3QuaXMoY29kZUxpc3RPYmplY3QudHlwZSwgIlNUQVRJQyIpKSB7CiAgICAgICAgICB2YXIgY29kZWxpc3QgPSBfdGhpczguJHN0b3JlLmdldHRlcnMuZ2V0Q29kZUxpc3QoY29kZUxpc3RPYmplY3QudGFnKTsKCiAgICAgICAgICBpZiAoY29kZWxpc3QpIHsKICAgICAgICAgICAgcmVzb2x2ZShfdG9Db25zdW1hYmxlQXJyYXkoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb2RlbGlzdC5pdGVtcykpKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLmxvZygiLS0tLSIuY29uY2F0KGNvZGVMaXN0T2JqZWN0LnRhZywgIi0tLS1cdTRFRTNcdTc4MDFcdTg4NjhcdTRFMERcdTVCNThcdTU3MjgiKSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChjb2RlTGlzdE9iamVjdC50YWcgJiYgT2JqZWN0LmlzKGNvZGVMaXN0T2JqZWN0LnR5cGUsICJEWU5BTUlDIikpIHsKICAgICAgICAgIF90aGlzOC5jb2RlTGlzdFNlcnZpY2UuZ2V0SXRlbXMoY29kZUxpc3RPYmplY3QudGFnKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXMpOwogICAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCItLS0tIi5jb25jYXQoY29kZUxpc3RPYmplY3QudGFnLCAiLS0tLVx1NEVFM1x1NzgwMVx1ODg2OFx1NEUwRFx1NUI1OFx1NTcyOCIpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gT3JnQmFyQmFzZTsKfShWdWUpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBPcmdCYXJCYXNlLnByb3RvdHlwZSwgIm5hbWUiLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBPcmdCYXJCYXNlLnByb3RvdHlwZSwgInZpZXdTdGF0ZSIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIE9yZ0JhckJhc2UucHJvdG90eXBlLCAiY29udGV4dCIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIE9yZ0JhckJhc2UucHJvdG90eXBlLCAidmlld3BhcmFtcyIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogdHJ1ZQp9KV0sIE9yZ0JhckJhc2UucHJvdG90eXBlLCAic2hvd0J1c3lJbmRpY2F0b3IiLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBPcmdCYXJCYXNlLnByb3RvdHlwZSwgImZldGNoQWN0aW9uIiwgdm9pZCAwKTsKCk9yZ0JhckJhc2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW0NvbXBvbmVudCh7CiAgY29tcG9uZW50czoge30KfSldLCBPcmdCYXJCYXNlKTsKZXhwb3J0IGRlZmF1bHQgT3JnQmFyQmFzZTs="},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-correction-apply\\pim-correction-apply-ui-service-base.ts","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-correction-apply\\pim-correction-apply-ui-service-base.ts","mtime":1630509410768},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICdAL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudCc7CmltcG9ydCBVSVNlcnZpY2UgZnJvbSAnLi4vdWktc2VydmljZSc7CmltcG9ydCBQaW1Db3JyZWN0aW9uQXBwbHlTZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9waW0tY29ycmVjdGlvbi1hcHBseS9waW0tY29ycmVjdGlvbi1hcHBseS1zZXJ2aWNlJzsKLyoqDQogKiBCL1nnsbvlkZjlt6XovazmraPnlLPor7fmmI7nu4bvvIjlgZznlKjvvIlVSeacjeWKoeWvueixoeWfuuexuw0KICoNCiAqIEBleHBvcnQNCiAqIEBjbGFzcyBQaW1Db3JyZWN0aW9uQXBwbHlVSVNlcnZpY2VCYXNlDQogKi8KCnZhciBQaW1Db3JyZWN0aW9uQXBwbHlVSVNlcnZpY2VCYXNlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1VJU2VydmljZSkgewogIF9pbmhlcml0cyhQaW1Db3JyZWN0aW9uQXBwbHlVSVNlcnZpY2VCYXNlLCBfVUlTZXJ2aWNlKTsKCiAgLyoqDQogICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgIFBpbUNvcnJlY3Rpb25BcHBseVVJU2VydmljZUJhc2UuDQogICAqDQogICAqIEBwYXJhbSB7Kn0gW29wdHM9e31dDQogICAqIEBtZW1iZXJvZiAgUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZQ0KICAgKi8KICBmdW5jdGlvbiBQaW1Db3JyZWN0aW9uQXBwbHlVSVNlcnZpY2VCYXNlKCkgewogICAgdmFyIF90aGlzOwoKICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZSk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZSkuY2FsbCh0aGlzLCBvcHRzKSk7CiAgICAvKioNCiAgICAgKiDmmK/lkKbmlK/mjIHlt6XkvZzmtYENCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzLmlzRW5hYmxlV29ya2Zsb3cgPSBmYWxzZTsKICAgIC8qKg0KICAgICAqIOW9k+WJjVVJ5pyN5Yqh5a+55bqU55qE5pWw5o2u5pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUNvcnJlY3Rpb25BcHBseVVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5kYXRhU2VydmljZSA9IG5ldyBQaW1Db3JyZWN0aW9uQXBwbHlTZXJ2aWNlKCk7CiAgICAvKioNCiAgICAgKiDmiYDmnInlhbPogZTop4blm74NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzLmFsbFZpZXdNYXAgPSBuZXcgTWFwKCk7CiAgICAvKioNCiAgICAgKiDnirbmgIHlgLwNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzLnN0YXRlVmFsdWUgPSAwOwogICAgLyoqDQogICAgICog54q25oCB5bGe5oCnDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUNvcnJlY3Rpb25BcHBseVVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5zdGF0ZUZpZWxkID0gIiI7CiAgICAvKioNCiAgICAgKiDkuLvnirbmgIHlsZ7mgKfpm4blkIgNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzLm1haW5TdGF0ZUZpZWxkcyA9IFtdOwogICAgLyoqDQogICAgICog5Li754q25oCB6ZuG5ZCITWFwDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUNvcnJlY3Rpb25BcHBseVVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5hbGxEZU1haW5TdGF0ZU1hcCA9IG5ldyBNYXAoKTsKCiAgICBfdGhpcy5pbml0Vmlld01hcCgpOwoKICAgIF90aGlzLmluaXREZU1haW5TdGF0ZU1hcCgpOwoKICAgIHJldHVybiBfdGhpczsKICB9CiAgLyoqDQogICAqIOWIneWni+WMluinhuWbvk1hcA0KICAgKg0KICAgKiBAbWVtYmVyb2YgIFBpbUNvcnJlY3Rpb25BcHBseVVJU2VydmljZUJhc2UNCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZSwgW3sKICAgIGtleTogImluaXRWaWV3TWFwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0Vmlld01hcCgpIHt9CiAgICAvKioNCiAgICAgKiDliJ3lp4vljJbkuLvnirbmgIHpm4blkIgNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpbml0RGVNYWluU3RhdGVNYXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXREZU1haW5TdGF0ZU1hcCgpIHt9CiAgICAvKioNCiAgICAgKiDojrflj5bmjIflrprmlbDmja7nmoTph43lrprlkJHpobXpnaINCiAgICAgKg0KICAgICAqIEBwYXJhbSBzcmZrZXkg5pWw5o2u5Li76ZSuDQogICAgICogQHBhcmFtIGlzRW5hYmxlV29ya2Zsb3cgIOmHjeWumuWQkeinhuWbvuaYr+WQpumcgOimgeWkhOeQhua1geeoi+S4reeahOaVsOaNrg0KICAgICAqIEBtZW1iZXJvZiAgUGltQ29ycmVjdGlvbkFwcGx5VUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRSREFwcFZpZXciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRSREFwcFZpZXcgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHNyZmtleSwgaXNFbmFibGVXb3JrZmxvdykgewogICAgICAgIHZhciByZXN1bHQsIGN1ckRhdGEsIGlSZWFsREVNb2RlbCwgYkRhdGFJbldGLCBiV0ZNb2RlLCBzdHJQRFRWaWV3UGFyYW07CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZVdvcmtmbG93ID0gaXNFbmFibGVXb3JrZmxvdzsgLy8g6L+b6KGM5pWw5o2u5p+l6K+iCgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5HZXQoewogICAgICAgICAgICAgICAgICBwaW1jb3JyZWN0aW9uYXBwbHk6IHNyZmtleQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBjdXJEYXRhID0gcmVzdWx0LmRhdGE7IC8v5Yik5pat5b2T5YmN5pWw5o2u5qih5byPLOm7mOiupOS4unRydWXvvIx0b2RvCgogICAgICAgICAgICAgICAgaVJlYWxERU1vZGVsID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGJEYXRhSW5XRiA9IGZhbHNlOwogICAgICAgICAgICAgICAgYldGTW9kZSA9IGZhbHNlOyAvLyDorqHnrpfmlbDmja7mqKHlvI8KCiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVXb3JrZmxvdykgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLnRlc3REYXRhSW5XRih7CiAgICAgICAgICAgICAgICAgIHN0YXRlVmFsdWU6IHRoaXMuc3RhdGVWYWx1ZSwKICAgICAgICAgICAgICAgICAgc3RhdGVGaWVsZDogdGhpcy5zdGF0ZUZpZWxkCiAgICAgICAgICAgICAgICB9LCBjdXJEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIGJEYXRhSW5XRiA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFiRGF0YUluV0YpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBiRGF0YUluV0YgPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UudGVzdFVzZXJFeGlzdFdvcmtsaXN0KG51bGwsIGN1ckRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgYldGTW9kZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRERVNEREVWaWV3UERUUGFyYW0oY3VyRGF0YSwgYkRhdGFJbldGLCBiV0ZNb2RlKTsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIHN0clBEVFZpZXdQYXJhbSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmFsbFZpZXdNYXAuZ2V0KHN0clBEVFZpZXdQYXJhbSkpOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldFJEQXBwVmlldyhfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF9nZXRSREFwcFZpZXcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldFJEQXBwVmlldzsKICAgIH0oKQogICAgLyoqDQogICAgICog6I635Y+W5a6e6ZmF55qE5pWw5o2u57G75Z6LDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUNvcnJlY3Rpb25BcHBseVVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0UmVhbERFVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVhbERFVHlwZShlbnRpdHkpIHt9CiAgICAvKioNCiAgICAgKiDojrflj5blrp7kvZPljZXmlbDmja7lrp7kvZPop4blm77pooTlrprkuYnlj4LmlbANCiAgICAgKg0KICAgICAqIEBwYXJhbSBjdXJEYXRhIOW9k+WJjeaVsOaNrg0KICAgICAqIEBwYXJhbSBiRGF0YUluV0Yg5piv5ZCm5pyJ5pWw5o2u5Zyo5bel5L2c5rWB5LitDQogICAgICogQHBhcmFtIGJXRk1vZGUgICDmmK/lkKblt6XkvZzmtYHmqKHlvI8NCiAgICAgKiBAbWVtYmVyb2YgIFBpbUNvcnJlY3Rpb25BcHBseVVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0REVTRERFVmlld1BEVFBhcmFtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0REVTRERFVmlld1BEVFBhcmFtID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoY3VyRGF0YSwgYkRhdGFJbldGLCBiV0ZNb2RlKSB7CiAgICAgICAgdmFyIHN0clBEVFBhcmFtLCBpc0VuYWJsZU11bHRpRm9ybSwgbXVsdGlGb3JtREVGaWVsZCwgb2JqRm9ybVZhbHVlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdHJQRFRQYXJhbSA9ICcnOwoKICAgICAgICAgICAgICAgIGlmIChiRGF0YUluV0YpIHt9IC8vIOWIpOaWreaVsOaNruaYr+WQpuWcqOa1geeoi+S4rQogICAgICAgICAgICAgICAgLy/lpJrooajljZXvvIx0b2RvCgoKICAgICAgICAgICAgICAgIGlzRW5hYmxlTXVsdGlGb3JtID0gZmFsc2U7CiAgICAgICAgICAgICAgICBtdWx0aUZvcm1ERUZpZWxkID0gbnVsbDsKCiAgICAgICAgICAgICAgICBpZiAoIShpc0VuYWJsZU11bHRpRm9ybSAmJiBtdWx0aUZvcm1ERUZpZWxkKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG9iakZvcm1WYWx1ZSA9IGN1ckRhdGFbbXVsdGlGb3JtREVGaWVsZF07CgogICAgICAgICAgICAgICAgaWYgKEVudmlyb25tZW50LmlzQXBwTW9kZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCAnTU9CRURJVFZJRVcnICsgb2JqRm9ybVZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsICdFRElUVklFVycgKyBvYmpGb3JtVmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBpZiAoRW52aXJvbm1lbnQuaXNBcHBNb2RlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghdGhpcy5nZXRERU1haW5TdGF0ZVRhZyhjdXJEYXRhKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSAiTU9CRURJVFZJRVc6TVNUQUc6IjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRERU1haW5TdGF0ZVRhZyhjdXJEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi50MC5jb25jYXQuY2FsbChfY29udGV4dDIudDAsIF9jb250ZXh0Mi50MSkpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsICdNT0JFRElUVklFVzonKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIGlmICghdGhpcy5nZXRERU1haW5TdGF0ZVRhZyhjdXJEYXRhKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDIudDIgPSAiRURJVFZJRVc6TVNUQUc6IjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRERU1haW5TdGF0ZVRhZyhjdXJEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi50Mi5jb25jYXQuY2FsbChfY29udGV4dDIudDIsIF9jb250ZXh0Mi50MykpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsICdFRElUVklFVzonKTsKCiAgICAgICAgICAgICAgY2FzZSAyNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldERFU0RERVZpZXdQRFRQYXJhbShfeDMsIF94NCwgX3g1KSB7CiAgICAgICAgcmV0dXJuIF9nZXRERVNEREVWaWV3UERUUGFyYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldERFU0RERVZpZXdQRFRQYXJhbTsKICAgIH0oKQogICAgLyoqDQogICAgICog6I635Y+W5pWw5o2u5a+56LGh55qE5Li754q25oCB5qCH6K+GDQogICAgICoNCiAgICAgKiBAcGFyYW0gY3VyRGF0YSDlvZPliY3mlbDmja4NCiAgICAgKiBAbWVtYmVyb2YgIFBpbUNvcnJlY3Rpb25BcHBseVVJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0REVNYWluU3RhdGVUYWciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRERU1haW5TdGF0ZVRhZyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKGN1ckRhdGEpIHsKICAgICAgICB2YXIgc3RyVGFnLCBpLCBfc3RyVGFnLCBqLCBzdHJUYWcyLCBrLCBzdHJUYWczOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCEodGhpcy5tYWluU3RhdGVGaWVsZHMubGVuZ3RoID09PSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBudWxsKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgdGhpcy5tYWluU3RhdGVGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoc2luZ2xlTWFpbkZpZWxkKSB7CiAgICAgICAgICAgICAgICAgIGlmICghKHNpbmdsZU1haW5GaWVsZCBpbiBjdXJEYXRhKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlx1NUY1M1x1NTI0RFx1NjU3MFx1NjM2RVx1NUJGOVx1OEM2MVx1NEUwRFx1NTMwNVx1NTQyQlx1NUM1RVx1NjAyN3NpbmdsZU1haW5GaWVsZFx1RkYwQ1x1NTNFRlx1ODBGRFx1NEYxQVx1NTNEMVx1NzUxRlx1OTUxOVx1OEJFRiIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHN0clRhZyA9ICIiOwogICAgICAgICAgICAgICAgaSA9IDA7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGlmICghKGkgPD0gMSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3N0clRhZyA9IGN1ckRhdGFbdGhpcy5tYWluU3RhdGVGaWVsZHNbMF1dID8gaSA9PSAwID8gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1swXV0gOiAiIiA6ICIiOwoKICAgICAgICAgICAgICAgIGlmICghKHRoaXMubWFpblN0YXRlRmllbGRzLmxlbmd0aCA+PSAyKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBqID0gMDsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaWYgKCEoaiA8PSAxKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBzdHJUYWcyID0gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1sxXV0gPyAiIi5jb25jYXQoX3N0clRhZywgIl9fIikuY29uY2F0KGogPT0gMCA/IGN1ckRhdGFbdGhpcy5tYWluU3RhdGVGaWVsZHNbMV1dIDogIiIpIDogX3N0clRhZzsKCiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm1haW5TdGF0ZUZpZWxkcy5sZW5ndGggPj0gMykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgayA9IDA7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBpZiAoIShrIDw9IDEpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN0clRhZzMgPSBjdXJEYXRhW3RoaXMubWFpblN0YXRlRmllbGRzWzJdXSA/ICIiLmNvbmNhdChzdHJUYWcyLCAiX18iKS5jb25jYXQoayA9PSAwID8gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1syXV0gOiAiIikgOiBzdHJUYWcyOyAvLyDliKTmlq3mmK/lkKblrZjlnKgKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgdGhpcy5hbGxEZU1haW5TdGF0ZU1hcC5nZXQoc3RyVGFnMykpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgaysrOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHRoaXMuYWxsRGVNYWluU3RhdGVNYXAuZ2V0KHN0clRhZzIpKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIGorKzsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHRoaXMuYWxsRGVNYWluU3RhdGVNYXAuZ2V0KF9zdHJUYWcpKTsKCiAgICAgICAgICAgICAgY2FzZSAyODoKICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICAgICAgICBjYXNlIDMyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0REVNYWluU3RhdGVUYWcoX3g2KSB7CiAgICAgICAgcmV0dXJuIF9nZXRERU1haW5TdGF0ZVRhZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0REVNYWluU3RhdGVUYWc7CiAgICB9KCkKICB9XSk7CgogIHJldHVybiBQaW1Db3JyZWN0aW9uQXBwbHlVSVNlcnZpY2VCYXNlOwp9KFVJU2VydmljZSk7CgpleHBvcnQgeyBQaW1Db3JyZWN0aW9uQXBwbHlVSVNlcnZpY2VCYXNlIGFzIGRlZmF1bHQgfTs="},null]}
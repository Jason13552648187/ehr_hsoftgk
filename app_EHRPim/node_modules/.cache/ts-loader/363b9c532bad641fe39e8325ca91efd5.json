{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-contract\\pim-contract-ui-service-base.ts","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-contract\\pim-contract-ui-service-base.ts","mtime":1630509410766},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\service\\pim-person\\pim-person-service-base.ts","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\service\\pim-person\\pim-person-service-base.ts","mtime":1630509410579},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import "core-js/modules/es.array.for-each";
import "core-js/modules/es.object.is";
import "core-js/modules/web.dom-collections.for-each";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";
import _inherits from "F:\\crod\u9879\u76EE\\\u4EBA\u4E8B\u7BA1\u7406\u7CFB\u7EDF2\\iBizEHR\\app_EHRPim\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import { Http } from '@/utils';
import EntityService from '../entity-service';
import GetJTLXRDHLogic from '@/service/pim-person/get-jtlxrdh-logic';
/**
 * 人员信息服务对象基类
 *
 * @export
 * @class PimPersonServiceBase
 * @extends {EntityServie}
 */

var PimPersonServiceBase =
/*#__PURE__*/
function (_EntityService) {
  _inherits(PimPersonServiceBase, _EntityService);

  /**
   * Creates an instance of  PimPersonServiceBase.
   *
   * @param {*} [opts={}]
   * @memberof  PimPersonServiceBase
   */
  function PimPersonServiceBase() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PimPersonServiceBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(PimPersonServiceBase).call(this, opts));
  }
  /**
   * 初始化基础数据
   *
   * @memberof PimPersonServiceBase
   */


  _createClass(PimPersonServiceBase, [{
    key: "initBasicData",
    value: function initBasicData() {
      this.APPLYDEKEY = 'pimperson';
      this.APPDEKEY = 'pimpersonid';
      this.APPDENAME = 'pimpeople';
      this.APPDETEXT = 'pimpersonname';
      this.APPNAME = 'ehrpim';
      this.SYSTEMNAME = 'ehr';
    } // 实体接口

    /**
     * Select接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "Select",
    value: function () {
      var _Select = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var context,
            data,
            isloading,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                context = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                data = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                isloading = _args.length > 2 ? _args[2] : undefined;
                return _context.abrupt("return", Http.getInstance().get("/pimpeople/".concat(context.pimperson, "/select"), isloading));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function Select() {
        return _Select.apply(this, arguments);
      }

      return Select;
    }()
    /**
     * Update接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "Update",
    value: function () {
      var _Update = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var context,
            data,
            isloading,
            masterData,
            pimpersonabilitiesData,
            pimpapersData,
            pimdistirbutionsData,
            pimtitlesData,
            pimvocationalsData,
            pimarmycadresData,
            pimcorrectionappliesData,
            pimvacationsData,
            trmtrainpeopleData,
            pimcontractsData,
            pimeducationsData,
            pimpersonchangesData,
            pimachievementsData,
            pimresearchfindingsData,
            pimexitandentriesData,
            pimrewardpunishmentsData,
            pimpatentsData,
            pimlanguageabilitiesData,
            pimarchivesData,
            pimfaminfosData,
            attendancemreportmxesData,
            pimworkhistoriesData,
            res,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                context = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                isloading = _args2.length > 2 ? _args2[2] : undefined;
                masterData = {};
                pimpersonabilitiesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonabilities'), 'undefined')) {
                  pimpersonabilitiesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonabilities'));

                  if (pimpersonabilitiesData && pimpersonabilitiesData.length && pimpersonabilitiesData.length > 0) {
                    pimpersonabilitiesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpersonabilityid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpersonabilities = pimpersonabilitiesData;
                pimpapersData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpapers'), 'undefined')) {
                  pimpapersData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpapers'));

                  if (pimpapersData && pimpapersData.length && pimpapersData.length > 0) {
                    pimpapersData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpaperid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpapers = pimpapersData;
                pimdistirbutionsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimdistirbutions'), 'undefined')) {
                  pimdistirbutionsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimdistirbutions'));

                  if (pimdistirbutionsData && pimdistirbutionsData.length && pimdistirbutionsData.length > 0) {
                    pimdistirbutionsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimdistirbutionid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimdistirbutions = pimdistirbutionsData;
                pimtitlesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimtitles'), 'undefined')) {
                  pimtitlesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimtitles'));

                  if (pimtitlesData && pimtitlesData.length && pimtitlesData.length > 0) {
                    pimtitlesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimtitleid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimtitles = pimtitlesData;
                pimvocationalsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimvocationals'), 'undefined')) {
                  pimvocationalsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimvocationals'));

                  if (pimvocationalsData && pimvocationalsData.length && pimvocationalsData.length > 0) {
                    pimvocationalsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimvocationalid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimvocationals = pimvocationalsData;
                pimarmycadresData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimarmycadres'), 'undefined')) {
                  pimarmycadresData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimarmycadres'));

                  if (pimarmycadresData && pimarmycadresData.length && pimarmycadresData.length > 0) {
                    pimarmycadresData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimarmycadresid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimarmycadres = pimarmycadresData;
                pimcorrectionappliesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimcorrectionapplies'), 'undefined')) {
                  pimcorrectionappliesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimcorrectionapplies'));

                  if (pimcorrectionappliesData && pimcorrectionappliesData.length && pimcorrectionappliesData.length > 0) {
                    pimcorrectionappliesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimcorrectionapplyid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimcorrectionapplies = pimcorrectionappliesData;
                pimvacationsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimvacations'), 'undefined')) {
                  pimvacationsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimvacations'));

                  if (pimvacationsData && pimvacationsData.length && pimvacationsData.length > 0) {
                    pimvacationsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimvacationid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimvacations = pimvacationsData;
                trmtrainpeopleData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_trmtrainpeople'), 'undefined')) {
                  trmtrainpeopleData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_trmtrainpeople'));

                  if (trmtrainpeopleData && trmtrainpeopleData.length && trmtrainpeopleData.length > 0) {
                    trmtrainpeopleData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.trmtrianpersonid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.trmtrainpeople = trmtrainpeopleData;
                pimcontractsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimcontracts'), 'undefined')) {
                  pimcontractsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimcontracts'));

                  if (pimcontractsData && pimcontractsData.length && pimcontractsData.length > 0) {
                    pimcontractsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimcontractid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimcontracts = pimcontractsData;
                pimeducationsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimeducations'), 'undefined')) {
                  pimeducationsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimeducations'));

                  if (pimeducationsData && pimeducationsData.length && pimeducationsData.length > 0) {
                    pimeducationsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimeducationid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimeducations = pimeducationsData;
                pimpersonchangesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonchanges'), 'undefined')) {
                  pimpersonchangesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonchanges'));

                  if (pimpersonchangesData && pimpersonchangesData.length && pimpersonchangesData.length > 0) {
                    pimpersonchangesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpersonchangeid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpersonchanges = pimpersonchangesData;
                pimachievementsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimachievements'), 'undefined')) {
                  pimachievementsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimachievements'));

                  if (pimachievementsData && pimachievementsData.length && pimachievementsData.length > 0) {
                    pimachievementsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimachievementsid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimachievements = pimachievementsData;
                pimresearchfindingsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimresearchfindings'), 'undefined')) {
                  pimresearchfindingsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimresearchfindings'));

                  if (pimresearchfindingsData && pimresearchfindingsData.length && pimresearchfindingsData.length > 0) {
                    pimresearchfindingsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimresearchfindingsid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimresearchfindings = pimresearchfindingsData;
                pimexitandentriesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimexitandentries'), 'undefined')) {
                  pimexitandentriesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimexitandentries'));

                  if (pimexitandentriesData && pimexitandentriesData.length && pimexitandentriesData.length > 0) {
                    pimexitandentriesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimexitandentryid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimexitandentries = pimexitandentriesData;
                pimrewardpunishmentsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimrewardpunishments'), 'undefined')) {
                  pimrewardpunishmentsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimrewardpunishments'));

                  if (pimrewardpunishmentsData && pimrewardpunishmentsData.length && pimrewardpunishmentsData.length > 0) {
                    pimrewardpunishmentsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimrewardpunishmentid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimrewardpunishments = pimrewardpunishmentsData;
                pimpatentsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpatents'), 'undefined')) {
                  pimpatentsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpatents'));

                  if (pimpatentsData && pimpatentsData.length && pimpatentsData.length > 0) {
                    pimpatentsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpatentid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpatents = pimpatentsData;
                pimlanguageabilitiesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimlanguageabilities'), 'undefined')) {
                  pimlanguageabilitiesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimlanguageabilities'));

                  if (pimlanguageabilitiesData && pimlanguageabilitiesData.length && pimlanguageabilitiesData.length > 0) {
                    pimlanguageabilitiesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimlanguageabilityid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimlanguageabilities = pimlanguageabilitiesData;
                pimarchivesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimarchives'), 'undefined')) {
                  pimarchivesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimarchives'));

                  if (pimarchivesData && pimarchivesData.length && pimarchivesData.length > 0) {
                    pimarchivesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimarchivesid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimarchives = pimarchivesData;
                pimfaminfosData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimfaminfos'), 'undefined')) {
                  pimfaminfosData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimfaminfos'));

                  if (pimfaminfosData && pimfaminfosData.length && pimfaminfosData.length > 0) {
                    pimfaminfosData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimfaminfoid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimfaminfos = pimfaminfosData;
                attendancemreportmxesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_attendancemreportmxes'), 'undefined')) {
                  attendancemreportmxesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_attendancemreportmxes'));

                  if (attendancemreportmxesData && attendancemreportmxesData.length && attendancemreportmxesData.length > 0) {
                    attendancemreportmxesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.attendancemreportmxid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.attendancemreportmxes = attendancemreportmxesData;
                pimworkhistoriesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimworkhistories'), 'undefined')) {
                  pimworkhistoriesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimworkhistories'));

                  if (pimworkhistoriesData && pimworkhistoriesData.length && pimworkhistoriesData.length > 0) {
                    pimworkhistoriesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimworkhistoryid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimworkhistories = pimworkhistoriesData;
                Object.assign(data, masterData);
                _context2.next = 73;
                return Http.getInstance().put("/pimpeople/".concat(context.pimperson), data, isloading);

              case 73:
                res = _context2.sent;
                this.tempStorage.setItem(context.srfsessionkey + '_pimpersonabilities', JSON.stringify(res.data.pimpersonabilities));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpapers', JSON.stringify(res.data.pimpapers));
                this.tempStorage.setItem(context.srfsessionkey + '_pimdistirbutions', JSON.stringify(res.data.pimdistirbutions));
                this.tempStorage.setItem(context.srfsessionkey + '_pimtitles', JSON.stringify(res.data.pimtitles));
                this.tempStorage.setItem(context.srfsessionkey + '_pimvocationals', JSON.stringify(res.data.pimvocationals));
                this.tempStorage.setItem(context.srfsessionkey + '_pimarmycadres', JSON.stringify(res.data.pimarmycadres));
                this.tempStorage.setItem(context.srfsessionkey + '_pimcorrectionapplies', JSON.stringify(res.data.pimcorrectionapplies));
                this.tempStorage.setItem(context.srfsessionkey + '_pimvacations', JSON.stringify(res.data.pimvacations));
                this.tempStorage.setItem(context.srfsessionkey + '_trmtrainpeople', JSON.stringify(res.data.trmtrainpeople));
                this.tempStorage.setItem(context.srfsessionkey + '_pimcontracts', JSON.stringify(res.data.pimcontracts));
                this.tempStorage.setItem(context.srfsessionkey + '_pimeducations', JSON.stringify(res.data.pimeducations));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpersonchanges', JSON.stringify(res.data.pimpersonchanges));
                this.tempStorage.setItem(context.srfsessionkey + '_pimachievements', JSON.stringify(res.data.pimachievements));
                this.tempStorage.setItem(context.srfsessionkey + '_pimresearchfindings', JSON.stringify(res.data.pimresearchfindings));
                this.tempStorage.setItem(context.srfsessionkey + '_pimexitandentries', JSON.stringify(res.data.pimexitandentries));
                this.tempStorage.setItem(context.srfsessionkey + '_pimrewardpunishments', JSON.stringify(res.data.pimrewardpunishments));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpatents', JSON.stringify(res.data.pimpatents));
                this.tempStorage.setItem(context.srfsessionkey + '_pimlanguageabilities', JSON.stringify(res.data.pimlanguageabilities));
                this.tempStorage.setItem(context.srfsessionkey + '_pimarchives', JSON.stringify(res.data.pimarchives));
                this.tempStorage.setItem(context.srfsessionkey + '_pimfaminfos', JSON.stringify(res.data.pimfaminfos));
                this.tempStorage.setItem(context.srfsessionkey + '_attendancemreportmxes', JSON.stringify(res.data.attendancemreportmxes));
                this.tempStorage.setItem(context.srfsessionkey + '_pimworkhistories', JSON.stringify(res.data.pimworkhistories));
                return _context2.abrupt("return", res);

              case 97:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function Update() {
        return _Update.apply(this, arguments);
      }

      return Update;
    }()
    /**
     * YZSFYZFP接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "YZSFYZFP",
    value: function () {
      var _YZSFYZFP = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var context,
            data,
            isloading,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                context = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                isloading = _args3.length > 2 ? _args3[2] : undefined;
                return _context3.abrupt("return", Http.getInstance().post("/pimpeople/".concat(context.pimperson, "/yzsfyzfp"), data, isloading));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function YZSFYZFP() {
        return _YZSFYZFP.apply(this, arguments);
      }

      return YZSFYZFP;
    }()
    /**
     * ToggleLeader接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "ToggleLeader",
    value: function () {
      var _ToggleLeader = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        var context,
            data,
            isloading,
            _args4 = arguments;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                context = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
                data = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                isloading = _args4.length > 2 ? _args4[2] : undefined;
                return _context4.abrupt("return", Http.getInstance().post("/pimpeople/".concat(context.pimperson, "/toggleleader"), data, isloading));

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function ToggleLeader() {
        return _ToggleLeader.apply(this, arguments);
      }

      return ToggleLeader;
    }()
    /**
     * Get接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "Get",
    value: function () {
      var _Get = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        var context,
            data,
            isloading,
            res,
            _args5 = arguments;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                context = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
                data = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                isloading = _args5.length > 2 ? _args5[2] : undefined;
                _context5.next = 5;
                return Http.getInstance().get("/pimpeople/".concat(context.pimperson), isloading);

              case 5:
                res = _context5.sent;
                this.tempStorage.setItem(context.srfsessionkey + '_pimpersonabilities', JSON.stringify(res.data.pimpersonabilities));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpapers', JSON.stringify(res.data.pimpapers));
                this.tempStorage.setItem(context.srfsessionkey + '_pimdistirbutions', JSON.stringify(res.data.pimdistirbutions));
                this.tempStorage.setItem(context.srfsessionkey + '_pimtitles', JSON.stringify(res.data.pimtitles));
                this.tempStorage.setItem(context.srfsessionkey + '_pimvocationals', JSON.stringify(res.data.pimvocationals));
                this.tempStorage.setItem(context.srfsessionkey + '_pimarmycadres', JSON.stringify(res.data.pimarmycadres));
                this.tempStorage.setItem(context.srfsessionkey + '_pimcorrectionapplies', JSON.stringify(res.data.pimcorrectionapplies));
                this.tempStorage.setItem(context.srfsessionkey + '_pimvacations', JSON.stringify(res.data.pimvacations));
                this.tempStorage.setItem(context.srfsessionkey + '_trmtrainpeople', JSON.stringify(res.data.trmtrainpeople));
                this.tempStorage.setItem(context.srfsessionkey + '_pimcontracts', JSON.stringify(res.data.pimcontracts));
                this.tempStorage.setItem(context.srfsessionkey + '_pimeducations', JSON.stringify(res.data.pimeducations));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpersonchanges', JSON.stringify(res.data.pimpersonchanges));
                this.tempStorage.setItem(context.srfsessionkey + '_pimachievements', JSON.stringify(res.data.pimachievements));
                this.tempStorage.setItem(context.srfsessionkey + '_pimresearchfindings', JSON.stringify(res.data.pimresearchfindings));
                this.tempStorage.setItem(context.srfsessionkey + '_pimexitandentries', JSON.stringify(res.data.pimexitandentries));
                this.tempStorage.setItem(context.srfsessionkey + '_pimrewardpunishments', JSON.stringify(res.data.pimrewardpunishments));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpatents', JSON.stringify(res.data.pimpatents));
                this.tempStorage.setItem(context.srfsessionkey + '_pimlanguageabilities', JSON.stringify(res.data.pimlanguageabilities));
                this.tempStorage.setItem(context.srfsessionkey + '_pimarchives', JSON.stringify(res.data.pimarchives));
                this.tempStorage.setItem(context.srfsessionkey + '_pimfaminfos', JSON.stringify(res.data.pimfaminfos));
                this.tempStorage.setItem(context.srfsessionkey + '_attendancemreportmxes', JSON.stringify(res.data.attendancemreportmxes));
                this.tempStorage.setItem(context.srfsessionkey + '_pimworkhistories', JSON.stringify(res.data.pimworkhistories));
                return _context5.abrupt("return", res);

              case 29:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function Get() {
        return _Get.apply(this, arguments);
      }

      return Get;
    }()
    /**
     * PersonUpdateInfo接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "PersonUpdateInfo",
    value: function () {
      var _PersonUpdateInfo = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6() {
        var context,
            data,
            isloading,
            _args6 = arguments;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                context = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
                data = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                isloading = _args6.length > 2 ? _args6[2] : undefined;
                return _context6.abrupt("return", Http.getInstance().put("/pimpeople/".concat(context.pimperson, "/personupdateinfo"), data, isloading));

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function PersonUpdateInfo() {
        return _PersonUpdateInfo.apply(this, arguments);
      }

      return PersonUpdateInfo;
    }()
    /**
     * FillPersonType接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FillPersonType",
    value: function () {
      var _FillPersonType = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee7() {
        var context,
            data,
            isloading,
            _args7 = arguments;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                context = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
                data = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};
                isloading = _args7.length > 2 ? _args7[2] : undefined;
                return _context7.abrupt("return", Http.getInstance().post("/pimpeople/".concat(context.pimperson, "/fillpersontype"), data, isloading));

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function FillPersonType() {
        return _FillPersonType.apply(this, arguments);
      }

      return FillPersonType;
    }()
    /**
     * Create接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "Create",
    value: function () {
      var _Create = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee8() {
        var context,
            data,
            isloading,
            masterData,
            pimpersonabilitiesData,
            pimpapersData,
            pimdistirbutionsData,
            pimtitlesData,
            pimvocationalsData,
            pimarmycadresData,
            pimcorrectionappliesData,
            pimvacationsData,
            trmtrainpeopleData,
            pimcontractsData,
            pimeducationsData,
            pimpersonchangesData,
            pimachievementsData,
            pimresearchfindingsData,
            pimexitandentriesData,
            pimrewardpunishmentsData,
            pimpatentsData,
            pimlanguageabilitiesData,
            pimarchivesData,
            pimfaminfosData,
            attendancemreportmxesData,
            pimworkhistoriesData,
            tempContext,
            res,
            _args8 = arguments;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                context = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
                data = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                isloading = _args8.length > 2 ? _args8[2] : undefined;
                masterData = {};
                pimpersonabilitiesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonabilities'), 'undefined')) {
                  pimpersonabilitiesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonabilities'));

                  if (pimpersonabilitiesData && pimpersonabilitiesData.length && pimpersonabilitiesData.length > 0) {
                    pimpersonabilitiesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpersonabilityid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpersonabilities = pimpersonabilitiesData;
                pimpapersData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpapers'), 'undefined')) {
                  pimpapersData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpapers'));

                  if (pimpapersData && pimpapersData.length && pimpapersData.length > 0) {
                    pimpapersData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpaperid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpapers = pimpapersData;
                pimdistirbutionsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimdistirbutions'), 'undefined')) {
                  pimdistirbutionsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimdistirbutions'));

                  if (pimdistirbutionsData && pimdistirbutionsData.length && pimdistirbutionsData.length > 0) {
                    pimdistirbutionsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimdistirbutionid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimdistirbutions = pimdistirbutionsData;
                pimtitlesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimtitles'), 'undefined')) {
                  pimtitlesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimtitles'));

                  if (pimtitlesData && pimtitlesData.length && pimtitlesData.length > 0) {
                    pimtitlesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimtitleid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimtitles = pimtitlesData;
                pimvocationalsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimvocationals'), 'undefined')) {
                  pimvocationalsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimvocationals'));

                  if (pimvocationalsData && pimvocationalsData.length && pimvocationalsData.length > 0) {
                    pimvocationalsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimvocationalid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimvocationals = pimvocationalsData;
                pimarmycadresData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimarmycadres'), 'undefined')) {
                  pimarmycadresData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimarmycadres'));

                  if (pimarmycadresData && pimarmycadresData.length && pimarmycadresData.length > 0) {
                    pimarmycadresData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimarmycadresid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimarmycadres = pimarmycadresData;
                pimcorrectionappliesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimcorrectionapplies'), 'undefined')) {
                  pimcorrectionappliesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimcorrectionapplies'));

                  if (pimcorrectionappliesData && pimcorrectionappliesData.length && pimcorrectionappliesData.length > 0) {
                    pimcorrectionappliesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimcorrectionapplyid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimcorrectionapplies = pimcorrectionappliesData;
                pimvacationsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimvacations'), 'undefined')) {
                  pimvacationsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimvacations'));

                  if (pimvacationsData && pimvacationsData.length && pimvacationsData.length > 0) {
                    pimvacationsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimvacationid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimvacations = pimvacationsData;
                trmtrainpeopleData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_trmtrainpeople'), 'undefined')) {
                  trmtrainpeopleData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_trmtrainpeople'));

                  if (trmtrainpeopleData && trmtrainpeopleData.length && trmtrainpeopleData.length > 0) {
                    trmtrainpeopleData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.trmtrianpersonid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.trmtrainpeople = trmtrainpeopleData;
                pimcontractsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimcontracts'), 'undefined')) {
                  pimcontractsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimcontracts'));

                  if (pimcontractsData && pimcontractsData.length && pimcontractsData.length > 0) {
                    pimcontractsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimcontractid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimcontracts = pimcontractsData;
                pimeducationsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimeducations'), 'undefined')) {
                  pimeducationsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimeducations'));

                  if (pimeducationsData && pimeducationsData.length && pimeducationsData.length > 0) {
                    pimeducationsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimeducationid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimeducations = pimeducationsData;
                pimpersonchangesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonchanges'), 'undefined')) {
                  pimpersonchangesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonchanges'));

                  if (pimpersonchangesData && pimpersonchangesData.length && pimpersonchangesData.length > 0) {
                    pimpersonchangesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpersonchangeid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpersonchanges = pimpersonchangesData;
                pimachievementsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimachievements'), 'undefined')) {
                  pimachievementsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimachievements'));

                  if (pimachievementsData && pimachievementsData.length && pimachievementsData.length > 0) {
                    pimachievementsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimachievementsid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimachievements = pimachievementsData;
                pimresearchfindingsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimresearchfindings'), 'undefined')) {
                  pimresearchfindingsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimresearchfindings'));

                  if (pimresearchfindingsData && pimresearchfindingsData.length && pimresearchfindingsData.length > 0) {
                    pimresearchfindingsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimresearchfindingsid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimresearchfindings = pimresearchfindingsData;
                pimexitandentriesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimexitandentries'), 'undefined')) {
                  pimexitandentriesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimexitandentries'));

                  if (pimexitandentriesData && pimexitandentriesData.length && pimexitandentriesData.length > 0) {
                    pimexitandentriesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimexitandentryid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimexitandentries = pimexitandentriesData;
                pimrewardpunishmentsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimrewardpunishments'), 'undefined')) {
                  pimrewardpunishmentsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimrewardpunishments'));

                  if (pimrewardpunishmentsData && pimrewardpunishmentsData.length && pimrewardpunishmentsData.length > 0) {
                    pimrewardpunishmentsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimrewardpunishmentid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimrewardpunishments = pimrewardpunishmentsData;
                pimpatentsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpatents'), 'undefined')) {
                  pimpatentsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpatents'));

                  if (pimpatentsData && pimpatentsData.length && pimpatentsData.length > 0) {
                    pimpatentsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpatentid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpatents = pimpatentsData;
                pimlanguageabilitiesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimlanguageabilities'), 'undefined')) {
                  pimlanguageabilitiesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimlanguageabilities'));

                  if (pimlanguageabilitiesData && pimlanguageabilitiesData.length && pimlanguageabilitiesData.length > 0) {
                    pimlanguageabilitiesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimlanguageabilityid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimlanguageabilities = pimlanguageabilitiesData;
                pimarchivesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimarchives'), 'undefined')) {
                  pimarchivesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimarchives'));

                  if (pimarchivesData && pimarchivesData.length && pimarchivesData.length > 0) {
                    pimarchivesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimarchivesid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimarchives = pimarchivesData;
                pimfaminfosData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimfaminfos'), 'undefined')) {
                  pimfaminfosData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimfaminfos'));

                  if (pimfaminfosData && pimfaminfosData.length && pimfaminfosData.length > 0) {
                    pimfaminfosData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimfaminfoid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimfaminfos = pimfaminfosData;
                attendancemreportmxesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_attendancemreportmxes'), 'undefined')) {
                  attendancemreportmxesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_attendancemreportmxes'));

                  if (attendancemreportmxesData && attendancemreportmxesData.length && attendancemreportmxesData.length > 0) {
                    attendancemreportmxesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.attendancemreportmxid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.attendancemreportmxes = attendancemreportmxesData;
                pimworkhistoriesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimworkhistories'), 'undefined')) {
                  pimworkhistoriesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimworkhistories'));

                  if (pimworkhistoriesData && pimworkhistoriesData.length && pimworkhistoriesData.length > 0) {
                    pimworkhistoriesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimworkhistoryid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimworkhistories = pimworkhistoriesData;
                Object.assign(data, masterData);

                if (!data.srffrontuf || data.srffrontuf !== "1") {
                  data[this.APPDEKEY] = null;
                }

                if (data.srffrontuf) {
                  delete data.srffrontuf;
                }

                tempContext = JSON.parse(JSON.stringify(context));
                _context8.next = 76;
                return Http.getInstance().post("/pimpeople", data, isloading);

              case 76:
                res = _context8.sent;
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimpersonabilities', JSON.stringify(res.data.pimpersonabilities));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimpapers', JSON.stringify(res.data.pimpapers));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimdistirbutions', JSON.stringify(res.data.pimdistirbutions));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimtitles', JSON.stringify(res.data.pimtitles));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimvocationals', JSON.stringify(res.data.pimvocationals));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimarmycadres', JSON.stringify(res.data.pimarmycadres));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimcorrectionapplies', JSON.stringify(res.data.pimcorrectionapplies));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimvacations', JSON.stringify(res.data.pimvacations));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_trmtrainpeople', JSON.stringify(res.data.trmtrainpeople));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimcontracts', JSON.stringify(res.data.pimcontracts));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimeducations', JSON.stringify(res.data.pimeducations));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimpersonchanges', JSON.stringify(res.data.pimpersonchanges));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimachievements', JSON.stringify(res.data.pimachievements));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimresearchfindings', JSON.stringify(res.data.pimresearchfindings));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimexitandentries', JSON.stringify(res.data.pimexitandentries));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimrewardpunishments', JSON.stringify(res.data.pimrewardpunishments));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimpatents', JSON.stringify(res.data.pimpatents));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimlanguageabilities', JSON.stringify(res.data.pimlanguageabilities));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimarchives', JSON.stringify(res.data.pimarchives));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimfaminfos', JSON.stringify(res.data.pimfaminfos));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_attendancemreportmxes', JSON.stringify(res.data.attendancemreportmxes));
                this.tempStorage.setItem(tempContext.srfsessionkey + '_pimworkhistories', JSON.stringify(res.data.pimworkhistories));
                return _context8.abrupt("return", res);

              case 100:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function Create() {
        return _Create.apply(this, arguments);
      }

      return Create;
    }()
    /**
     * Save接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "Save",
    value: function () {
      var _Save = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee9() {
        var context,
            data,
            isloading,
            masterData,
            pimpersonabilitiesData,
            pimpapersData,
            pimdistirbutionsData,
            pimtitlesData,
            pimvocationalsData,
            pimarmycadresData,
            pimcorrectionappliesData,
            pimvacationsData,
            trmtrainpeopleData,
            pimcontractsData,
            pimeducationsData,
            pimpersonchangesData,
            pimachievementsData,
            pimresearchfindingsData,
            pimexitandentriesData,
            pimrewardpunishmentsData,
            pimpatentsData,
            pimlanguageabilitiesData,
            pimarchivesData,
            pimfaminfosData,
            attendancemreportmxesData,
            pimworkhistoriesData,
            res,
            _args9 = arguments;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                context = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
                data = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                isloading = _args9.length > 2 ? _args9[2] : undefined;
                masterData = {};
                pimpersonabilitiesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonabilities'), 'undefined')) {
                  pimpersonabilitiesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonabilities'));

                  if (pimpersonabilitiesData && pimpersonabilitiesData.length && pimpersonabilitiesData.length > 0) {
                    pimpersonabilitiesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpersonabilityid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpersonabilities = pimpersonabilitiesData;
                pimpapersData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpapers'), 'undefined')) {
                  pimpapersData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpapers'));

                  if (pimpapersData && pimpapersData.length && pimpapersData.length > 0) {
                    pimpapersData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpaperid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpapers = pimpapersData;
                pimdistirbutionsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimdistirbutions'), 'undefined')) {
                  pimdistirbutionsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimdistirbutions'));

                  if (pimdistirbutionsData && pimdistirbutionsData.length && pimdistirbutionsData.length > 0) {
                    pimdistirbutionsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimdistirbutionid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimdistirbutions = pimdistirbutionsData;
                pimtitlesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimtitles'), 'undefined')) {
                  pimtitlesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimtitles'));

                  if (pimtitlesData && pimtitlesData.length && pimtitlesData.length > 0) {
                    pimtitlesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimtitleid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimtitles = pimtitlesData;
                pimvocationalsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimvocationals'), 'undefined')) {
                  pimvocationalsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimvocationals'));

                  if (pimvocationalsData && pimvocationalsData.length && pimvocationalsData.length > 0) {
                    pimvocationalsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimvocationalid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimvocationals = pimvocationalsData;
                pimarmycadresData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimarmycadres'), 'undefined')) {
                  pimarmycadresData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimarmycadres'));

                  if (pimarmycadresData && pimarmycadresData.length && pimarmycadresData.length > 0) {
                    pimarmycadresData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimarmycadresid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimarmycadres = pimarmycadresData;
                pimcorrectionappliesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimcorrectionapplies'), 'undefined')) {
                  pimcorrectionappliesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimcorrectionapplies'));

                  if (pimcorrectionappliesData && pimcorrectionappliesData.length && pimcorrectionappliesData.length > 0) {
                    pimcorrectionappliesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimcorrectionapplyid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimcorrectionapplies = pimcorrectionappliesData;
                pimvacationsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimvacations'), 'undefined')) {
                  pimvacationsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimvacations'));

                  if (pimvacationsData && pimvacationsData.length && pimvacationsData.length > 0) {
                    pimvacationsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimvacationid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimvacations = pimvacationsData;
                trmtrainpeopleData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_trmtrainpeople'), 'undefined')) {
                  trmtrainpeopleData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_trmtrainpeople'));

                  if (trmtrainpeopleData && trmtrainpeopleData.length && trmtrainpeopleData.length > 0) {
                    trmtrainpeopleData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.trmtrianpersonid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.trmtrainpeople = trmtrainpeopleData;
                pimcontractsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimcontracts'), 'undefined')) {
                  pimcontractsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimcontracts'));

                  if (pimcontractsData && pimcontractsData.length && pimcontractsData.length > 0) {
                    pimcontractsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimcontractid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimcontracts = pimcontractsData;
                pimeducationsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimeducations'), 'undefined')) {
                  pimeducationsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimeducations'));

                  if (pimeducationsData && pimeducationsData.length && pimeducationsData.length > 0) {
                    pimeducationsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimeducationid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimeducations = pimeducationsData;
                pimpersonchangesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonchanges'), 'undefined')) {
                  pimpersonchangesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpersonchanges'));

                  if (pimpersonchangesData && pimpersonchangesData.length && pimpersonchangesData.length > 0) {
                    pimpersonchangesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpersonchangeid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpersonchanges = pimpersonchangesData;
                pimachievementsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimachievements'), 'undefined')) {
                  pimachievementsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimachievements'));

                  if (pimachievementsData && pimachievementsData.length && pimachievementsData.length > 0) {
                    pimachievementsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimachievementsid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimachievements = pimachievementsData;
                pimresearchfindingsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimresearchfindings'), 'undefined')) {
                  pimresearchfindingsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimresearchfindings'));

                  if (pimresearchfindingsData && pimresearchfindingsData.length && pimresearchfindingsData.length > 0) {
                    pimresearchfindingsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimresearchfindingsid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimresearchfindings = pimresearchfindingsData;
                pimexitandentriesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimexitandentries'), 'undefined')) {
                  pimexitandentriesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimexitandentries'));

                  if (pimexitandentriesData && pimexitandentriesData.length && pimexitandentriesData.length > 0) {
                    pimexitandentriesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimexitandentryid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimexitandentries = pimexitandentriesData;
                pimrewardpunishmentsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimrewardpunishments'), 'undefined')) {
                  pimrewardpunishmentsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimrewardpunishments'));

                  if (pimrewardpunishmentsData && pimrewardpunishmentsData.length && pimrewardpunishmentsData.length > 0) {
                    pimrewardpunishmentsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimrewardpunishmentid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimrewardpunishments = pimrewardpunishmentsData;
                pimpatentsData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimpatents'), 'undefined')) {
                  pimpatentsData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimpatents'));

                  if (pimpatentsData && pimpatentsData.length && pimpatentsData.length > 0) {
                    pimpatentsData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimpatentid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimpatents = pimpatentsData;
                pimlanguageabilitiesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimlanguageabilities'), 'undefined')) {
                  pimlanguageabilitiesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimlanguageabilities'));

                  if (pimlanguageabilitiesData && pimlanguageabilitiesData.length && pimlanguageabilitiesData.length > 0) {
                    pimlanguageabilitiesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimlanguageabilityid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimlanguageabilities = pimlanguageabilitiesData;
                pimarchivesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimarchives'), 'undefined')) {
                  pimarchivesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimarchives'));

                  if (pimarchivesData && pimarchivesData.length && pimarchivesData.length > 0) {
                    pimarchivesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimarchivesid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimarchives = pimarchivesData;
                pimfaminfosData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimfaminfos'), 'undefined')) {
                  pimfaminfosData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimfaminfos'));

                  if (pimfaminfosData && pimfaminfosData.length && pimfaminfosData.length > 0) {
                    pimfaminfosData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimfaminfoid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimfaminfos = pimfaminfosData;
                attendancemreportmxesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_attendancemreportmxes'), 'undefined')) {
                  attendancemreportmxesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_attendancemreportmxes'));

                  if (attendancemreportmxesData && attendancemreportmxesData.length && attendancemreportmxesData.length > 0) {
                    attendancemreportmxesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.attendancemreportmxid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.attendancemreportmxes = attendancemreportmxesData;
                pimworkhistoriesData = [];

                if (!Object.is(this.tempStorage.getItem(context.srfsessionkey + '_pimworkhistories'), 'undefined')) {
                  pimworkhistoriesData = JSON.parse(this.tempStorage.getItem(context.srfsessionkey + '_pimworkhistories'));

                  if (pimworkhistoriesData && pimworkhistoriesData.length && pimworkhistoriesData.length > 0) {
                    pimworkhistoriesData.forEach(function (item) {
                      if (item.srffrontuf) {
                        if (Object.is(item.srffrontuf, "0")) {
                          item.pimworkhistoryid = null;
                        }

                        delete item.srffrontuf;
                      }
                    });
                  }
                }

                masterData.pimworkhistories = pimworkhistoriesData;
                Object.assign(data, masterData);
                _context9.next = 73;
                return Http.getInstance().post("/pimpeople/".concat(context.pimperson, "/save"), data, isloading);

              case 73:
                res = _context9.sent;
                this.tempStorage.setItem(context.srfsessionkey + '_pimpersonabilities', JSON.stringify(res.data.pimpersonabilities));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpapers', JSON.stringify(res.data.pimpapers));
                this.tempStorage.setItem(context.srfsessionkey + '_pimdistirbutions', JSON.stringify(res.data.pimdistirbutions));
                this.tempStorage.setItem(context.srfsessionkey + '_pimtitles', JSON.stringify(res.data.pimtitles));
                this.tempStorage.setItem(context.srfsessionkey + '_pimvocationals', JSON.stringify(res.data.pimvocationals));
                this.tempStorage.setItem(context.srfsessionkey + '_pimarmycadres', JSON.stringify(res.data.pimarmycadres));
                this.tempStorage.setItem(context.srfsessionkey + '_pimcorrectionapplies', JSON.stringify(res.data.pimcorrectionapplies));
                this.tempStorage.setItem(context.srfsessionkey + '_pimvacations', JSON.stringify(res.data.pimvacations));
                this.tempStorage.setItem(context.srfsessionkey + '_trmtrainpeople', JSON.stringify(res.data.trmtrainpeople));
                this.tempStorage.setItem(context.srfsessionkey + '_pimcontracts', JSON.stringify(res.data.pimcontracts));
                this.tempStorage.setItem(context.srfsessionkey + '_pimeducations', JSON.stringify(res.data.pimeducations));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpersonchanges', JSON.stringify(res.data.pimpersonchanges));
                this.tempStorage.setItem(context.srfsessionkey + '_pimachievements', JSON.stringify(res.data.pimachievements));
                this.tempStorage.setItem(context.srfsessionkey + '_pimresearchfindings', JSON.stringify(res.data.pimresearchfindings));
                this.tempStorage.setItem(context.srfsessionkey + '_pimexitandentries', JSON.stringify(res.data.pimexitandentries));
                this.tempStorage.setItem(context.srfsessionkey + '_pimrewardpunishments', JSON.stringify(res.data.pimrewardpunishments));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpatents', JSON.stringify(res.data.pimpatents));
                this.tempStorage.setItem(context.srfsessionkey + '_pimlanguageabilities', JSON.stringify(res.data.pimlanguageabilities));
                this.tempStorage.setItem(context.srfsessionkey + '_pimarchives', JSON.stringify(res.data.pimarchives));
                this.tempStorage.setItem(context.srfsessionkey + '_pimfaminfos', JSON.stringify(res.data.pimfaminfos));
                this.tempStorage.setItem(context.srfsessionkey + '_attendancemreportmxes', JSON.stringify(res.data.attendancemreportmxes));
                this.tempStorage.setItem(context.srfsessionkey + '_pimworkhistories', JSON.stringify(res.data.pimworkhistories));
                return _context9.abrupt("return", res);

              case 97:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function Save() {
        return _Save.apply(this, arguments);
      }

      return Save;
    }()
    /**
     * GetJTLXRDH接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "GetJTLXRDH",
    value: function () {
      var _GetJTLXRDH = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee10() {
        var context,
            data,
            isloading,
            appLogic,
            result,
            _args10 = arguments;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                context = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
                data = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
                isloading = _args10.length > 2 ? _args10[2] : undefined;
                appLogic = new GetJTLXRDHLogic({
                  context: JSON.parse(JSON.stringify(context)),
                  data: JSON.parse(JSON.stringify(data))
                });
                _context10.next = 6;
                return appLogic.onExecute(context, data, isloading ? true : false);

              case 6:
                result = _context10.sent;
                return _context10.abrupt("return", {
                  status: 200,
                  data: result
                });

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function GetJTLXRDH() {
        return _GetJTLXRDH.apply(this, arguments);
      }

      return GetJTLXRDH;
    }()
    /**
     * SynPerson接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "SynPerson",
    value: function () {
      var _SynPerson = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee11() {
        var context,
            data,
            isloading,
            _args11 = arguments;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                context = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
                data = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
                isloading = _args11.length > 2 ? _args11[2] : undefined;
                return _context11.abrupt("return", Http.getInstance().post("/pimpeople/".concat(context.pimperson, "/synperson"), data, isloading));

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function SynPerson() {
        return _SynPerson.apply(this, arguments);
      }

      return SynPerson;
    }()
    /**
     * Remove接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "Remove",
    value: function () {
      var _Remove = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee12() {
        var context,
            data,
            isloading,
            _args12 = arguments;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                context = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
                data = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};
                isloading = _args12.length > 2 ? _args12[2] : undefined;
                return _context12.abrupt("return", Http.getInstance()["delete"]("/pimpeople/".concat(context.pimperson), isloading));

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      function Remove() {
        return _Remove.apply(this, arguments);
      }

      return Remove;
    }()
    /**
     * CheckKey接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "CheckKey",
    value: function () {
      var _CheckKey = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee13() {
        var context,
            data,
            isloading,
            _args13 = arguments;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                context = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
                data = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};
                isloading = _args13.length > 2 ? _args13[2] : undefined;
                return _context13.abrupt("return", Http.getInstance().post("/pimpeople/".concat(context.pimperson, "/checkkey"), data, isloading));

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      function CheckKey() {
        return _CheckKey.apply(this, arguments);
      }

      return CheckKey;
    }()
    /**
     * QRTX接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "QRTX",
    value: function () {
      var _QRTX = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee14() {
        var context,
            data,
            isloading,
            _args14 = arguments;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                context = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
                data = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};
                isloading = _args14.length > 2 ? _args14[2] : undefined;
                return _context14.abrupt("return", Http.getInstance().post("/pimpeople/".concat(context.pimperson, "/qrtx"), data, isloading));

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      function QRTX() {
        return _QRTX.apply(this, arguments);
      }

      return QRTX;
    }()
    /**
     * GetDraft接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "GetDraft",
    value: function () {
      var _GetDraft = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee15() {
        var context,
            data,
            isloading,
            res,
            _args15 = arguments;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                context = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};
                data = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                isloading = _args15.length > 2 ? _args15[2] : undefined;
                _context15.next = 5;
                return Http.getInstance().get("/pimpeople/getdraft", isloading);

              case 5:
                res = _context15.sent;
                res.data.pimperson = data.pimperson;
                this.tempStorage.setItem(context.srfsessionkey + '_pimpersonabilities', JSON.stringify(res.data.pimpersonabilities));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpapers', JSON.stringify(res.data.pimpapers));
                this.tempStorage.setItem(context.srfsessionkey + '_pimdistirbutions', JSON.stringify(res.data.pimdistirbutions));
                this.tempStorage.setItem(context.srfsessionkey + '_pimtitles', JSON.stringify(res.data.pimtitles));
                this.tempStorage.setItem(context.srfsessionkey + '_pimvocationals', JSON.stringify(res.data.pimvocationals));
                this.tempStorage.setItem(context.srfsessionkey + '_pimarmycadres', JSON.stringify(res.data.pimarmycadres));
                this.tempStorage.setItem(context.srfsessionkey + '_pimcorrectionapplies', JSON.stringify(res.data.pimcorrectionapplies));
                this.tempStorage.setItem(context.srfsessionkey + '_pimvacations', JSON.stringify(res.data.pimvacations));
                this.tempStorage.setItem(context.srfsessionkey + '_trmtrainpeople', JSON.stringify(res.data.trmtrainpeople));
                this.tempStorage.setItem(context.srfsessionkey + '_pimcontracts', JSON.stringify(res.data.pimcontracts));
                this.tempStorage.setItem(context.srfsessionkey + '_pimeducations', JSON.stringify(res.data.pimeducations));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpersonchanges', JSON.stringify(res.data.pimpersonchanges));
                this.tempStorage.setItem(context.srfsessionkey + '_pimachievements', JSON.stringify(res.data.pimachievements));
                this.tempStorage.setItem(context.srfsessionkey + '_pimresearchfindings', JSON.stringify(res.data.pimresearchfindings));
                this.tempStorage.setItem(context.srfsessionkey + '_pimexitandentries', JSON.stringify(res.data.pimexitandentries));
                this.tempStorage.setItem(context.srfsessionkey + '_pimrewardpunishments', JSON.stringify(res.data.pimrewardpunishments));
                this.tempStorage.setItem(context.srfsessionkey + '_pimpatents', JSON.stringify(res.data.pimpatents));
                this.tempStorage.setItem(context.srfsessionkey + '_pimlanguageabilities', JSON.stringify(res.data.pimlanguageabilities));
                this.tempStorage.setItem(context.srfsessionkey + '_pimarchives', JSON.stringify(res.data.pimarchives));
                this.tempStorage.setItem(context.srfsessionkey + '_pimfaminfos', JSON.stringify(res.data.pimfaminfos));
                this.tempStorage.setItem(context.srfsessionkey + '_attendancemreportmxes', JSON.stringify(res.data.attendancemreportmxes));
                this.tempStorage.setItem(context.srfsessionkey + '_pimworkhistories', JSON.stringify(res.data.pimworkhistories));
                return _context15.abrupt("return", res);

              case 30:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function GetDraft() {
        return _GetDraft.apply(this, arguments);
      }

      return GetDraft;
    }()
    /**
     * GeneratePersonFile接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "GeneratePersonFile",
    value: function () {
      var _GeneratePersonFile = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee16() {
        var context,
            data,
            isloading,
            _args16 = arguments;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                context = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};
                data = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {};
                isloading = _args16.length > 2 ? _args16[2] : undefined;
                return _context16.abrupt("return", Http.getInstance().post("/pimpeople/".concat(context.pimperson, "/generatepersonfile"), data, isloading));

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      function GeneratePersonFile() {
        return _GeneratePersonFile.apply(this, arguments);
      }

      return GeneratePersonFile;
    }()
    /**
     * FetchKFPRY接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchKFPRY",
    value: function () {
      var _FetchKFPRY = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee17() {
        var context,
            data,
            isloading,
            tempData,
            _args17 = arguments;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                context = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};
                data = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};
                isloading = _args17.length > 2 ? _args17[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context17.abrupt("return", Http.getInstance().get("/pimpeople/fetchkfpry", tempData, isloading));

              case 5:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      function FetchKFPRY() {
        return _FetchKFPRY.apply(this, arguments);
      }

      return FetchKFPRY;
    }()
    /**
     * FetchSetAttRules接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchSetAttRules",
    value: function () {
      var _FetchSetAttRules = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee18() {
        var context,
            data,
            isloading,
            tempData,
            _args18 = arguments;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                context = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};
                data = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {};
                isloading = _args18.length > 2 ? _args18[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context18.abrupt("return", Http.getInstance().get("/pimpeople/fetchsetattrules", tempData, isloading));

              case 5:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function FetchSetAttRules() {
        return _FetchSetAttRules.apply(this, arguments);
      }

      return FetchSetAttRules;
    }()
    /**
     * FetchSetSocArchives接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchSetSocArchives",
    value: function () {
      var _FetchSetSocArchives = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee19() {
        var context,
            data,
            isloading,
            tempData,
            _args19 = arguments;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                context = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};
                data = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};
                isloading = _args19.length > 2 ? _args19[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context19.abrupt("return", Http.getInstance().get("/pimpeople/fetchsetsocarchives", tempData, isloading));

              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      function FetchSetSocArchives() {
        return _FetchSetSocArchives.apply(this, arguments);
      }

      return FetchSetSocArchives;
    }()
    /**
     * FetchYGXXGLY接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchYGXXGLY",
    value: function () {
      var _FetchYGXXGLY = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee20() {
        var context,
            data,
            isloading,
            tempData,
            _args20 = arguments;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                context = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : {};
                data = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : {};
                isloading = _args20.length > 2 ? _args20[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context20.abrupt("return", Http.getInstance().get("/pimpeople/fetchygxxgly", tempData, isloading));

              case 5:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }));

      function FetchYGXXGLY() {
        return _FetchYGXXGLY.apply(this, arguments);
      }

      return FetchYGXXGLY;
    }()
    /**
     * FetchXMBRYCX接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchXMBRYCX",
    value: function () {
      var _FetchXMBRYCX = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee21() {
        var context,
            data,
            isloading,
            tempData,
            _args21 = arguments;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                context = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : {};
                data = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : {};
                isloading = _args21.length > 2 ? _args21[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context21.abrupt("return", Http.getInstance().get("/pimpeople/fetchxmbrycx", tempData, isloading));

              case 5:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }));

      function FetchXMBRYCX() {
        return _FetchXMBRYCX.apply(this, arguments);
      }

      return FetchXMBRYCX;
    }()
    /**
     * FetchCurOrgPerson接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchCurOrgPerson",
    value: function () {
      var _FetchCurOrgPerson = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee22() {
        var context,
            data,
            isloading,
            tempData,
            _args22 = arguments;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                context = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};
                data = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : {};
                isloading = _args22.length > 2 ? _args22[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context22.abrupt("return", Http.getInstance().get("/pimpeople/fetchcurorgperson", tempData, isloading));

              case 5:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22);
      }));

      function FetchCurOrgPerson() {
        return _FetchCurOrgPerson.apply(this, arguments);
      }

      return FetchCurOrgPerson;
    }()
    /**
     * FetchJLSSGR接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchJLSSGR",
    value: function () {
      var _FetchJLSSGR = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee23() {
        var context,
            data,
            isloading,
            tempData,
            _args23 = arguments;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                context = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};
                data = _args23.length > 1 && _args23[1] !== undefined ? _args23[1] : {};
                isloading = _args23.length > 2 ? _args23[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context23.abrupt("return", Http.getInstance().get("/pimpeople/fetchjlssgr", tempData, isloading));

              case 5:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }));

      function FetchJLSSGR() {
        return _FetchJLSSGR.apply(this, arguments);
      }

      return FetchJLSSGR;
    }()
    /**
     * FetchCurLeader接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchCurLeader",
    value: function () {
      var _FetchCurLeader = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee24() {
        var context,
            data,
            isloading,
            tempData,
            _args24 = arguments;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                context = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};
                data = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : {};
                isloading = _args24.length > 2 ? _args24[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context24.abrupt("return", Http.getInstance().get("/pimpeople/fetchcurleader", tempData, isloading));

              case 5:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24);
      }));

      function FetchCurLeader() {
        return _FetchCurLeader.apply(this, arguments);
      }

      return FetchCurLeader;
    }()
    /**
     * FetchSFHMD接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchSFHMD",
    value: function () {
      var _FetchSFHMD = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee25() {
        var context,
            data,
            isloading,
            tempData,
            _args25 = arguments;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                context = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};
                data = _args25.length > 1 && _args25[1] !== undefined ? _args25[1] : {};
                isloading = _args25.length > 2 ? _args25[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context25.abrupt("return", Http.getInstance().get("/pimpeople/fetchsfhmd", tempData, isloading));

              case 5:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25);
      }));

      function FetchSFHMD() {
        return _FetchSFHMD.apply(this, arguments);
      }

      return FetchSFHMD;
    }()
    /**
     * FetchSSTRERSONINFO接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchSSTRERSONINFO",
    value: function () {
      var _FetchSSTRERSONINFO = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee26() {
        var context,
            data,
            isloading,
            tempData,
            _args26 = arguments;
        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                context = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};
                data = _args26.length > 1 && _args26[1] !== undefined ? _args26[1] : {};
                isloading = _args26.length > 2 ? _args26[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context26.abrupt("return", Http.getInstance().get("/pimpeople/fetchsstrersoninfo", tempData, isloading));

              case 5:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26);
      }));

      function FetchSSTRERSONINFO() {
        return _FetchSSTRERSONINFO.apply(this, arguments);
      }

      return FetchSSTRERSONINFO;
    }()
    /**
     * FetchCurJHRY接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchCurJHRY",
    value: function () {
      var _FetchCurJHRY = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee27() {
        var context,
            data,
            isloading,
            tempData,
            _args27 = arguments;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                context = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};
                data = _args27.length > 1 && _args27[1] !== undefined ? _args27[1] : {};
                isloading = _args27.length > 2 ? _args27[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context27.abrupt("return", Http.getInstance().get("/pimpeople/fetchcurjhry", tempData, isloading));

              case 5:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27);
      }));

      function FetchCurJHRY() {
        return _FetchCurJHRY.apply(this, arguments);
      }

      return FetchCurJHRY;
    }()
    /**
     * FetchKTXYG接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchKTXYG",
    value: function () {
      var _FetchKTXYG = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee28() {
        var context,
            data,
            isloading,
            tempData,
            _args28 = arguments;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                context = _args28.length > 0 && _args28[0] !== undefined ? _args28[0] : {};
                data = _args28.length > 1 && _args28[1] !== undefined ? _args28[1] : {};
                isloading = _args28.length > 2 ? _args28[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context28.abrupt("return", Http.getInstance().get("/pimpeople/fetchktxyg", tempData, isloading));

              case 5:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28);
      }));

      function FetchKTXYG() {
        return _FetchKTXYG.apply(this, arguments);
      }

      return FetchKTXYG;
    }()
    /**
     * FetchBYLYG接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchBYLYG",
    value: function () {
      var _FetchBYLYG = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee29() {
        var context,
            data,
            isloading,
            tempData,
            _args29 = arguments;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                context = _args29.length > 0 && _args29[0] !== undefined ? _args29[0] : {};
                data = _args29.length > 1 && _args29[1] !== undefined ? _args29[1] : {};
                isloading = _args29.length > 2 ? _args29[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context29.abrupt("return", Http.getInstance().get("/pimpeople/fetchbylyg", tempData, isloading));

              case 5:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29);
      }));

      function FetchBYLYG() {
        return _FetchBYLYG.apply(this, arguments);
      }

      return FetchBYLYG;
    }()
    /**
     * FetchGBHMC接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchGBHMC",
    value: function () {
      var _FetchGBHMC = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee30() {
        var context,
            data,
            isloading,
            tempData,
            _args30 = arguments;
        return regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                context = _args30.length > 0 && _args30[0] !== undefined ? _args30[0] : {};
                data = _args30.length > 1 && _args30[1] !== undefined ? _args30[1] : {};
                isloading = _args30.length > 2 ? _args30[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context30.abrupt("return", Http.getInstance().get("/pimpeople/fetchgbhmc", tempData, isloading));

              case 5:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30);
      }));

      function FetchGBHMC() {
        return _FetchGBHMC.apply(this, arguments);
      }

      return FetchGBHMC;
    }()
    /**
     * FetchGZDQGL接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchGZDQGL",
    value: function () {
      var _FetchGZDQGL = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee31() {
        var context,
            data,
            isloading,
            tempData,
            _args31 = arguments;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                context = _args31.length > 0 && _args31[0] !== undefined ? _args31[0] : {};
                data = _args31.length > 1 && _args31[1] !== undefined ? _args31[1] : {};
                isloading = _args31.length > 2 ? _args31[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context31.abrupt("return", Http.getInstance().get("/pimpeople/fetchgzdqgl", tempData, isloading));

              case 5:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31);
      }));

      function FetchGZDQGL() {
        return _FetchGZDQGL.apply(this, arguments);
      }

      return FetchGZDQGL;
    }()
    /**
     * FetchKQJRYCX接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchKQJRYCX",
    value: function () {
      var _FetchKQJRYCX = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee32() {
        var context,
            data,
            isloading,
            tempData,
            _args32 = arguments;
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                context = _args32.length > 0 && _args32[0] !== undefined ? _args32[0] : {};
                data = _args32.length > 1 && _args32[1] !== undefined ? _args32[1] : {};
                isloading = _args32.length > 2 ? _args32[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context32.abrupt("return", Http.getInstance().get("/pimpeople/fetchkqjrycx", tempData, isloading));

              case 5:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32);
      }));

      function FetchKQJRYCX() {
        return _FetchKQJRYCX.apply(this, arguments);
      }

      return FetchKQJRYCX;
    }()
    /**
     * FetchLTXSTAFF接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchLTXSTAFF",
    value: function () {
      var _FetchLTXSTAFF = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee33() {
        var context,
            data,
            isloading,
            tempData,
            _args33 = arguments;
        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                context = _args33.length > 0 && _args33[0] !== undefined ? _args33[0] : {};
                data = _args33.length > 1 && _args33[1] !== undefined ? _args33[1] : {};
                isloading = _args33.length > 2 ? _args33[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context33.abrupt("return", Http.getInstance().get("/pimpeople/fetchltxstaff", tempData, isloading));

              case 5:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33);
      }));

      function FetchLTXSTAFF() {
        return _FetchLTXSTAFF.apply(this, arguments);
      }

      return FetchLTXSTAFF;
    }()
    /**
     * FetchREP_PERSONORGTYPE接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchREP_PERSONORGTYPE",
    value: function () {
      var _FetchREP_PERSONORGTYPE = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee34() {
        var context,
            data,
            isloading,
            tempData,
            _args34 = arguments;
        return regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                context = _args34.length > 0 && _args34[0] !== undefined ? _args34[0] : {};
                data = _args34.length > 1 && _args34[1] !== undefined ? _args34[1] : {};
                isloading = _args34.length > 2 ? _args34[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context34.abrupt("return", Http.getInstance().get("/pimpeople/fetchrep_personorgtype", tempData, isloading));

              case 5:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34);
      }));

      function FetchREP_PERSONORGTYPE() {
        return _FetchREP_PERSONORGTYPE.apply(this, arguments);
      }

      return FetchREP_PERSONORGTYPE;
    }()
    /**
     * FetchAuthPerson接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchAuthPerson",
    value: function () {
      var _FetchAuthPerson = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee35() {
        var context,
            data,
            isloading,
            tempData,
            _args35 = arguments;
        return regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                context = _args35.length > 0 && _args35[0] !== undefined ? _args35[0] : {};
                data = _args35.length > 1 && _args35[1] !== undefined ? _args35[1] : {};
                isloading = _args35.length > 2 ? _args35[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context35.abrupt("return", Http.getInstance().get("/pimpeople/fetchauthperson", tempData, isloading));

              case 5:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35);
      }));

      function FetchAuthPerson() {
        return _FetchAuthPerson.apply(this, arguments);
      }

      return FetchAuthPerson;
    }()
    /**
     * FetchDefault接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchDefault",
    value: function () {
      var _FetchDefault = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee36() {
        var context,
            data,
            isloading,
            tempData,
            _args36 = arguments;
        return regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                context = _args36.length > 0 && _args36[0] !== undefined ? _args36[0] : {};
                data = _args36.length > 1 && _args36[1] !== undefined ? _args36[1] : {};
                isloading = _args36.length > 2 ? _args36[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context36.abrupt("return", Http.getInstance().get("/pimpeople/fetchdefault", tempData, isloading));

              case 5:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36);
      }));

      function FetchDefault() {
        return _FetchDefault.apply(this, arguments);
      }

      return FetchDefault;
    }()
    /**
     * FetchKGZRY接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchKGZRY",
    value: function () {
      var _FetchKGZRY = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee37() {
        var context,
            data,
            isloading,
            tempData,
            _args37 = arguments;
        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                context = _args37.length > 0 && _args37[0] !== undefined ? _args37[0] : {};
                data = _args37.length > 1 && _args37[1] !== undefined ? _args37[1] : {};
                isloading = _args37.length > 2 ? _args37[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context37.abrupt("return", Http.getInstance().get("/pimpeople/fetchkgzry", tempData, isloading));

              case 5:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37);
      }));

      function FetchKGZRY() {
        return _FetchKGZRY.apply(this, arguments);
      }

      return FetchKGZRY;
    }()
    /**
     * FetchSELFHELPID接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchSELFHELPID",
    value: function () {
      var _FetchSELFHELPID = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee38() {
        var context,
            data,
            isloading,
            tempData,
            _args38 = arguments;
        return regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                context = _args38.length > 0 && _args38[0] !== undefined ? _args38[0] : {};
                data = _args38.length > 1 && _args38[1] !== undefined ? _args38[1] : {};
                isloading = _args38.length > 2 ? _args38[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context38.abrupt("return", Http.getInstance().get("/pimpeople/fetchselfhelpid", tempData, isloading));

              case 5:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38);
      }));

      function FetchSELFHELPID() {
        return _FetchSELFHELPID.apply(this, arguments);
      }

      return FetchSELFHELPID;
    }()
    /**
     * FetchSYQYGCX接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchSYQYGCX",
    value: function () {
      var _FetchSYQYGCX = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee39() {
        var context,
            data,
            isloading,
            tempData,
            _args39 = arguments;
        return regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                context = _args39.length > 0 && _args39[0] !== undefined ? _args39[0] : {};
                data = _args39.length > 1 && _args39[1] !== undefined ? _args39[1] : {};
                isloading = _args39.length > 2 ? _args39[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context39.abrupt("return", Http.getInstance().get("/pimpeople/fetchsyqygcx", tempData, isloading));

              case 5:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39);
      }));

      function FetchSYQYGCX() {
        return _FetchSYQYGCX.apply(this, arguments);
      }

      return FetchSYQYGCX;
    }()
    /**
     * FetchLZRYHMC接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchLZRYHMC",
    value: function () {
      var _FetchLZRYHMC = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee40() {
        var context,
            data,
            isloading,
            tempData,
            _args40 = arguments;
        return regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                context = _args40.length > 0 && _args40[0] !== undefined ? _args40[0] : {};
                data = _args40.length > 1 && _args40[1] !== undefined ? _args40[1] : {};
                isloading = _args40.length > 2 ? _args40[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context40.abrupt("return", Http.getInstance().get("/pimpeople/fetchlzryhmc", tempData, isloading));

              case 5:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40);
      }));

      function FetchLZRYHMC() {
        return _FetchLZRYHMC.apply(this, arguments);
      }

      return FetchLZRYHMC;
    }()
    /**
     * FetchTitleUse接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchTitleUse",
    value: function () {
      var _FetchTitleUse = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee41() {
        var context,
            data,
            isloading,
            tempData,
            _args41 = arguments;
        return regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                context = _args41.length > 0 && _args41[0] !== undefined ? _args41[0] : {};
                data = _args41.length > 1 && _args41[1] !== undefined ? _args41[1] : {};
                isloading = _args41.length > 2 ? _args41[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context41.abrupt("return", Http.getInstance().get("/pimpeople/fetchtitleuse", tempData, isloading));

              case 5:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41);
      }));

      function FetchTitleUse() {
        return _FetchTitleUse.apply(this, arguments);
      }

      return FetchTitleUse;
    }()
    /**
     * FetchJXQYGCX接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchJXQYGCX",
    value: function () {
      var _FetchJXQYGCX = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee42() {
        var context,
            data,
            isloading,
            tempData,
            _args42 = arguments;
        return regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                context = _args42.length > 0 && _args42[0] !== undefined ? _args42[0] : {};
                data = _args42.length > 1 && _args42[1] !== undefined ? _args42[1] : {};
                isloading = _args42.length > 2 ? _args42[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context42.abrupt("return", Http.getInstance().get("/pimpeople/fetchjxqygcx", tempData, isloading));

              case 5:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42);
      }));

      function FetchJXQYGCX() {
        return _FetchJXQYGCX.apply(this, arguments);
      }

      return FetchJXQYGCX;
    }()
    /**
     * FetchYXZFPRYDS接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchYXZFPRYDS",
    value: function () {
      var _FetchYXZFPRYDS = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee43() {
        var context,
            data,
            isloading,
            tempData,
            _args43 = arguments;
        return regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                context = _args43.length > 0 && _args43[0] !== undefined ? _args43[0] : {};
                data = _args43.length > 1 && _args43[1] !== undefined ? _args43[1] : {};
                isloading = _args43.length > 2 ? _args43[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context43.abrupt("return", Http.getInstance().get("/pimpeople/fetchyxzfpryds", tempData, isloading));

              case 5:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43);
      }));

      function FetchYXZFPRYDS() {
        return _FetchYXZFPRYDS.apply(this, arguments);
      }

      return FetchYXZFPRYDS;
    }()
    /**
     * FetchRYZT_30接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchRYZT_30",
    value: function () {
      var _FetchRYZT_ = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee44() {
        var context,
            data,
            isloading,
            tempData,
            _args44 = arguments;
        return regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                context = _args44.length > 0 && _args44[0] !== undefined ? _args44[0] : {};
                data = _args44.length > 1 && _args44[1] !== undefined ? _args44[1] : {};
                isloading = _args44.length > 2 ? _args44[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context44.abrupt("return", Http.getInstance().get("/pimpeople/fetchryzt_30", tempData, isloading));

              case 5:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44);
      }));

      function FetchRYZT_30() {
        return _FetchRYZT_.apply(this, arguments);
      }

      return FetchRYZT_30;
    }()
    /**
     * FetchDTXYG接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchDTXYG",
    value: function () {
      var _FetchDTXYG = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee45() {
        var context,
            data,
            isloading,
            tempData,
            _args45 = arguments;
        return regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                context = _args45.length > 0 && _args45[0] !== undefined ? _args45[0] : {};
                data = _args45.length > 1 && _args45[1] !== undefined ? _args45[1] : {};
                isloading = _args45.length > 2 ? _args45[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context45.abrupt("return", Http.getInstance().get("/pimpeople/fetchdtxyg", tempData, isloading));

              case 5:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45);
      }));

      function FetchDTXYG() {
        return _FetchDTXYG.apply(this, arguments);
      }

      return FetchDTXYG;
    }()
    /**
     * FetchXZKQRY接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchXZKQRY",
    value: function () {
      var _FetchXZKQRY = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee46() {
        var context,
            data,
            isloading,
            tempData,
            _args46 = arguments;
        return regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                context = _args46.length > 0 && _args46[0] !== undefined ? _args46[0] : {};
                data = _args46.length > 1 && _args46[1] !== undefined ? _args46[1] : {};
                isloading = _args46.length > 2 ? _args46[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context46.abrupt("return", Http.getInstance().get("/pimpeople/fetchxzkqry", tempData, isloading));

              case 5:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46);
      }));

      function FetchXZKQRY() {
        return _FetchXZKQRY.apply(this, arguments);
      }

      return FetchXZKQRY;
    }()
    /**
     * FetchREP_PERSONAGE接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchREP_PERSONAGE",
    value: function () {
      var _FetchREP_PERSONAGE = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee47() {
        var context,
            data,
            isloading,
            tempData,
            _args47 = arguments;
        return regeneratorRuntime.wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                context = _args47.length > 0 && _args47[0] !== undefined ? _args47[0] : {};
                data = _args47.length > 1 && _args47[1] !== undefined ? _args47[1] : {};
                isloading = _args47.length > 2 ? _args47[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context47.abrupt("return", Http.getInstance().get("/pimpeople/fetchrep_personage", tempData, isloading));

              case 5:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47);
      }));

      function FetchREP_PERSONAGE() {
        return _FetchREP_PERSONAGE.apply(this, arguments);
      }

      return FetchREP_PERSONAGE;
    }()
    /**
     * FetchSYQKZZRY接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchSYQKZZRY",
    value: function () {
      var _FetchSYQKZZRY = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee48() {
        var context,
            data,
            isloading,
            tempData,
            _args48 = arguments;
        return regeneratorRuntime.wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                context = _args48.length > 0 && _args48[0] !== undefined ? _args48[0] : {};
                data = _args48.length > 1 && _args48[1] !== undefined ? _args48[1] : {};
                isloading = _args48.length > 2 ? _args48[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context48.abrupt("return", Http.getInstance().get("/pimpeople/fetchsyqkzzry", tempData, isloading));

              case 5:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48);
      }));

      function FetchSYQKZZRY() {
        return _FetchSYQKZZRY.apply(this, arguments);
      }

      return FetchSYQKZZRY;
    }()
    /**
     * FetchJXQKZZRY接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchJXQKZZRY",
    value: function () {
      var _FetchJXQKZZRY = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee49() {
        var context,
            data,
            isloading,
            tempData,
            _args49 = arguments;
        return regeneratorRuntime.wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                context = _args49.length > 0 && _args49[0] !== undefined ? _args49[0] : {};
                data = _args49.length > 1 && _args49[1] !== undefined ? _args49[1] : {};
                isloading = _args49.length > 2 ? _args49[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context49.abrupt("return", Http.getInstance().get("/pimpeople/fetchjxqkzzry", tempData, isloading));

              case 5:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49);
      }));

      function FetchJXQKZZRY() {
        return _FetchJXQKZZRY.apply(this, arguments);
      }

      return FetchJXQKZZRY;
    }()
    /**
     * FetchTXGB接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchTXGB",
    value: function () {
      var _FetchTXGB = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee50() {
        var context,
            data,
            isloading,
            tempData,
            _args50 = arguments;
        return regeneratorRuntime.wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                context = _args50.length > 0 && _args50[0] !== undefined ? _args50[0] : {};
                data = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};
                isloading = _args50.length > 2 ? _args50[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context50.abrupt("return", Http.getInstance().get("/pimpeople/fetchtxgb", tempData, isloading));

              case 5:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50);
      }));

      function FetchTXGB() {
        return _FetchTXGB.apply(this, arguments);
      }

      return FetchTXGB;
    }()
    /**
     * FetchKZJBDRY接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchKZJBDRY",
    value: function () {
      var _FetchKZJBDRY = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee51() {
        var context,
            data,
            isloading,
            tempData,
            _args51 = arguments;
        return regeneratorRuntime.wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                context = _args51.length > 0 && _args51[0] !== undefined ? _args51[0] : {};
                data = _args51.length > 1 && _args51[1] !== undefined ? _args51[1] : {};
                isloading = _args51.length > 2 ? _args51[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context51.abrupt("return", Http.getInstance().get("/pimpeople/fetchkzjbdry", tempData, isloading));

              case 5:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51);
      }));

      function FetchKZJBDRY() {
        return _FetchKZJBDRY.apply(this, arguments);
      }

      return FetchKZJBDRY;
    }()
    /**
     * FetchCurOrgPimperson接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchCurOrgPimperson",
    value: function () {
      var _FetchCurOrgPimperson = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee52() {
        var context,
            data,
            isloading,
            tempData,
            _args52 = arguments;
        return regeneratorRuntime.wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                context = _args52.length > 0 && _args52[0] !== undefined ? _args52[0] : {};
                data = _args52.length > 1 && _args52[1] !== undefined ? _args52[1] : {};
                isloading = _args52.length > 2 ? _args52[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context52.abrupt("return", Http.getInstance().get("/pimpeople/fetchcurorgpimperson", tempData, isloading));

              case 5:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52);
      }));

      function FetchCurOrgPimperson() {
        return _FetchCurOrgPimperson.apply(this, arguments);
      }

      return FetchCurOrgPimperson;
    }()
    /**
     * FetchTXRYCX接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchTXRYCX",
    value: function () {
      var _FetchTXRYCX = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee53() {
        var context,
            data,
            isloading,
            tempData,
            _args53 = arguments;
        return regeneratorRuntime.wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                context = _args53.length > 0 && _args53[0] !== undefined ? _args53[0] : {};
                data = _args53.length > 1 && _args53[1] !== undefined ? _args53[1] : {};
                isloading = _args53.length > 2 ? _args53[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context53.abrupt("return", Http.getInstance().get("/pimpeople/fetchtxrycx", tempData, isloading));

              case 5:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53);
      }));

      function FetchTXRYCX() {
        return _FetchTXRYCX.apply(this, arguments);
      }

      return FetchTXRYCX;
    }()
    /**
     * FetchKXZSYQKZZRYDS接口方法
     *
     * @param {*} [context={}]
     * @param {*} [data={}]
     * @param {boolean} [isloading]
     * @returns {Promise<any>}
     * @memberof PimPersonServiceBase
     */

  }, {
    key: "FetchKXZSYQKZZRYDS",
    value: function () {
      var _FetchKXZSYQKZZRYDS = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee54() {
        var context,
            data,
            isloading,
            tempData,
            _args54 = arguments;
        return regeneratorRuntime.wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                context = _args54.length > 0 && _args54[0] !== undefined ? _args54[0] : {};
                data = _args54.length > 1 && _args54[1] !== undefined ? _args54[1] : {};
                isloading = _args54.length > 2 ? _args54[2] : undefined;
                tempData = JSON.parse(JSON.stringify(data));
                return _context54.abrupt("return", Http.getInstance().get("/pimpeople/fetchkxzsyqkzzryds", tempData, isloading));

              case 5:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54);
      }));

      function FetchKXZSYQKZZRYDS() {
        return _FetchKXZSYQKZZRYDS.apply(this, arguments);
      }

      return FetchKXZSYQKZZRYDS;
    }()
  }]);

  return PimPersonServiceBase;
}(EntityService);

export { PimPersonServiceBase as default };"},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--14-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\pages\\pim\\pim-search-field-set-edit-view\\pim-search-field-set-edit-view-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\pages\\pim\\pim-search-field-set-edit-view\\pim-search-field-set-edit-view-base.vue","mtime":1630509409687},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSAidHNsaWIiOwppbXBvcnQgeyBDb21wb25lbnQsIEVtaXQgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsKaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBWdWVMaWZlQ3ljbGVQcm9jZXNzaW5nLCBFZGl0Vmlld0Jhc2UgfSBmcm9tICdAL2NybS1jb3JlJzsKaW1wb3J0IFBpbVNlYXJjaEZpZWxkU2V0U2VydmljZSBmcm9tICdAL3NlcnZpY2UvcGltLXNlYXJjaC1maWVsZC1zZXQvcGltLXNlYXJjaC1maWVsZC1zZXQtc2VydmljZSc7CmltcG9ydCBFZGl0Vmlld0VuZ2luZSBmcm9tICdAZW5naW5lL3ZpZXcvZWRpdC12aWV3LWVuZ2luZSc7Ci8qKg0KICog57uE5ZCI5p+l6K+i5p2h5Lu26K6+572u57yW6L6R6KeG5Zu+5Z+657G7DQogKg0KICogQGV4cG9ydA0KICogQGNsYXNzIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogKiBAZXh0ZW5kcyB7RWRpdFZpZXdCYXNlfQ0KICovCgp2YXIgUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfRWRpdFZpZXdCYXNlKSB7CiAgX2luaGVyaXRzKFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlLCBfRWRpdFZpZXdCYXNlKTsKCiAgLyoqDQogICAqIOe7hOWQiOafpeivouadoeS7tuiuvue9rue8lui+keinhuWbvuWfuuexuw0KICAgKg0KICAgKiBAZXhwb3J0DQogICAqIEBjbGFzcyBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgKiBAZXh0ZW5kcyB7RWRpdFZpZXdCYXNlfQ0KICAgKi8KICBmdW5jdGlvbiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZSgpIHsKICAgIHZhciBfdGhpczI7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlKTsKCiAgICBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgLyoqDQogICAgICog5a6e5L2T5pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7UGltU2VhcmNoRmllbGRTZXRTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5hcHBFbnRpdHlTZXJ2aWNlID0gbmV3IFBpbVNlYXJjaEZpZWxkU2V0U2VydmljZSgpOwogICAgLyoqDQogICAgICog6K6h5pWw5Zmo5pyN5Yqh5a+56LGh6ZuG5ZCIDQogICAgICoNCiAgICAgKiBAdHlwZSB7QXJyYXk8Kj59DQogICAgICogQG1lbWJlcm9mIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMyLmNvdW50ZXJTZXJ2aWNlQXJyYXkgPSBbXTsKICAgIC8qKg0KICAgICAqIOinhuWbvuagh+ivhg0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpczIudmlld3RhZyA9ICdmNWE3MDQxNWE1YjgwMTU0NjNiMWMyMTNlMWExYzI4Mic7CiAgICAvKioNCiAgICAgKiDniLbmlbDmja7lr7nosaENCiAgICAgKg0KICAgICAqIEBwcm90ZWN0ZWQNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuc3JmcGFyZW50ZGF0YSA9IHt9OwogICAgLyoqDQogICAgICog6Ieq5a6a5LmJ6KeG5Zu+5a+86Iiq5LiK5LiL5paH6ZuG5ZCIDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuY3VzdG9tVmlld05hdkNvbnRleHRzID0ge307CiAgICAvKioNCiAgICAgKiDoh6rlrprkuYnop4blm77lr7zoiKrlj4LmlbDpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5jdXN0b21WaWV3UGFyYW1zID0ge307CiAgICAvKioNCiAgICAgKiDop4blm77mqKHlnovmlbDmja4NCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5tb2RlbCA9IHsKICAgICAgc3JmQ2FwdGlvbjogJ2VudGl0aWVzLnBpbXNlYXJjaGZpZWxkc2V0LnZpZXdzLmVkaXR2aWV3LmNhcHRpb24nLAogICAgICBzcmZUaXRsZTogJ2VudGl0aWVzLnBpbXNlYXJjaGZpZWxkc2V0LnZpZXdzLmVkaXR2aWV3LnRpdGxlJywKICAgICAgc3JmU3ViVGl0bGU6ICdlbnRpdGllcy5waW1zZWFyY2hmaWVsZHNldC52aWV3cy5lZGl0dmlldy5zdWJ0aXRsZScsCiAgICAgIGRhdGFJbmZvOiAnJwogICAgfTsKICAgIC8qKg0KICAgICAqIOWuueWZqOaooeWeiw0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMyLmNvbnRhaW5lck1vZGVsID0gewogICAgICB2aWV3X3Rvb2xiYXI6IHsKICAgICAgICBuYW1lOiAndG9vbGJhcicsCiAgICAgICAgdHlwZTogJ1RPT0xCQVInCiAgICAgIH0sCiAgICAgIHZpZXdfZm9ybTogewogICAgICAgIG5hbWU6ICdmb3JtJywKICAgICAgICB0eXBlOiAnRk9STScKICAgICAgfQogICAgfTsKICAgIC8qKg0KICAgICAqIOinhuWbvueKtuaAgeiuoumYheWvueixoQ0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHtTdWJqZWN0PHthY3Rpb246IHN0cmluZywgZGF0YTogYW55fT59DQogICAgICogQG1lbWJlcm9mIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMyLnZpZXdTdGF0ZSA9IG5ldyBTdWJqZWN0KCk7CiAgICAvKioNCiAgICAgKiDlt6XlhbfmoI/mqKHlnosNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3DQogICAgICovCgogICAgX3RoaXMyLnRvb2xCYXJNb2RlbHMgPSB7CiAgICAgIHRiaXRlbTM6IHsKICAgICAgICBuYW1lOiAndGJpdGVtMycsCiAgICAgICAgY2FwdGlvbjogJ+S/neWtmCcsCiAgICAgICAgJ2lzU2hvd0NhcHRpb24nOiB0cnVlLAogICAgICAgICdpc1Nob3dJY29uJzogdHJ1ZSwKICAgICAgICB0b29sdGlwOiAn5L+d5a2YJywKICAgICAgICBpY29uY2xzOiAnZmEgZmEtc2F2ZScsCiAgICAgICAgaWNvbjogJycsCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdERVVJQUNUSU9OJywKICAgICAgICB2aXNhYmxlZDogdHJ1ZSwKICAgICAgICBkYXRhYWNjYWN0aW9uOiAnU1JGVVJfX0pHTFlaUE1YTUUnLAogICAgICAgIHVpYWN0aW9uOiB7CiAgICAgICAgICB0YWc6ICdTYXZlJywKICAgICAgICAgIHRhcmdldDogJycKICAgICAgICB9LAogICAgICAgICJjbGFzcyI6ICcnCiAgICAgIH0sCiAgICAgIHRiaXRlbTQ6IHsKICAgICAgICBuYW1lOiAndGJpdGVtNCcsCiAgICAgICAgY2FwdGlvbjogJ+S/neWtmOW5tuaWsOW7uicsCiAgICAgICAgJ2lzU2hvd0NhcHRpb24nOiB0cnVlLAogICAgICAgICdpc1Nob3dJY29uJzogdHJ1ZSwKICAgICAgICB0b29sdGlwOiAn5L+d5a2Y5bm25paw5bu6JywKICAgICAgICBpY29uY2xzOiAnc3gtdGItc2F2ZWFuZG5ldycsCiAgICAgICAgaWNvbjogJy4uL3Nhc3JmZXgvaW1hZ2VzL2RlZmF1bHQvaWNvbl9zYXZlYW5kbmV3LnBuZycsCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdERVVJQUNUSU9OJywKICAgICAgICB2aXNhYmxlZDogdHJ1ZSwKICAgICAgICBkYXRhYWNjYWN0aW9uOiAnJywKICAgICAgICB1aWFjdGlvbjogewogICAgICAgICAgdGFnOiAnU2F2ZUFuZE5ldycsCiAgICAgICAgICB0YXJnZXQ6ICcnCiAgICAgICAgfSwKICAgICAgICAiY2xhc3MiOiAnJwogICAgICB9LAogICAgICB0Yml0ZW01OiB7CiAgICAgICAgbmFtZTogJ3RiaXRlbTUnLAogICAgICAgIGNhcHRpb246ICfkv53lrZjlubblhbPpl60nLAogICAgICAgICdpc1Nob3dDYXB0aW9uJzogdHJ1ZSwKICAgICAgICAnaXNTaG93SWNvbic6IHRydWUsCiAgICAgICAgdG9vbHRpcDogJ+S/neWtmOW5tuWFs+mXrScsCiAgICAgICAgaWNvbmNsczogJ3N4LXRiLXNhdmVhbmRjbG9zZScsCiAgICAgICAgaWNvbjogJy4uL3Nhc3JmZXgvaW1hZ2VzL2RlZmF1bHQvaWNvbl9zYXZlYW5kY2xvc2UucG5nJywKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ0RFVUlBQ1RJT04nLAogICAgICAgIHZpc2FibGVkOiB0cnVlLAogICAgICAgIGRhdGFhY2NhY3Rpb246ICdTUkZVUl9fSkdMWVhLTUwnLAogICAgICAgIHVpYWN0aW9uOiB7CiAgICAgICAgICB0YWc6ICdTYXZlQW5kRXhpdCcsCiAgICAgICAgICB0YXJnZXQ6ICcnCiAgICAgICAgfSwKICAgICAgICAiY2xhc3MiOiAnJwogICAgICB9LAogICAgICB0Yml0ZW03OiB7CiAgICAgICAgbmFtZTogJ3RiaXRlbTcnLAogICAgICAgIGNhcHRpb246ICfliKDpmaTlubblhbPpl60nLAogICAgICAgICdpc1Nob3dDYXB0aW9uJzogdHJ1ZSwKICAgICAgICAnaXNTaG93SWNvbic6IHRydWUsCiAgICAgICAgdG9vbHRpcDogJ+WIoOmZpOW5tuWFs+mXrScsCiAgICAgICAgaWNvbmNsczogJ2ZhIGZhLXJlbW92ZScsCiAgICAgICAgaWNvbjogJycsCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdERVVJQUNUSU9OJywKICAgICAgICB2aXNhYmxlZDogdHJ1ZSwKICAgICAgICBkYXRhYWNjYWN0aW9uOiAnJywKICAgICAgICB1aWFjdGlvbjogewogICAgICAgICAgdGFnOiAnUmVtb3ZlQW5kRXhpdCcsCiAgICAgICAgICB0YXJnZXQ6ICdTSU5HTEVLRVknCiAgICAgICAgfSwKICAgICAgICAiY2xhc3MiOiAnJwogICAgICB9LAogICAgICB0Yml0ZW0yMjogewogICAgICAgIG5hbWU6ICd0Yml0ZW0yMicsCiAgICAgICAgY2FwdGlvbjogJ+W4ruWKqScsCiAgICAgICAgJ2lzU2hvd0NhcHRpb24nOiB0cnVlLAogICAgICAgICdpc1Nob3dJY29uJzogdHJ1ZSwKICAgICAgICB0b29sdGlwOiAn5biu5YqpJywKICAgICAgICBpY29uY2xzOiAnZmEgZmEtcXVlc3Rpb24nLAogICAgICAgIGljb246ICcnLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnREVVSUFDVElPTicsCiAgICAgICAgdmlzYWJsZWQ6IHRydWUsCiAgICAgICAgZGF0YWFjY2FjdGlvbjogJycsCiAgICAgICAgdWlhY3Rpb246IHsKICAgICAgICAgIHRhZzogJ0hlbHAnLAogICAgICAgICAgdGFyZ2V0OiAnJwogICAgICAgIH0sCiAgICAgICAgImNsYXNzIjogJycKICAgICAgfQogICAgfTsKICAgIC8qKg0KICAgICAqIOinhuWbvuW8leaTjg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHtFbmdpbmV9DQogICAgICogQG1lbWJlcm9mIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogICAgICovCgogICAgX3RoaXMyLmVuZ2luZSA9IG5ldyBFZGl0Vmlld0VuZ2luZSgpOwogICAgcmV0dXJuIF90aGlzMjsKICB9CiAgLyoqDQogICAqIOaVsOaNruWPmOWMlg0KICAgKg0KICAgKiBAcGFyYW0geyp9IHZhbA0KICAgKiBAcmV0dXJucyB7Kn0NCiAgICogQG1lbWJlcm9mIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlLCBbewogICAga2V5OiAidmlld0RhdGFzQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB2aWV3RGF0YXNDaGFuZ2UodmFsKSB7CiAgICAgIHJldHVybiB2YWw7CiAgICB9CiAgICAvKioNCiAgICAgKiDlvJXmk47liJ3lp4vljJYNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAbWVtYmVyb2YgUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZW5naW5lSW5pdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5naW5lSW5pdCgpIHsKICAgICAgdGhpcy5lbmdpbmUuaW5pdCh7CiAgICAgICAgdmlldzogdGhpcywKICAgICAgICBmb3JtOiB0aGlzLiRyZWZzLmZvcm0sCiAgICAgICAgcDJrOiAnMCcsCiAgICAgICAga2V5UFNERUZpZWxkOiAncGltc2VhcmNoZmllbGRzZXQnLAogICAgICAgIG1ham9yUFNERUZpZWxkOiAncGltc2VhcmNoZmllbGRzZXRuYW1lJywKICAgICAgICBpc0xvYWREZWZhdWx0OiB0cnVlCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICogdG9vbGJhciDpg6jku7YgY2xpY2sg5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFthcmdzPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50DQogICAgICogQG1lbWJlcm9mIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInRvb2xiYXJfY2xpY2siLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvb2xiYXJfY2xpY2soJGV2ZW50LCAkZXZlbnQyKSB7CiAgICAgIGlmIChPYmplY3QuaXMoJGV2ZW50LnRhZywgJ3RiaXRlbTMnKSkgewogICAgICAgIHRoaXMudG9vbGJhcl90Yml0ZW0zX2NsaWNrKG51bGwsICcnLCAkZXZlbnQyKTsKICAgICAgfQoKICAgICAgaWYgKE9iamVjdC5pcygkZXZlbnQudGFnLCAndGJpdGVtNCcpKSB7CiAgICAgICAgdGhpcy50b29sYmFyX3RiaXRlbTRfY2xpY2sobnVsbCwgJycsICRldmVudDIpOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmlzKCRldmVudC50YWcsICd0Yml0ZW01JykpIHsKICAgICAgICB0aGlzLnRvb2xiYXJfdGJpdGVtNV9jbGljayhudWxsLCAnJywgJGV2ZW50Mik7CiAgICAgIH0KCiAgICAgIGlmIChPYmplY3QuaXMoJGV2ZW50LnRhZywgJ3RiaXRlbTcnKSkgewogICAgICAgIHRoaXMudG9vbGJhcl90Yml0ZW03X2NsaWNrKG51bGwsICcnLCAkZXZlbnQyKTsKICAgICAgfQoKICAgICAgaWYgKE9iamVjdC5pcygkZXZlbnQudGFnLCAndGJpdGVtMTAnKSkgewogICAgICAgIHRoaXMudG9vbGJhcl90Yml0ZW0xMF9jbGljayhudWxsLCAnJywgJGV2ZW50Mik7CiAgICAgIH0KCiAgICAgIGlmIChPYmplY3QuaXMoJGV2ZW50LnRhZywgJ3RiaXRlbTE1JykpIHsKICAgICAgICB0aGlzLnRvb2xiYXJfdGJpdGVtMTVfY2xpY2sobnVsbCwgJycsICRldmVudDIpOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmlzKCRldmVudC50YWcsICd0Yml0ZW0yMicpKSB7CiAgICAgICAgdGhpcy50b29sYmFyX3RiaXRlbTIyX2NsaWNrKG51bGwsICcnLCAkZXZlbnQyKTsKICAgICAgfQogICAgfQogICAgLyoqDQogICAgICogZm9ybSDpg6jku7Ygc2F2ZSDkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2FyZ3M9e31dDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZm9ybV9zYXZlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtX3NhdmUoJGV2ZW50LCAkZXZlbnQyKSB7CiAgICAgIHRoaXMuZW5naW5lLm9uQ3RybEV2ZW50KCdmb3JtJywgJ3NhdmUnLCAkZXZlbnQpOwogICAgfQogICAgLyoqDQogICAgICogZm9ybSDpg6jku7YgcmVtb3ZlIOS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJncz17fV0NCiAgICAgKiBAcGFyYW0geyp9ICRldmVudA0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmb3JtX3JlbW92ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybV9yZW1vdmUoJGV2ZW50LCAkZXZlbnQyKSB7CiAgICAgIHRoaXMuZW5naW5lLm9uQ3RybEV2ZW50KCdmb3JtJywgJ3JlbW92ZScsICRldmVudCk7CiAgICB9CiAgICAvKioNCiAgICAgKiBmb3JtIOmDqOS7tiBsb2FkIOS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJncz17fV0NCiAgICAgKiBAcGFyYW0geyp9ICRldmVudA0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmb3JtX2xvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1fbG9hZCgkZXZlbnQsICRldmVudDIpIHsKICAgICAgdGhpcy5lbmdpbmUub25DdHJsRXZlbnQoJ2Zvcm0nLCAnbG9hZCcsICRldmVudCk7CiAgICB9CiAgICAvKioNCiAgICAgKiDpgLvovpHkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW3BhcmFtcz17fV0NCiAgICAgKiBAcGFyYW0geyp9IFt0YWddDQogICAgICogQHBhcmFtIHsqfSBbJGV2ZW50XQ0KICAgICAqIEBtZW1iZXJvZg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ0b29sYmFyX3RiaXRlbTNfY2xpY2siLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvb2xiYXJfdGJpdGVtM19jbGljaygpIHsKICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgIHZhciB0YWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDsKICAgICAgdmFyICRldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkOwogICAgICAvLyDlj4LmlbAKICAgICAgLy8g5Y+W5pWwCiAgICAgIHZhciBkYXRhcyA9IFtdOwogICAgICB2YXIgeERhdGEgPSBudWxsOyAvLyBfdGhpcyDmjIflkJHlrrnlmajlr7nosaEKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgcGFyYW1KTyA9IHt9OwogICAgICB2YXIgY29udGV4dEpPID0ge307CiAgICAgIHhEYXRhID0gdGhpcy4kcmVmcy5mb3JtOwoKICAgICAgaWYgKHhEYXRhLmdldERhdGFzICYmIHhEYXRhLmdldERhdGFzIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICBkYXRhcyA9IF90b0NvbnN1bWFibGVBcnJheSh4RGF0YS5nZXREYXRhcygpKTsKICAgICAgfQoKICAgICAgaWYgKHBhcmFtcykgewogICAgICAgIGRhdGFzID0gW3BhcmFtc107CiAgICAgIH0gLy8g55WM6Z2i6KGM5Li6CgoKICAgICAgdGhpcy5TYXZlKGRhdGFzLCBjb250ZXh0Sk8sIHBhcmFtSk8sICRldmVudCwgeERhdGEsIHRoaXMsICJQaW1TZWFyY2hGaWVsZFNldCIpOwogICAgfQogICAgLyoqDQogICAgICog6YC76L6R5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFtwYXJhbXM9e31dDQogICAgICogQHBhcmFtIHsqfSBbdGFnXQ0KICAgICAqIEBwYXJhbSB7Kn0gWyRldmVudF0NCiAgICAgKiBAbWVtYmVyb2YNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidG9vbGJhcl90Yml0ZW00X2NsaWNrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b29sYmFyX3RiaXRlbTRfY2xpY2soKSB7CiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICB2YXIgdGFnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICAgIHZhciAkZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgLy8g5Y+C5pWwCiAgICAgIC8vIOWPluaVsAogICAgICB2YXIgZGF0YXMgPSBbXTsKICAgICAgdmFyIHhEYXRhID0gbnVsbDsgLy8gX3RoaXMg5oyH5ZCR5a655Zmo5a+56LGhCgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHBhcmFtSk8gPSB7fTsKICAgICAgdmFyIGNvbnRleHRKTyA9IHt9OwogICAgICB4RGF0YSA9IHRoaXMuJHJlZnMuZm9ybTsKCiAgICAgIGlmICh4RGF0YS5nZXREYXRhcyAmJiB4RGF0YS5nZXREYXRhcyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgZGF0YXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoeERhdGEuZ2V0RGF0YXMoKSk7CiAgICAgIH0KCiAgICAgIGlmIChwYXJhbXMpIHsKICAgICAgICBkYXRhcyA9IFtwYXJhbXNdOwogICAgICB9IC8vIOeVjOmdouihjOS4ugoKCiAgICAgIHRoaXMuU2F2ZUFuZE5ldyhkYXRhcywgY29udGV4dEpPLCBwYXJhbUpPLCAkZXZlbnQsIHhEYXRhLCB0aGlzLCAiUGltU2VhcmNoRmllbGRTZXQiKTsKICAgIH0KICAgIC8qKg0KICAgICAqIOmAu+i+keS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW3RhZ10NCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdDQogICAgICogQG1lbWJlcm9mDQogICAgICovCgogIH0sIHsKICAgIGtleTogInRvb2xiYXJfdGJpdGVtNV9jbGljayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9vbGJhcl90Yml0ZW01X2NsaWNrKCkgewogICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKICAgICAgdmFyIHRhZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogICAgICB2YXIgJGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgICAgIC8vIOWPguaVsAogICAgICAvLyDlj5bmlbAKICAgICAgdmFyIGRhdGFzID0gW107CiAgICAgIHZhciB4RGF0YSA9IG51bGw7IC8vIF90aGlzIOaMh+WQkeWuueWZqOWvueixoQoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBwYXJhbUpPID0ge307CiAgICAgIHZhciBjb250ZXh0Sk8gPSB7fTsKICAgICAgeERhdGEgPSB0aGlzLiRyZWZzLmZvcm07CgogICAgICBpZiAoeERhdGEuZ2V0RGF0YXMgJiYgeERhdGEuZ2V0RGF0YXMgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgIGRhdGFzID0gX3RvQ29uc3VtYWJsZUFycmF5KHhEYXRhLmdldERhdGFzKCkpOwogICAgICB9CgogICAgICBpZiAocGFyYW1zKSB7CiAgICAgICAgZGF0YXMgPSBbcGFyYW1zXTsKICAgICAgfSAvLyDnlYzpnaLooYzkuLoKCgogICAgICB0aGlzLlNhdmVBbmRFeGl0KGRhdGFzLCBjb250ZXh0Sk8sIHBhcmFtSk8sICRldmVudCwgeERhdGEsIHRoaXMsICJQaW1TZWFyY2hGaWVsZFNldCIpOwogICAgfQogICAgLyoqDQogICAgICog6YC76L6R5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFtwYXJhbXM9e31dDQogICAgICogQHBhcmFtIHsqfSBbdGFnXQ0KICAgICAqIEBwYXJhbSB7Kn0gWyRldmVudF0NCiAgICAgKiBAbWVtYmVyb2YNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidG9vbGJhcl90Yml0ZW03X2NsaWNrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b29sYmFyX3RiaXRlbTdfY2xpY2soKSB7CiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICB2YXIgdGFnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICAgIHZhciAkZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgLy8g5Y+C5pWwCiAgICAgIC8vIOWPluaVsAogICAgICB2YXIgZGF0YXMgPSBbXTsKICAgICAgdmFyIHhEYXRhID0gbnVsbDsgLy8gX3RoaXMg5oyH5ZCR5a655Zmo5a+56LGhCgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHBhcmFtSk8gPSB7fTsKICAgICAgdmFyIGNvbnRleHRKTyA9IHt9OwogICAgICB4RGF0YSA9IHRoaXMuJHJlZnMuZm9ybTsKCiAgICAgIGlmICh4RGF0YS5nZXREYXRhcyAmJiB4RGF0YS5nZXREYXRhcyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgZGF0YXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoeERhdGEuZ2V0RGF0YXMoKSk7CiAgICAgIH0KCiAgICAgIGlmIChwYXJhbXMpIHsKICAgICAgICBkYXRhcyA9IFtwYXJhbXNdOwogICAgICB9IC8vIOeVjOmdouihjOS4ugoKCiAgICAgIHRoaXMuUmVtb3ZlQW5kRXhpdChkYXRhcywgY29udGV4dEpPLCBwYXJhbUpPLCAkZXZlbnQsIHhEYXRhLCB0aGlzLCAiUGltU2VhcmNoRmllbGRTZXQiKTsKICAgIH0KICAgIC8qKg0KICAgICAqIOmAu+i+keS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW3RhZ10NCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdDQogICAgICogQG1lbWJlcm9mDQogICAgICovCgogIH0sIHsKICAgIGtleTogInRvb2xiYXJfdGJpdGVtMTBfY2xpY2siLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvb2xiYXJfdGJpdGVtMTBfY2xpY2soKSB7CiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICB2YXIgdGFnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICAgIHZhciAkZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgLy8g5Y+C5pWwCiAgICAgIC8vIOWPluaVsAogICAgICB2YXIgZGF0YXMgPSBbXTsKICAgICAgdmFyIHhEYXRhID0gbnVsbDsgLy8gX3RoaXMg5oyH5ZCR5a655Zmo5a+56LGhCgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHBhcmFtSk8gPSB7fTsKICAgICAgdmFyIGNvbnRleHRKTyA9IHt9OwogICAgICB4RGF0YSA9IHRoaXMuJHJlZnMuZm9ybTsKCiAgICAgIGlmICh4RGF0YS5nZXREYXRhcyAmJiB4RGF0YS5nZXREYXRhcyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgZGF0YXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoeERhdGEuZ2V0RGF0YXMoKSk7CiAgICAgIH0KCiAgICAgIGlmIChwYXJhbXMpIHsKICAgICAgICBkYXRhcyA9IFtwYXJhbXNdOwogICAgICB9IC8vIOeVjOmdouihjOS4ugoKCiAgICAgIHRoaXMuVmlld1dGU3RlcChkYXRhcywgY29udGV4dEpPLCBwYXJhbUpPLCAkZXZlbnQsIHhEYXRhLCB0aGlzLCAiUGltU2VhcmNoRmllbGRTZXQiKTsKICAgIH0KICAgIC8qKg0KICAgICAqIOmAu+i+keS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW3RhZ10NCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdDQogICAgICogQG1lbWJlcm9mDQogICAgICovCgogIH0sIHsKICAgIGtleTogInRvb2xiYXJfdGJpdGVtMTVfY2xpY2siLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvb2xiYXJfdGJpdGVtMTVfY2xpY2soKSB7CiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICB2YXIgdGFnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICAgIHZhciAkZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgLy8g5Y+C5pWwCiAgICAgIC8vIOWPluaVsAogICAgICB2YXIgZGF0YXMgPSBbXTsKICAgICAgdmFyIHhEYXRhID0gbnVsbDsgLy8gX3RoaXMg5oyH5ZCR5a655Zmo5a+56LGhCgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHBhcmFtSk8gPSB7fTsKICAgICAgdmFyIGNvbnRleHRKTyA9IHt9OwogICAgICB4RGF0YSA9IHRoaXMuJHJlZnMuZm9ybTsKCiAgICAgIGlmICh4RGF0YS5nZXREYXRhcyAmJiB4RGF0YS5nZXREYXRhcyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgZGF0YXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoeERhdGEuZ2V0RGF0YXMoKSk7CiAgICAgIH0KCiAgICAgIGlmIChwYXJhbXMpIHsKICAgICAgICBkYXRhcyA9IFtwYXJhbXNdOwogICAgICB9IC8vIOeVjOmdouihjOS4ugoKCiAgICAgIHRoaXMuUHJpbnQoZGF0YXMsIGNvbnRleHRKTywgcGFyYW1KTywgJGV2ZW50LCB4RGF0YSwgdGhpcywgIlBpbVNlYXJjaEZpZWxkU2V0Iik7CiAgICB9CiAgICAvKioNCiAgICAgKiDpgLvovpHkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW3BhcmFtcz17fV0NCiAgICAgKiBAcGFyYW0geyp9IFt0YWddDQogICAgICogQHBhcmFtIHsqfSBbJGV2ZW50XQ0KICAgICAqIEBtZW1iZXJvZg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ0b29sYmFyX3RiaXRlbTIyX2NsaWNrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b29sYmFyX3RiaXRlbTIyX2NsaWNrKCkgewogICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKICAgICAgdmFyIHRhZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogICAgICB2YXIgJGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgICAgIC8vIOWPguaVsAogICAgICAvLyDlj5bmlbAKICAgICAgdmFyIGRhdGFzID0gW107CiAgICAgIHZhciB4RGF0YSA9IG51bGw7IC8vIF90aGlzIOaMh+WQkeWuueWZqOWvueixoQoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBwYXJhbUpPID0ge307CiAgICAgIHZhciBjb250ZXh0Sk8gPSB7fTsKICAgICAgeERhdGEgPSB0aGlzLiRyZWZzLmZvcm07CgogICAgICBpZiAoeERhdGEuZ2V0RGF0YXMgJiYgeERhdGEuZ2V0RGF0YXMgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgIGRhdGFzID0gX3RvQ29uc3VtYWJsZUFycmF5KHhEYXRhLmdldERhdGFzKCkpOwogICAgICB9CgogICAgICBpZiAocGFyYW1zKSB7CiAgICAgICAgZGF0YXMgPSBbcGFyYW1zXTsKICAgICAgfSAvLyDnlYzpnaLooYzkuLoKCgogICAgICB0aGlzLkhlbHAoZGF0YXMsIGNvbnRleHRKTywgcGFyYW1KTywgJGV2ZW50LCB4RGF0YSwgdGhpcywgIlBpbVNlYXJjaEZpZWxkU2V0Iik7CiAgICB9CiAgICAvKioNCiAgICAgKiDkv53lrZgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3Mg5b2T5YmN5pWw5o2uDQogICAgICogQHBhcmFtIHthbnl9IGNvbnRleHRKTyDooYzkuLrpmYTliqDkuIrkuIvmlocNCiAgICAgKiBAcGFyYW0geyp9IFtwYXJhbXNdIOmZhOWKoOWPguaVsA0KICAgICAqIEBwYXJhbSB7Kn0gWyRldmVudF0g5LqL5Lu25rqQDQogICAgICogQHBhcmFtIHsqfSBbeERhdGFdICDmiafooYzooYzkuLrmiYDpnIDlvZPliY3pg6jku7YNCiAgICAgKiBAcGFyYW0geyp9IFthY3Rpb25Db250ZXh0XSAg5omn6KGM6KGM5Li65LiK5LiL5paHDQogICAgICogQG1lbWJlcm9mIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIlNhdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIFNhdmUoYXJncywgY29udGV4dEpPLCBwYXJhbXMsICRldmVudCwgeERhdGEsIGFjdGlvbkNvbnRleHQsIHNyZlBhcmVudERlTmFtZSkgewogICAgICAvLyDnlYzpnaLooYzkuLrlrrnlmajlr7nosaEgX3RoaXMKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICh4RGF0YSAmJiB4RGF0YS5zYXZlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICB4RGF0YS5zYXZlKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzLiRlbWl0KCd2aWV3ZGF0YXNjaGFuZ2UnLCBbX29iamVjdFNwcmVhZCh7fSwgcmVzcG9uc2UuZGF0YSldKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmIChfdGhpcy5zYXZlICYmIF90aGlzLnNhdmUgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgIF90aGlzLnNhdmUoKTsKICAgICAgfQogICAgfQogICAgLyoqDQogICAgICog5L+d5a2Y5bm25paw5bu6DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIOW9k+WJjeaVsOaNrg0KICAgICAqIEBwYXJhbSB7YW55fSBjb250ZXh0Sk8g6KGM5Li66ZmE5Yqg5LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zXSDpmYTliqDlj4LmlbANCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdIOS6i+S7tua6kA0KICAgICAqIEBwYXJhbSB7Kn0gW3hEYXRhXSAg5omn6KGM6KGM5Li65omA6ZyA5b2T5YmN6YOo5Lu2DQogICAgICogQHBhcmFtIHsqfSBbYWN0aW9uQ29udGV4dF0gIOaJp+ihjOihjOS4uuS4iuS4i+aWhw0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJTYXZlQW5kTmV3IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBTYXZlQW5kTmV3KGFyZ3MsIGNvbnRleHRKTywgcGFyYW1zLCAkZXZlbnQsIHhEYXRhLCBhY3Rpb25Db250ZXh0LCBzcmZQYXJlbnREZU5hbWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICgheERhdGEgfHwgISh4RGF0YS5zYXZlQW5kTmV3IGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB4RGF0YS5zYXZlQW5kTmV3KCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICBfdGhpcy4kZW1pdCgndmlld2RhdGFzY2hhbmdlJywgSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsCiAgICAgICAgICAgIGFjdGlvbjogJ3NhdmVBbmROZXcnCiAgICAgICAgICB9KSk7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMuJGVtaXQoJ3ZpZXdkYXRhc2NoYW5nZScsIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLAogICAgICAgICAgYWN0aW9uOiAnc2F2ZUFuZE5ldycsCiAgICAgICAgICBkYXRhOiByZXNwb25zZS5kYXRhCiAgICAgICAgfSkpOwoKICAgICAgICBpZiAoeERhdGEuYXV0b0xvYWQgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgeERhdGEuYXV0b0xvYWQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5L+d5a2Y5bm25YWz6ZetDQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIOW9k+WJjeaVsOaNrg0KICAgICAqIEBwYXJhbSB7YW55fSBjb250ZXh0Sk8g6KGM5Li66ZmE5Yqg5LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zXSDpmYTliqDlj4LmlbANCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdIOS6i+S7tua6kA0KICAgICAqIEBwYXJhbSB7Kn0gW3hEYXRhXSAg5omn6KGM6KGM5Li65omA6ZyA5b2T5YmN6YOo5Lu2DQogICAgICogQHBhcmFtIHsqfSBbYWN0aW9uQ29udGV4dF0gIOaJp+ihjOihjOS4uuS4iuS4i+aWhw0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJTYXZlQW5kRXhpdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gU2F2ZUFuZEV4aXQoYXJncywgY29udGV4dEpPLCBwYXJhbXMsICRldmVudCwgeERhdGEsIGFjdGlvbkNvbnRleHQsIHNyZlBhcmVudERlTmFtZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKHhEYXRhICYmIHhEYXRhLnNhdmVBbmRFeGl0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICB4RGF0YS5zYXZlQW5kRXhpdCgpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAod2luZG93LnBhcmVudCkgewogICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKFtfb2JqZWN0U3ByZWFkKHt9LCByZXNwb25zZS5kYXRhKV0sICcqJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoX3RoaXMuc2F2ZUFuZEV4aXQgJiYgX3RoaXMuc2F2ZUFuZEV4aXQgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgIF90aGlzLnNhdmVBbmRFeGl0KCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh3aW5kb3cucGFyZW50KSB7CiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoW19vYmplY3RTcHJlYWQoe30sIHJlc3BvbnNlLmRhdGEpXSwgJyonKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogICAgLyoqDQogICAgICog5Yig6Zmk5bm25YWz6ZetDQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIOW9k+WJjeaVsOaNrg0KICAgICAqIEBwYXJhbSB7YW55fSBjb250ZXh0Sk8g6KGM5Li66ZmE5Yqg5LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zXSDpmYTliqDlj4LmlbANCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdIOS6i+S7tua6kA0KICAgICAqIEBwYXJhbSB7Kn0gW3hEYXRhXSAg5omn6KGM6KGM5Li65omA6ZyA5b2T5YmN6YOo5Lu2DQogICAgICogQHBhcmFtIHsqfSBbYWN0aW9uQ29udGV4dF0gIOaJp+ihjOihjOS4uuS4iuS4i+aWhw0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJSZW1vdmVBbmRFeGl0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBSZW1vdmVBbmRFeGl0KGFyZ3MsIGNvbnRleHRKTywgcGFyYW1zLCAkZXZlbnQsIHhEYXRhLCBhY3Rpb25Db250ZXh0LCBzcmZQYXJlbnREZU5hbWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICh4RGF0YSAmJiB4RGF0YS5yZW1vdmVBbmRFeGl0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICB4RGF0YS5yZW1vdmVBbmRFeGl0KCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh3aW5kb3cucGFyZW50KSB7CiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoW19vYmplY3RTcHJlYWQoe30sIHJlc3BvbnNlLmRhdGEpXSwgJyonKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmIChfdGhpcy5yZW1vdmVBbmRFeGl0ICYmIF90aGlzLnJlbW92ZUFuZEV4aXQgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgIF90aGlzLnJlbW92ZUFuZEV4aXQoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHdpbmRvdy5wYXJlbnQpIHsKICAgICAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShbX29iamVjdFNwcmVhZCh7fSwgcmVzcG9uc2UuZGF0YSldLCAnKicpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDlvZPliY3mtYHnqIvmraXpqqQNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3Mg5b2T5YmN5pWw5o2uDQogICAgICogQHBhcmFtIHthbnl9IGNvbnRleHRKTyDooYzkuLrpmYTliqDkuIrkuIvmlocNCiAgICAgKiBAcGFyYW0geyp9IFtwYXJhbXNdIOmZhOWKoOWPguaVsA0KICAgICAqIEBwYXJhbSB7Kn0gWyRldmVudF0g5LqL5Lu25rqQDQogICAgICogQHBhcmFtIHsqfSBbeERhdGFdICDmiafooYzooYzkuLrmiYDpnIDlvZPliY3pg6jku7YNCiAgICAgKiBAcGFyYW0geyp9IFthY3Rpb25Db250ZXh0XSAg5omn6KGM6KGM5Li65LiK5LiL5paHDQogICAgICogQG1lbWJlcm9mIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIlZpZXdXRlN0ZXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIFZpZXdXRlN0ZXAoYXJncywgY29udGV4dEpPLCBwYXJhbXMsICRldmVudCwgeERhdGEsIGFjdGlvbkNvbnRleHQsIHNyZlBhcmVudERlTmFtZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCF4RGF0YSB8fCAhKHhEYXRhLndmc3VibWl0IGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB4RGF0YS53ZnN1Ym1pdChhcmdzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBfZGF0YSA9IHJlc3BvbnNlLmRhdGE7CgogICAgICAgIGlmIChfdGhpcy52aWV3ZGF0YSkgewogICAgICAgICAgX3RoaXMuJGVtaXQoJ3ZpZXdkYXRhc2NoYW5nZScsIFtfb2JqZWN0U3ByZWFkKHt9LCBfZGF0YSldKTsKCiAgICAgICAgICBfdGhpcy4kZW1pdCgnY2xvc2UnKTsKICAgICAgICB9IGVsc2UgaWYgKF90aGlzLiR0YWJQYWdlRXhwKSB7CiAgICAgICAgICBfdGhpcy4kdGFiUGFnZUV4cC5vbkNsb3NlKF90aGlzLiRyb3V0ZS5mdWxsUGF0aCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOaJk+WNsA0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncyDlvZPliY3mlbDmja4NCiAgICAgKiBAcGFyYW0ge2FueX0gY29udGV4dEpPIOihjOS4uumZhOWKoOS4iuS4i+aWhw0KICAgICAqIEBwYXJhbSB7Kn0gW3BhcmFtc10g6ZmE5Yqg5Y+C5pWwDQogICAgICogQHBhcmFtIHsqfSBbJGV2ZW50XSDkuovku7bmupANCiAgICAgKiBAcGFyYW0geyp9IFt4RGF0YV0gIOaJp+ihjOihjOS4uuaJgOmcgOW9k+WJjemDqOS7tg0KICAgICAqIEBwYXJhbSB7Kn0gW2FjdGlvbkNvbnRleHRdICDmiafooYzooYzkuLrkuIrkuIvmlocNCiAgICAgKiBAbWVtYmVyb2YgUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiUHJpbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIFByaW50KGFyZ3MsIGNvbnRleHRKTywgcGFyYW1zLCAkZXZlbnQsIHhEYXRhLCBhY3Rpb25Db250ZXh0LCBzcmZQYXJlbnREZU5hbWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICgheERhdGEgfHwgISh4RGF0YS5wcmludCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fCAhJGV2ZW50KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB4RGF0YS5wcmludCgpOwogICAgfQogICAgLyoqDQogICAgICog5biu5YqpDQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIOW9k+WJjeaVsOaNrg0KICAgICAqIEBwYXJhbSB7YW55fSBjb250ZXh0Sk8g6KGM5Li66ZmE5Yqg5LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbcGFyYW1zXSDpmYTliqDlj4LmlbANCiAgICAgKiBAcGFyYW0geyp9IFskZXZlbnRdIOS6i+S7tua6kA0KICAgICAqIEBwYXJhbSB7Kn0gW3hEYXRhXSAg5omn6KGM6KGM5Li65omA6ZyA5b2T5YmN6YOo5Lu2DQogICAgICogQHBhcmFtIHsqfSBbYWN0aW9uQ29udGV4dF0gIOaJp+ihjOihjOS4uuS4iuS4i+aWhw0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJIZWxwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBIZWxwKGFyZ3MsIGNvbnRleHRKTywgcGFyYW1zLCAkZXZlbnQsIHhEYXRhLCBhY3Rpb25Db250ZXh0LCBzcmZQYXJlbnREZU5hbWUpIHsKICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsKICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgZGVzYzogJ+W4ruWKqeacquaUr+aMgScKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDplIDmr4Hop4blm77lm57osIMNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZXN0cm95ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3llZCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICBpZiAodGhpcy52aWV3RGVmYXVsdFVzYWdlKSB7CiAgICAgICAgdmFyIGxvY2FsU3RvcmVMZW5ndGggPSBPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpOwoKICAgICAgICBpZiAobG9jYWxTdG9yZUxlbmd0aC5sZW5ndGggPiAwKSB7CiAgICAgICAgICBsb2NhbFN0b3JlTGVuZ3RoLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgaWYgKGl0ZW0uc3RhcnRzV2l0aChfdGhpczMuY29udGV4dC5zcmZzZXNzaW9uaWQpKSB7CiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oaXRlbSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlOwp9KEVkaXRWaWV3QmFzZSk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW0VtaXQoKV0sIFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlLnByb3RvdHlwZSwgInZpZXdEYXRhc0NoYW5nZSIsIG51bGwpOwoKUGltU2VhcmNoRmllbGRTZXRFZGl0Vmlld0Jhc2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW0NvbXBvbmVudCh7fSksIFZ1ZUxpZmVDeWNsZVByb2Nlc3NpbmddLCBQaW1TZWFyY2hGaWVsZFNldEVkaXRWaWV3QmFzZSk7CmV4cG9ydCBkZWZhdWx0IFBpbVNlYXJjaEZpZWxkU2V0RWRpdFZpZXdCYXNlOw=="},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--13-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-armycadres\\pim-armycadres-ui-service-base.ts","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\uiservice\\pim-armycadres\\pim-armycadres-ui-service-base.ts","mtime":1630509410755},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICdAL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudCc7CmltcG9ydCBVSVNlcnZpY2UgZnJvbSAnLi4vdWktc2VydmljZSc7CmltcG9ydCBQaW1Bcm15Y2FkcmVzU2VydmljZSBmcm9tICdAL3NlcnZpY2UvcGltLWFybXljYWRyZXMvcGltLWFybXljYWRyZXMtc2VydmljZSc7Ci8qKg0KICog5Yab6L2s5bmy6YOoVUnmnI3liqHlr7nosaHln7rnsbsNCiAqDQogKiBAZXhwb3J0DQogKiBAY2xhc3MgUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UNCiAqLwoKdmFyIFBpbUFybXljYWRyZXNVSVNlcnZpY2VCYXNlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1VJU2VydmljZSkgewogIF9pbmhlcml0cyhQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZSwgX1VJU2VydmljZSk7CgogIC8qKg0KICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mICBQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZS4NCiAgICoNCiAgICogQHBhcmFtIHsqfSBbb3B0cz17fV0NCiAgICogQG1lbWJlcm9mICBQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZQ0KICAgKi8KICBmdW5jdGlvbiBQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZSgpIHsKICAgIHZhciBfdGhpczsKCiAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBpbUFybXljYWRyZXNVSVNlcnZpY2VCYXNlKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZSkuY2FsbCh0aGlzLCBvcHRzKSk7CiAgICAvKioNCiAgICAgKiDmmK/lkKbmlK/mjIHlt6XkvZzmtYENCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5pc0VuYWJsZVdvcmtmbG93ID0gZmFsc2U7CiAgICAvKioNCiAgICAgKiDlvZPliY1VSeacjeWKoeWvueW6lOeahOaVsOaNruacjeWKoeWvueixoQ0KICAgICAqDQogICAgICogQG1lbWJlcm9mICBQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzLmRhdGFTZXJ2aWNlID0gbmV3IFBpbUFybXljYWRyZXNTZXJ2aWNlKCk7CiAgICAvKioNCiAgICAgKiDmiYDmnInlhbPogZTop4blm74NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5hbGxWaWV3TWFwID0gbmV3IE1hcCgpOwogICAgLyoqDQogICAgICog54q25oCB5YC8DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgIFBpbUFybXljYWRyZXNVSVNlcnZpY2VCYXNlDQogICAgICovCgogICAgX3RoaXMuc3RhdGVWYWx1ZSA9IDA7CiAgICAvKioNCiAgICAgKiDnirbmgIHlsZ7mgKcNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5zdGF0ZUZpZWxkID0gIiI7CiAgICAvKioNCiAgICAgKiDkuLvnirbmgIHlsZ7mgKfpm4blkIgNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgICBfdGhpcy5tYWluU3RhdGVGaWVsZHMgPSBbXTsKICAgIC8qKg0KICAgICAqIOS4u+eKtuaAgembhuWQiE1hcA0KICAgICAqDQogICAgICogQG1lbWJlcm9mICBQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICAgIF90aGlzLmFsbERlTWFpblN0YXRlTWFwID0gbmV3IE1hcCgpOwoKICAgIF90aGlzLmluaXRWaWV3TWFwKCk7CgogICAgX3RoaXMuaW5pdERlTWFpblN0YXRlTWFwKCk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KICAvKioNCiAgICog5Yid5aeL5YyW6KeG5Zu+TWFwDQogICAqDQogICAqIEBtZW1iZXJvZiAgUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UNCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UsIFt7CiAgICBrZXk6ICJpbml0Vmlld01hcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFZpZXdNYXAoKSB7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdncmFybXlncmlkdmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1hcm15Y2FkcmVzJwogICAgICB9KTsKICAgICAgdGhpcy5hbGxWaWV3TWFwLnNldCgnTURBVEFWSUVXOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2dyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFybXljYWRyZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAncGlja3VwZ3JpZHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJteWNhZHJlcycKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJ0VESVRWSUVXOicsIHsKICAgICAgICB2aWV3bmFtZTogJ2VkaXR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFybXljYWRyZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCdQSUNLVVBWSUVXOicsIHsKICAgICAgICB2aWV3bmFtZTogJ3BpY2t1cHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJteWNhZHJlcycKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJ1JFRElSRUNUVklFVzonLCB7CiAgICAgICAgdmlld25hbWU6ICdyZWRpcmVjdHZpZXcnLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJteWNhZHJlcycKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJzonLCB7CiAgICAgICAgdmlld25hbWU6ICdlZGl0dmlldzInLAogICAgICAgIHNyZmFwcGRlOiAncGltYXJteWNhZHJlcycKICAgICAgfSk7CiAgICAgIHRoaXMuYWxsVmlld01hcC5zZXQoJ01QSUNLVVBWSUVXOicsIHsKICAgICAgICB2aWV3bmFtZTogJ21waWNrdXB2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFybXljYWRyZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnYXJteWdyaWR2aWV3JywKICAgICAgICBzcmZhcHBkZTogJ3BpbWFybXljYWRyZXMnCiAgICAgIH0pOwogICAgICB0aGlzLmFsbFZpZXdNYXAuc2V0KCc6JywgewogICAgICAgIHZpZXduYW1lOiAnZ3JlZGl0dmlldycsCiAgICAgICAgc3JmYXBwZGU6ICdwaW1hcm15Y2FkcmVzJwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWIneWni+WMluS4u+eKtuaAgembhuWQiA0KICAgICAqDQogICAgICogQG1lbWJlcm9mICBQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpbml0RGVNYWluU3RhdGVNYXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXREZU1haW5TdGF0ZU1hcCgpIHt9CiAgICAvKioNCiAgICAgKiDojrflj5bmjIflrprmlbDmja7nmoTph43lrprlkJHpobXpnaINCiAgICAgKg0KICAgICAqIEBwYXJhbSBzcmZrZXkg5pWw5o2u5Li76ZSuDQogICAgICogQHBhcmFtIGlzRW5hYmxlV29ya2Zsb3cgIOmHjeWumuWQkeinhuWbvuaYr+WQpumcgOimgeWkhOeQhua1geeoi+S4reeahOaVsOaNrg0KICAgICAqIEBtZW1iZXJvZiAgUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0UkRBcHBWaWV3IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0UkRBcHBWaWV3ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShzcmZrZXksIGlzRW5hYmxlV29ya2Zsb3cpIHsKICAgICAgICB2YXIgcmVzdWx0LCBjdXJEYXRhLCBpUmVhbERFTW9kZWwsIGJEYXRhSW5XRiwgYldGTW9kZSwgc3RyUERUVmlld1BhcmFtOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVXb3JrZmxvdyA9IGlzRW5hYmxlV29ya2Zsb3c7IC8vIOi/m+ihjOaVsOaNruafpeivogoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UuR2V0KHsKICAgICAgICAgICAgICAgICAgcGltYXJteWNhZHJlczogc3Jma2V5CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGN1ckRhdGEgPSByZXN1bHQuZGF0YTsgLy/liKTmlq3lvZPliY3mlbDmja7mqKHlvI8s6buY6K6k5Li6dHJ1Ze+8jHRvZG8KCiAgICAgICAgICAgICAgICBpUmVhbERFTW9kZWwgPSB0cnVlOwogICAgICAgICAgICAgICAgYkRhdGFJbldGID0gZmFsc2U7CiAgICAgICAgICAgICAgICBiV0ZNb2RlID0gZmFsc2U7IC8vIOiuoeeul+aVsOaNruaooeW8jwoKICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0VuYWJsZVdvcmtmbG93KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UudGVzdERhdGFJbldGKHsKICAgICAgICAgICAgICAgICAgc3RhdGVWYWx1ZTogdGhpcy5zdGF0ZVZhbHVlLAogICAgICAgICAgICAgICAgICBzdGF0ZUZpZWxkOiB0aGlzLnN0YXRlRmllbGQKICAgICAgICAgICAgICAgIH0sIGN1ckRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgYkRhdGFJbldGID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIWJEYXRhSW5XRikgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGJEYXRhSW5XRiA9IHRydWU7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS50ZXN0VXNlckV4aXN0V29ya2xpc3QobnVsbCwgY3VyRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBiV0ZNb2RlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxOTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERFU0RERVZpZXdQRFRQYXJhbShjdXJEYXRhLCBiRGF0YUluV0YsIGJXRk1vZGUpOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgc3RyUERUVmlld1BhcmFtID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMuYWxsVmlld01hcC5nZXQoc3RyUERUVmlld1BhcmFtKSk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0UkRBcHBWaWV3KF94LCBfeDIpIHsKICAgICAgICByZXR1cm4gX2dldFJEQXBwVmlldy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0UkRBcHBWaWV3OwogICAgfSgpCiAgICAvKioNCiAgICAgKiDojrflj5blrp7pmYXnmoTmlbDmja7nsbvlnosNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiAgUGltQXJteWNhZHJlc1VJU2VydmljZUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0UmVhbERFVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVhbERFVHlwZShlbnRpdHkpIHt9CiAgICAvKioNCiAgICAgKiDojrflj5blrp7kvZPljZXmlbDmja7lrp7kvZPop4blm77pooTlrprkuYnlj4LmlbANCiAgICAgKg0KICAgICAqIEBwYXJhbSBjdXJEYXRhIOW9k+WJjeaVsOaNrg0KICAgICAqIEBwYXJhbSBiRGF0YUluV0Yg5piv5ZCm5pyJ5pWw5o2u5Zyo5bel5L2c5rWB5LitDQogICAgICogQHBhcmFtIGJXRk1vZGUgICDmmK/lkKblt6XkvZzmtYHmqKHlvI8NCiAgICAgKiBAbWVtYmVyb2YgIFBpbUFybXljYWRyZXNVSVNlcnZpY2VCYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldERFU0RERVZpZXdQRFRQYXJhbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldERFU0RERVZpZXdQRFRQYXJhbSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGN1ckRhdGEsIGJEYXRhSW5XRiwgYldGTW9kZSkgewogICAgICAgIHZhciBzdHJQRFRQYXJhbSwgaXNFbmFibGVNdWx0aUZvcm0sIG11bHRpRm9ybURFRmllbGQsIG9iakZvcm1WYWx1ZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RyUERUUGFyYW0gPSAnJzsKCiAgICAgICAgICAgICAgICBpZiAoYkRhdGFJbldGKSB7fSAvLyDliKTmlq3mlbDmja7mmK/lkKblnKjmtYHnqIvkuK0KICAgICAgICAgICAgICAgIC8v5aSa6KGo5Y2V77yMdG9kbwoKCiAgICAgICAgICAgICAgICBpc0VuYWJsZU11bHRpRm9ybSA9IGZhbHNlOwogICAgICAgICAgICAgICAgbXVsdGlGb3JtREVGaWVsZCA9IG51bGw7CgogICAgICAgICAgICAgICAgaWYgKCEoaXNFbmFibGVNdWx0aUZvcm0gJiYgbXVsdGlGb3JtREVGaWVsZCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBvYmpGb3JtVmFsdWUgPSBjdXJEYXRhW211bHRpRm9ybURFRmllbGRdOwoKICAgICAgICAgICAgICAgIGlmIChFbnZpcm9ubWVudC5pc0FwcE1vZGUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgJ01PQkVESVRWSUVXJyArIG9iakZvcm1WYWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCAnRURJVFZJRVcnICsgb2JqRm9ybVZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaWYgKEVudmlyb25tZW50LmlzQXBwTW9kZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0REVNYWluU3RhdGVUYWcoY3VyRGF0YSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gIk1PQkVESVRWSUVXOk1TVEFHOiI7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0REVNYWluU3RhdGVUYWcoY3VyRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDEgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDIudDAuY29uY2F0LmNhbGwoX2NvbnRleHQyLnQwLCBfY29udGV4dDIudDEpKTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCAnTU9CRURJVFZJRVc6Jyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0REVNYWluU3RhdGVUYWcoY3VyRGF0YSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQyID0gIkVESVRWSUVXOk1TVEFHOiI7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0REVNYWluU3RhdGVUYWcoY3VyRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDMgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDIudDIuY29uY2F0LmNhbGwoX2NvbnRleHQyLnQyLCBfY29udGV4dDIudDMpKTsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCAnRURJVFZJRVc6Jyk7CgogICAgICAgICAgICAgIGNhc2UgMjQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRERVNEREVWaWV3UERUUGFyYW0oX3gzLCBfeDQsIF94NSkgewogICAgICAgIHJldHVybiBfZ2V0REVTRERFVmlld1BEVFBhcmFtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRERVNEREVWaWV3UERUUGFyYW07CiAgICB9KCkKICAgIC8qKg0KICAgICAqIOiOt+WPluaVsOaNruWvueixoeeahOS4u+eKtuaAgeagh+ivhg0KICAgICAqDQogICAgICogQHBhcmFtIGN1ckRhdGEg5b2T5YmN5pWw5o2uDQogICAgICogQG1lbWJlcm9mICBQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRERU1haW5TdGF0ZVRhZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldERFTWFpblN0YXRlVGFnID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoY3VyRGF0YSkgewogICAgICAgIHZhciBzdHJUYWcsIGksIF9zdHJUYWcsIGosIHN0clRhZzIsIGssIHN0clRhZzM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm1haW5TdGF0ZUZpZWxkcy5sZW5ndGggPT09IDApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICB0aGlzLm1haW5TdGF0ZUZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChzaW5nbGVNYWluRmllbGQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCEoc2luZ2xlTWFpbkZpZWxkIGluIGN1ckRhdGEpKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiXHU1RjUzXHU1MjREXHU2NTcwXHU2MzZFXHU1QkY5XHU4QzYxXHU0RTBEXHU1MzA1XHU1NDJCXHU1QzVFXHU2MDI3c2luZ2xlTWFpbkZpZWxkXHVGRjBDXHU1M0VGXHU4MEZEXHU0RjFBXHU1M0QxXHU3NTFGXHU5NTE5XHU4QkVGIik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgc3RyVGFnID0gIiI7CiAgICAgICAgICAgICAgICBpID0gMDsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgaWYgKCEoaSA8PSAxKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDMxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfc3RyVGFnID0gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1swXV0gPyBpID09IDAgPyBjdXJEYXRhW3RoaXMubWFpblN0YXRlRmllbGRzWzBdXSA6ICIiIDogIiI7CgogICAgICAgICAgICAgICAgaWYgKCEodGhpcy5tYWluU3RhdGVGaWVsZHMubGVuZ3RoID49IDIpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGogPSAwOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBpZiAoIShqIDw9IDEpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN0clRhZzIgPSBjdXJEYXRhW3RoaXMubWFpblN0YXRlRmllbGRzWzFdXSA/ICIiLmNvbmNhdChfc3RyVGFnLCAiX18iKS5jb25jYXQoaiA9PSAwID8gY3VyRGF0YVt0aGlzLm1haW5TdGF0ZUZpZWxkc1sxXV0gOiAiIikgOiBfc3RyVGFnOwoKICAgICAgICAgICAgICAgIGlmICghKHRoaXMubWFpblN0YXRlRmllbGRzLmxlbmd0aCA+PSAzKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBrID0gMDsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIGlmICghKGsgPD0gMSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3RyVGFnMyA9IGN1ckRhdGFbdGhpcy5tYWluU3RhdGVGaWVsZHNbMl1dID8gIiIuY29uY2F0KHN0clRhZzIsICJfXyIpLmNvbmNhdChrID09IDAgPyBjdXJEYXRhW3RoaXMubWFpblN0YXRlRmllbGRzWzJdXSA6ICIiKSA6IHN0clRhZzI7IC8vIOWIpOaWreaYr+WQpuWtmOWcqAoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmFsbERlTWFpblN0YXRlTWFwLmdldChzdHJUYWczKSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBrKys7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgdGhpcy5hbGxEZU1haW5TdGF0ZU1hcC5nZXQoc3RyVGFnMikpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgaisrOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA5OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI4OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgdGhpcy5hbGxEZU1haW5TdGF0ZU1hcC5nZXQoX3N0clRhZykpOwoKICAgICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgICAgIGNhc2UgMzI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRERU1haW5TdGF0ZVRhZyhfeDYpIHsKICAgICAgICByZXR1cm4gX2dldERFTWFpblN0YXRlVGFnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRERU1haW5TdGF0ZVRhZzsKICAgIH0oKQogIH1dKTsKCiAgcmV0dXJuIFBpbUFybXljYWRyZXNVSVNlcnZpY2VCYXNlOwp9KFVJU2VydmljZSk7CgpleHBvcnQgeyBQaW1Bcm15Y2FkcmVzVUlTZXJ2aWNlQmFzZSBhcyBkZWZhdWx0IH07"},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js??ref--14-3!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-distirbution\\maturity-due-edit-form-form\\maturity-due-edit-form-form-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-distirbution\\maturity-due-edit-form-form\\maturity-due-edit-form-form-base.vue","mtime":1630509411504},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC52YWx1ZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiRjpcXGNyb2RcdTk4NzlcdTc2RUVcXFx1NEVCQVx1NEU4Qlx1N0JBMVx1NzQwNlx1N0NGQlx1N0VERjJcXGlCaXpFSFJcXGFwcF9FSFJQaW1cXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkY6XFxjcm9kXHU5ODc5XHU3NkVFXFxcdTRFQkFcdTRFOEJcdTdCQTFcdTc0MDZcdTdDRkJcdTdFREYyXFxpQml6RUhSXFxhcHBfRUhSUGltXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjsKaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJGOlxcY3JvZFx1OTg3OVx1NzZFRVxcXHU0RUJBXHU0RThCXHU3QkExXHU3NDA2XHU3Q0ZCXHU3RURGMlxcaUJpekVIUlxcYXBwX0VIUlBpbVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IFZ1ZSwgQ29tcG9uZW50LCBQcm9wLCBXYXRjaCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InOwppbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IFV0aWwgfSBmcm9tICdAL3V0aWxzJzsKaW1wb3J0IFBpbURpc3RpcmJ1dGlvblNlcnZpY2UgZnJvbSAnQC9zZXJ2aWNlL3BpbS1kaXN0aXJidXRpb24vcGltLWRpc3RpcmJ1dGlvbi1zZXJ2aWNlJzsKaW1wb3J0IE1hdHVyaXR5RHVlRWRpdEZvcm1TZXJ2aWNlIGZyb20gJy4vbWF0dXJpdHktZHVlLWVkaXQtZm9ybS1mb3JtLXNlcnZpY2UnOwppbXBvcnQgeyBGb3JtUGFnZU1vZGVsLCBGb3JtSXRlbU1vZGVsLCBGb3JtR3JvdXBQYW5lbE1vZGVsIH0gZnJvbSAnQC9tb2RlbC9mb3JtLWRldGFpbCc7CmltcG9ydCB7IGRlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7Cgp2YXIgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfVnVlKSB7CiAgX2luaGVyaXRzKE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLCBfVnVlKTsKCiAgZnVuY3Rpb24gTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UoKSB7CiAgICB2YXIgX3RoaXMyOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZSk7CgogICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsKICAgIC8qKg0KICAgICAqIOiuoeaVsOWZqOacjeWKoeWvueixoembhuWQiA0KICAgICAqDQogICAgICogQHR5cGUge0FycmF5PCo+fQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5jb3VudGVyU2VydmljZUFycmF5ID0gW107CiAgICAvKioNCiAgICAgKiDlu7rmnoTpg6jku7bmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtNYXR1cml0eUR1ZUVkaXRGb3JtU2VydmljZX0NCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuc2VydmljZSA9IG5ldyBNYXR1cml0eUR1ZUVkaXRGb3JtU2VydmljZSh7CiAgICAgICRzdG9yZTogX3RoaXMyLiRzdG9yZQogICAgfSk7CiAgICAvKioNCiAgICAgKiDlrp7kvZPmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtQaW1EaXN0aXJidXRpb25TZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5hcHBFbnRpdHlTZXJ2aWNlID0gbmV3IFBpbURpc3RpcmJ1dGlvblNlcnZpY2UoewogICAgICAkc3RvcmU6IF90aGlzMi4kc3RvcmUKICAgIH0pOwogICAgLyoqDQogICAgICog5bel5L2c5rWB5a6h5om55oSP6KeB5o6n5Lu257uR5a6a5YC8DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIuc3Jmd2ZtZW1vID0gIiI7CiAgICAvKioNCiAgICAgKiDooajljZXnirbmgIENCiAgICAgKg0KICAgICAqIEB0eXBlIHtTdWJqZWN0PGFueT59DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogICAgX3RoaXMyLmZvcm1TdGF0ZSA9IG5ldyBTdWJqZWN0KCk7CiAgICAvKioNCiAgICAgKiDlv73nlaXooajljZXpobnlgLzlj5jljJYNCiAgICAgKg0KICAgICAqIEB0eXBlIHtib29sZWFufQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5pZ25vcmVmaWVsZHZhbHVlY2hhbmdlID0gZmFsc2U7CiAgICAvKioNCiAgICAgKiDmlbDmja7lj5jljJYNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAdHlwZSB7U3ViamVjdDxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5kYXRhQ2hhbmcgPSBuZXcgU3ViamVjdCgpOwogICAgLyoqDQogICAgICog5Y6f5aeL5pWw5o2uDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogICAgX3RoaXMyLm9sZERhdGEgPSB7fTsKICAgIC8qKg0KICAgICAqIOihqOWNleaVsOaNruWvueixoQ0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogICAgX3RoaXMyLmRhdGEgPSB7CiAgICAgIHNyZnVwZGF0ZWRhdGU6IG51bGwsCiAgICAgIHNyZm9yaWtleTogbnVsbCwKICAgICAgc3Jma2V5OiBudWxsLAogICAgICBzcmZtYWpvcnRleHQ6IG51bGwsCiAgICAgIHNyZnRlbXBtb2RlOiBudWxsLAogICAgICBzcmZ1ZjogbnVsbCwKICAgICAgc3JmZGVpZDogbnVsbCwKICAgICAgc3Jmc291cmNla2V5OiBudWxsLAogICAgICBwaW1wZXJzb25pZDogbnVsbCwKICAgICAgeWdiaDogbnVsbCwKICAgICAgcGltcGVyc29ubmFtZTogbnVsbCwKICAgICAgZnBseDogbnVsbCwKICAgICAgZnB6dDogbnVsbCwKICAgICAgY2ZwbHg6IG51bGwsCiAgICAgIG9ybW9yZ25hbWU6IG51bGwsCiAgICAgIG9ybW9yZ3NlY3Rvcm5hbWU6IG51bGwsCiAgICAgIG9ybWR1dHluYW1lOiBudWxsLAogICAgICBvcm1wb3N0bmFtZTogbnVsbCwKICAgICAgZ3pkcTogbnVsbCwKICAgICAgZ3pkZDogbnVsbCwKICAgICAgcnprc3NqOiBudWxsLAogICAgICByempzc2o6IG51bGwsCiAgICAgIG9ybWR1dHlpZDogbnVsbCwKICAgICAgcGltZGlzdGlyYnV0aW9uaWQ6IG51bGwsCiAgICAgIG9ybXBvc3RpZDogbnVsbCwKICAgICAgb3Jtb3Jnc2VjdG9yaWQ6IG51bGwsCiAgICAgIG9ybW9yZ2lkOiBudWxsLAogICAgICBwaW1kaXN0aXJidXRpb246IG51bGwKICAgIH07CiAgICAvKioNCiAgICAgICog5b2T5YmN5omn6KGM55qE6KGM5Li66YC76L6RDQogICAgICAqDQogICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAgKi8KCiAgICBfdGhpczIuY3VycmVudEFjdGlvbiA9ICIiOwogICAgLyoqDQogICAgICAqIOWFs+ezu+eVjOmdouiuoeaVsOWZqA0KICAgICAgKg0KICAgICAgKiBAdHlwZSB7bnVtYmVyfQ0KICAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgICovCgogICAgX3RoaXMyLmRyY291bnRlciA9IDA7CiAgICAvKioNCiAgICAgICog6ZyA6KaB562J5b6F5YWz57O755WM6Z2i5L+d5a2Y5pe277yM56ys5LiA5qyh6LCD55Soc2F2ZeWPguaVsOeahOWkh+S7vQ0KICAgICAgKg0KICAgICAgKiBAdHlwZSB7bnVtYmVyfQ0KICAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgICovCgogICAgX3RoaXMyLmRyc2F2ZW9wdCA9IHt9OwogICAgLyoqDQogICAgICog5bGe5oCn5YC86KeE5YiZDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgICBfdGhpczIucnVsZXMgPSB7CiAgICAgIHNyZnVwZGF0ZWRhdGU6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+abtOaWsOaXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5pu05paw5pe26Ze0IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+abtOaWsOaXtumXtCDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+abtOaWsOaXtumXtCDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgc3Jmb3Jpa2V5OiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHNyZmtleTogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YiG6YWN5L+h5oGv5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfliIbphY3kv6Hmga/moIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YiG6YWN5L+h5oGv5qCH6K+GIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YiG6YWN5L+h5oGv5qCH6K+GIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dLAogICAgICBzcmZtYWpvcnRleHQ6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5ZGY5bel5aeT5ZCNIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgc3JmdGVtcG1vZGU6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgc3JmdWY6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgc3JmZGVpZDogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dLAogICAgICBzcmZzb3VyY2VrZXk6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgcGltcGVyc29uaWQ6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+S6uuWRmOS/oeaBr+agh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5Lq65ZGY5L+h5oGv5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+S6uuWRmOS/oeaBr+agh+ivhiDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+S6uuWRmOS/oeaBr+agh+ivhiDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgeWdiaDogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5ZGY5bel57yW5Y+3IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflkZjlt6XnvJblj7cg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5ZGY5bel57yW5Y+3IOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5ZGY5bel57yW5Y+3IOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dLAogICAgICBwaW1wZXJzb25uYW1lOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflkZjlt6Xlp5PlkI0g5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflkZjlt6Xlp5PlkI0g5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflkZjlt6Xlp5PlkI0g5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIGZwbHg6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WIhumFjSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YiG6YWNIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WIhumFjSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WIhumFjSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgZnB6dDogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YiG6YWN54q25oCBIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfliIbphY3nirbmgIEg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfliIbphY3nirbmgIEg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WIhumFjeeKtuaAgSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgY2ZwbHg6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+exu+WeiyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn57G75Z6LIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+exu+WeiyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+exu+WeiyDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgb3Jtb3JnbmFtZTogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5bel5L2c5Y2V5L2NIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflt6XkvZzljZXkvY0g5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflt6XkvZzljZXkvY0g5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+W3peS9nOWNleS9jSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgb3Jtb3Jnc2VjdG9ybmFtZTogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn6YOo6ZeoIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfpg6jpl6gg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfpg6jpl6gg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+mDqOmXqCDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgb3JtZHV0eW5hbWU6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+iBjOWKoSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn6IGM5YqhIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn6IGM5YqhIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfogYzliqEg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIG9ybXBvc3RuYW1lOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflspfkvY0g5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+Wyl+S9jSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+Wyl+S9jSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5bKX5L2NIOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dLAogICAgICBnemRxOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflt6XkvZzlnLDljLog5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+W3peS9nOWcsOWMuiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflt6XkvZzlnLDljLog5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflt6XkvZzlnLDljLog5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIGd6ZGQ6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+W3peS9nOWcsOeCuSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5bel5L2c5Zyw54K5IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+W3peS9nOWcsOeCuSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+W3peS9nOWcsOeCuSDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgcnprc3NqOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflgJ/osIPlvIDlp4vml7bpl7Qg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WAn+iwg+W8gOWni+aXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflgJ/osIPlvIDlp4vml7bpl7Qg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflgJ/osIPlvIDlp4vml7bpl7Qg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHJ6anNzajogW3sKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YCf6LCD57uT5p2f5pe26Ze0IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflgJ/osIPnu5PmnZ/ml7bpl7Qg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YCf6LCD57uT5p2f5pe26Ze0IOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgfSwgewogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YCf6LCD57uT5p2f5pe26Ze0IOWAvOS4jeiDveS4uuepuicsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH1dLAogICAgICBvcm1kdXR5aWQ6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+iBjOWKoeeuoeeQhuagh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn6IGM5Yqh566h55CG5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+iBjOWKoeeuoeeQhuagh+ivhiDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+iBjOWKoeeuoeeQhuagh+ivhiDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgcGltZGlzdGlyYnV0aW9uaWQ6IFt7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WIhumFjeS/oeaBr+agh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgICBtZXNzYWdlOiAn5YiG6YWN5L+h5oGv5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsCiAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WIhumFjeS/oeaBr+agh+ivhiDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgIH0sIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+WIhumFjeS/oeaBr+agh+ivhiDlgLzkuI3og73kuLrnqbonLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9XSwKICAgICAgb3JtcG9zdGlkOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflspfkvY3nrqHnkIbmoIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+Wyl+S9jeeuoeeQhuagh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflspfkvY3nrqHnkIbmoIfor4Yg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICflspfkvY3nrqHnkIbmoIfor4Yg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIG9ybW9yZ3NlY3RvcmlkOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfpg6jpl6jmoIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+mDqOmXqOagh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfpg6jpl6jmoIfor4Yg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfpg6jpl6jmoIfor4Yg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIG9ybW9yZ2lkOiBbewogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfnu4Tnu4fmoIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgbWVzc2FnZTogJ+e7hOe7h+agh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLAogICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfnu4Tnu4fmoIfor4Yg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICAgIG1lc3NhZ2U6ICfnu4Tnu4fmoIfor4Yg5YC85LiN6IO95Li656m6JywKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0KICAgIH07CiAgICAvKioNCiAgICAgKiDor6bmg4XmqKHlnovpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICAgIF90aGlzMi5kZXRhaWxzTW9kZWwgPSB7CiAgICAgIGdyb3VwcGFuZWwxOiBuZXcgRm9ybUdyb3VwUGFuZWxNb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJycsCiAgICAgICAgZGV0YWlsVHlwZTogJ0dST1VQUEFORUwnLAogICAgICAgIG5hbWU6ICdncm91cHBhbmVsMScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiBmYWxzZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgdWlBY3Rpb25Hcm91cDogewogICAgICAgICAgY2FwdGlvbjogJycsCiAgICAgICAgICBsYW5nYmFzZTogJ2VudGl0aWVzLnBpbWRpc3RpcmJ1dGlvbi5tYXR1cml0eWR1ZWVkaXRmb3JtX2Zvcm0nLAogICAgICAgICAgZXh0cmFjdE1vZGU6ICdJVEVNJywKICAgICAgICAgIGRldGFpbHM6IFtdCiAgICAgICAgfQogICAgICB9KSwKICAgICAgZ3JvdXAxOiBuZXcgRm9ybUdyb3VwUGFuZWxNb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+WAn+iwg+WIsOacnycsCiAgICAgICAgZGV0YWlsVHlwZTogJ0dST1VQUEFORUwnLAogICAgICAgIG5hbWU6ICdncm91cDEnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgdWlBY3Rpb25Hcm91cDogewogICAgICAgICAgY2FwdGlvbjogJycsCiAgICAgICAgICBsYW5nYmFzZTogJ2VudGl0aWVzLnBpbWRpc3RpcmJ1dGlvbi5tYXR1cml0eWR1ZWVkaXRmb3JtX2Zvcm0nLAogICAgICAgICAgZXh0cmFjdE1vZGU6ICdJVEVNJywKICAgICAgICAgIGRldGFpbHM6IFtdCiAgICAgICAgfQogICAgICB9KSwKICAgICAgZm9ybXBhZ2UxOiBuZXcgRm9ybVBhZ2VNb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+WfuuacrOS/oeaBrycsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1QQUdFJywKICAgICAgICBuYW1lOiAnZm9ybXBhZ2UxJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpCiAgICAgIH0pLAogICAgICBzcmZ1cGRhdGVkYXRlOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+abtOaWsOaXtumXtCcsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnc3JmdXBkYXRlZGF0ZScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgc3Jmb3Jpa2V5OiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJycsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnc3Jmb3Jpa2V5JywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBzcmZrZXk6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5YiG6YWN5L+h5oGv5qCH6K+GJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdzcmZrZXknLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIHNyZm1ham9ydGV4dDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICflkZjlt6Xlp5PlkI0nLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3NyZm1ham9ydGV4dCcsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgc3JmdGVtcG1vZGU6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAnJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdzcmZ0ZW1wbW9kZScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgc3JmdWY6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAnJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdzcmZ1ZicsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgc3JmZGVpZDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICcnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3NyZmRlaWQnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIHNyZnNvdXJjZWtleTogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICcnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3NyZnNvdXJjZWtleScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgcGltcGVyc29uaWQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5Lq65ZGY5L+h5oGv5qCH6K+GJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdwaW1wZXJzb25pZCcsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgeWdiaDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICflkZjlt6XnvJblj7cnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3lnYmgnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDAKICAgICAgfSksCiAgICAgIHBpbXBlcnNvbm5hbWU6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5ZGY5bel5aeT5ZCNJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdwaW1wZXJzb25uYW1lJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAwCiAgICAgIH0pLAogICAgICBmcGx4OiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+WIhumFjScsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnZnBseCcsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMAogICAgICB9KSwKICAgICAgZnB6dDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICfliIbphY3nirbmgIEnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ2ZwenQnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIGNmcGx4OiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+exu+WeiycsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnY2ZwbHgnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDAKICAgICAgfSksCiAgICAgIG9ybW9yZ25hbWU6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5bel5L2c5Y2V5L2NJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdvcm1vcmduYW1lJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBvcm1vcmdzZWN0b3JuYW1lOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+mDqOmXqCcsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnb3Jtb3Jnc2VjdG9ybmFtZScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgb3JtZHV0eW5hbWU6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn6IGM5YqhJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdvcm1kdXR5bmFtZScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgb3JtcG9zdG5hbWU6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5bKX5L2NJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdvcm1wb3N0bmFtZScsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgZ3pkcTogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICflt6XkvZzlnLDljLonLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ2d6ZHEnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIGd6ZGQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5bel5L2c5Zyw54K5JywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdnemRkJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICByemtzc2o6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5YCf6LCD5byA5aeL5pe26Ze0JywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdyemtzc2onLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIHJ6anNzajogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICflgJ/osIPnu5PmnZ/ml7bpl7QnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3J6anNzaicsCiAgICAgICAgdmlzaWJsZTogdHJ1ZSwKICAgICAgICBpc1Nob3dDYXB0aW9uOiB0cnVlLAogICAgICAgIGZvcm06IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgZW5hYmxlQ29uZDogMwogICAgICB9KSwKICAgICAgb3JtZHV0eWlkOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+iBjOWKoeeuoeeQhuagh+ivhicsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnb3JtZHV0eWlkJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBwaW1kaXN0aXJidXRpb25pZDogbmV3IEZvcm1JdGVtTW9kZWwoewogICAgICAgIGNhcHRpb246ICfliIbphY3kv6Hmga/moIfor4YnLAogICAgICAgIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsCiAgICAgICAgbmFtZTogJ3BpbWRpc3RpcmJ1dGlvbmlkJywKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGlzU2hvd0NhcHRpb246IHRydWUsCiAgICAgICAgZm9ybTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLAogICAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgICBlbmFibGVDb25kOiAzCiAgICAgIH0pLAogICAgICBvcm1wb3N0aWQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsKICAgICAgICBjYXB0aW9uOiAn5bKX5L2N566h55CG5qCH6K+GJywKICAgICAgICBkZXRhaWxUeXBlOiAnRk9STUlURU0nLAogICAgICAgIG5hbWU6ICdvcm1wb3N0aWQnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIG9ybW9yZ3NlY3RvcmlkOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+mDqOmXqOagh+ivhicsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnb3Jtb3Jnc2VjdG9yaWQnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSksCiAgICAgIG9ybW9yZ2lkOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7CiAgICAgICAgY2FwdGlvbjogJ+e7hOe7h+agh+ivhicsCiAgICAgICAgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywKICAgICAgICBuYW1lOiAnb3Jtb3JnaWQnLAogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgaXNTaG93Q2FwdGlvbjogdHJ1ZSwKICAgICAgICBmb3JtOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGVuYWJsZUNvbmQ6IDMKICAgICAgfSkKICAgIH07CiAgICByZXR1cm4gX3RoaXMyOwogIH0KICAvKioNCiAgICog6I635Y+W6YOo5Lu257G75Z6LDQogICAqDQogICAqIEByZXR1cm5zIHtzdHJpbmd9DQogICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZSwgW3sKICAgIGtleTogImdldENvbnRyb2xUeXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb250cm9sVHlwZSgpIHsKICAgICAgcmV0dXJuICdGT1JNJzsKICAgIH0KICAgIC8qKg0KICAgICAqIOWFs+mXreinhuWbvg0KICAgICAqDQogICAgICogQHBhcmFtIHthbnl9IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY2xvc2VWaWV3IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZVZpZXcoYXJncykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuJGVtaXQoJ2Nsb3NldmlldycsIFthcmdzXSk7CiAgICB9CiAgICAvKioNCiAgICAgKiAg6K6h5pWw5Zmo5Yi35pawDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY291bnRlclJlZnJlc2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvdW50ZXJSZWZyZXNoKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkgJiYgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5sZW5ndGggPiAwKSB7CiAgICAgICAgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICBpZiAoaXRlbS5yZWZyZXNoRGF0YSAmJiBpdGVtLnJlZnJlc2hEYXRhIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgICAgICAgICAgaXRlbS5yZWZyZXNoRGF0YSgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICAvKioNCiAgICAgKiDojrflj5blpJrpobnmlbDmja4NCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHthbnlbXX0NCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0RGF0YXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGFzKCkgewogICAgICByZXR1cm4gW3RoaXMuZGF0YV07CiAgICB9CiAgICAvKioNCiAgICAgKiDojrflj5bljZXpobnmoJENCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXREYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhKCkgewogICAgICByZXR1cm4gdGhpcy5kYXRhOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZnVwZGF0ZWRhdGUg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3JmdXBkYXRlZGF0ZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TcmZ1cGRhdGVkYXRlQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdzcmZ1cGRhdGVkYXRlJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZvcmlrZXkg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3Jmb3Jpa2V5Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNyZm9yaWtleUNoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnc3Jmb3Jpa2V5JywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZrZXkg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3Jma2V5Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNyZmtleUNoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnc3Jma2V5JywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZtYWpvcnRleHQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uU3JmbWFqb3J0ZXh0Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNyZm1ham9ydGV4dENoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnc3JmbWFqb3J0ZXh0JywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZ0ZW1wbW9kZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25TcmZ0ZW1wbW9kZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TcmZ0ZW1wbW9kZUNoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnc3JmdGVtcG1vZGUnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZnVmIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvblNyZnVmQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNyZnVmQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdzcmZ1ZicsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3JmZGVpZCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25TcmZkZWlkQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNyZmRlaWRDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3NyZmRlaWQnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZnNvdXJjZWtleSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25TcmZzb3VyY2VrZXlDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3Jmc291cmNla2V5Q2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdzcmZzb3VyY2VrZXknLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHBpbXBlcnNvbmlkIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvblBpbXBlcnNvbmlkQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblBpbXBlcnNvbmlkQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdwaW1wZXJzb25pZCcsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgeWdiaCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25ZZ2JoQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbllnYmhDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ3lnYmgnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHBpbXBlcnNvbm5hbWUg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uUGltcGVyc29ubmFtZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25QaW1wZXJzb25uYW1lQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdwaW1wZXJzb25uYW1lJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBmcGx4IOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkZwbHhDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRnBseENoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnZnBseCcsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgZnB6dCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25GcHp0Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkZwenRDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ2ZwenQnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIGNmcGx4IOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkNmcGx4Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNmcGx4Q2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdjZnBseCcsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgb3Jtb3JnbmFtZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25Pcm1vcmduYW1lQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9ybW9yZ25hbWVDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ29ybW9yZ25hbWUnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIG9ybW9yZ3NlY3Rvcm5hbWUg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uT3Jtb3Jnc2VjdG9ybmFtZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Pcm1vcmdzZWN0b3JuYW1lQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdvcm1vcmdzZWN0b3JuYW1lJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBvcm1kdXR5bmFtZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25Pcm1kdXR5bmFtZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Pcm1kdXR5bmFtZUNoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnb3JtZHV0eW5hbWUnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIG9ybXBvc3RuYW1lIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbk9ybXBvc3RuYW1lQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9ybXBvc3RuYW1lQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdvcm1wb3N0bmFtZScsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgZ3pkcSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25HemRxQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkd6ZHFDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ2d6ZHEnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIGd6ZGQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uR3pkZENoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25HemRkQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdnemRkJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyByemtzc2og5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uUnprc3NqQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblJ6a3NzakNoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAncnprc3NqJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyByempzc2og5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uUnpqc3NqQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblJ6anNzakNoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAncnpqc3NqJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBvcm1kdXR5aWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uT3JtZHV0eWlkQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9ybWR1dHlpZENoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAnb3JtZHV0eWlkJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBwaW1kaXN0aXJidXRpb25pZCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25QaW1kaXN0aXJidXRpb25pZENoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25QaW1kaXN0aXJidXRpb25pZENoYW5nZShuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsKICAgICAgICBuYW1lOiAncGltZGlzdGlyYnV0aW9uaWQnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIG9ybXBvc3RpZCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25Pcm1wb3N0aWRDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3JtcG9zdGlkQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdvcm1wb3N0aWQnLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIG9ybW9yZ3NlY3RvcmlkIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbk9ybW9yZ3NlY3RvcmlkQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9ybW9yZ3NlY3RvcmlkQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoewogICAgICAgIG5hbWU6ICdvcm1vcmdzZWN0b3JpZCcsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgb3Jtb3JnaWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uT3Jtb3JnaWRDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3Jtb3JnaWRDaGFuZ2UobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7CiAgICAgICAgbmFtZTogJ29ybW9yZ2lkJywKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOmHjee9ruihqOWNlemhueWAvA0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9fSB7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH0NCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVzZXRGb3JtRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRGb3JtRGF0YShfcmVmKSB7CiAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLAogICAgICAgICAgbmV3VmFsID0gX3JlZi5uZXdWYWwsCiAgICAgICAgICBvbGRWYWwgPSBfcmVmLm9sZFZhbDsKCiAgICAgIGlmIChPYmplY3QuaXMobmFtZSwgJ29ybW9yZ2lkJykpIHsKICAgICAgICB0aGlzLm9uRm9ybUl0ZW1WYWx1ZUNoYW5nZSh7CiAgICAgICAgICBuYW1lOiAnb3Jtb3Jnc2VjdG9ybmFtZScsCiAgICAgICAgICB2YWx1ZTogbnVsbAogICAgICAgIH0pOwogICAgICAgIHRoaXMub25Gb3JtSXRlbVZhbHVlQ2hhbmdlKHsKICAgICAgICAgIG5hbWU6ICdvcm1vcmdzZWN0b3JpZCcsCiAgICAgICAgICB2YWx1ZTogbnVsbAogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmlzKG5hbWUsICdvcm1vcmdpZCcpKSB7CiAgICAgICAgdGhpcy5vbkZvcm1JdGVtVmFsdWVDaGFuZ2UoewogICAgICAgICAgbmFtZTogJ29ybXBvc3RuYW1lJywKICAgICAgICAgIHZhbHVlOiBudWxsCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5vbkZvcm1JdGVtVmFsdWVDaGFuZ2UoewogICAgICAgICAgbmFtZTogJ29ybXBvc3RpZCcsCiAgICAgICAgICB2YWx1ZTogbnVsbAogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmlzKG5hbWUsICdvcm1vcmdpZCcpKSB7CiAgICAgICAgdGhpcy5vbkZvcm1JdGVtVmFsdWVDaGFuZ2UoewogICAgICAgICAgbmFtZTogJ29ybXBvc3RpZCcsCiAgICAgICAgICB2YWx1ZTogbnVsbAogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAoT2JqZWN0LmlzKG5hbWUsICdvcm1vcmdpZCcpKSB7CiAgICAgICAgdGhpcy5vbkZvcm1JdGVtVmFsdWVDaGFuZ2UoewogICAgICAgICAgbmFtZTogJ29ybW9yZ3NlY3RvcmlkJywKICAgICAgICAgIHZhbHVlOiBudWxsCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAgKiDnva7nqbrlr7nosaENCiAgICAgICoNCiAgICAgICogQHBhcmFtIHthbnlbXX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAgKi8KCiAgfSwgewogICAga2V5OiAiUmVzZXREYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBSZXNldERhdGEoX2RhdGFzKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgaWYgKE9iamVjdC5rZXlzKF9kYXRhcykubGVuZ3RoID4gMCkgewogICAgICAgIE9iamVjdC5rZXlzKF9kYXRhcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgaWYgKF90aGlzMy5kYXRhLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgIF90aGlzMy5kYXRhW25hbWVdID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogICAgLyoqDQogICAgICog6KGo5Y2V6YC76L6RDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHt7IG5hbWU6IHN0cmluZywgbmV3VmFsOiBhbnksIG9sZFZhbDogYW55IH19IHsgbmFtZSwgbmV3VmFsLCBvbGRWYWwgfQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmb3JtTG9naWMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1Mb2dpYyhfcmVmMikgewogICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWUsCiAgICAgICAgICBuZXdWYWwgPSBfcmVmMi5uZXdWYWwsCiAgICAgICAgICBvbGRWYWwgPSBfcmVmMi5vbGRWYWw7CiAgICB9CiAgICAvKioNCiAgICAgKiDooajljZXlgLzlj5jljJYNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0ge3sgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfX0geyBuYW1lLCBuZXdWYWwsIG9sZFZhbCB9DQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImZvcm1EYXRhQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtRGF0YUNoYW5nZShfcmVmMykgewogICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsCiAgICAgICAgICBuZXdWYWwgPSBfcmVmMy5uZXdWYWwsCiAgICAgICAgICBvbGRWYWwgPSBfcmVmMy5vbGRWYWw7CgogICAgICBpZiAodGhpcy5pZ25vcmVmaWVsZHZhbHVlY2hhbmdlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLnJlc2V0Rm9ybURhdGEoewogICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgbmV3VmFsOiBuZXdWYWwsCiAgICAgICAgb2xkVmFsOiBvbGRWYWwKICAgICAgfSk7CiAgICAgIHRoaXMuZm9ybUxvZ2ljKHsKICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgIG5ld1ZhbDogbmV3VmFsLAogICAgICAgIG9sZFZhbDogb2xkVmFsCiAgICAgIH0pOwogICAgICB0aGlzLmRhdGFDaGFuZy5uZXh0KEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpOwogICAgfQogICAgLyoqDQogICAgICog6KGo5Y2V5Yqg6L295a6M5oiQDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0NCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2FjdGlvbl0NCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25Gb3JtTG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Gb3JtTG9hZCgpIHsKICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICAgIGlmIChPYmplY3QuaXMoYWN0aW9uLCAic2F2ZSIpIHx8IE9iamVjdC5pcyhhY3Rpb24sICJhdXRvU2F2ZSIpIHx8IE9iamVjdC5pcyhhY3Rpb24sICJzdWJtaXQiKSkgLy8g5pu05pawY29udGV4dOeahOWunuS9k+S4u+mUrgogICAgICAgIGlmIChkYXRhLnBpbWRpc3RpcmJ1dGlvbikgewogICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbnRleHQsIHsKICAgICAgICAgICAgcGltZGlzdGlyYnV0aW9uOiBkYXRhLnBpbWRpc3RpcmJ1dGlvbgogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB0aGlzLnNldEZvcm1FbmFibGVDb25kKGRhdGEpOwogICAgICB0aGlzLmZpbGxGb3JtKGRhdGEsIGFjdGlvbik7CiAgICAgIHRoaXMub2xkRGF0YSA9IHt9OwogICAgICBPYmplY3QuYXNzaWduKHRoaXMub2xkRGF0YSwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKSk7CiAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgndmlld2FjdGlvbi9zZXRWaWV3RGF0YUNoYW5nZScsIHsKICAgICAgICB2aWV3dGFnOiB0aGlzLnZpZXd0YWcsCiAgICAgICAgdmlld2RhdGFjaGFuZ2U6IGZhbHNlCiAgICAgIH0pOwogICAgICB0aGlzLmZvcm1Mb2dpYyh7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgbmV3VmFsOiBudWxsLAogICAgICAgIG9sZFZhbDogbnVsbAogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWAvOWhq+WFhQ0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbX2RhdGFzPXt9XQ0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYWN0aW9uXQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmaWxsRm9ybSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbEZvcm0oKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIF9kYXRhcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICAgIHRoaXMuaWdub3JlZmllbGR2YWx1ZWNoYW5nZSA9IHRydWU7CiAgICAgIE9iamVjdC5rZXlzKF9kYXRhcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgIGlmIChfdGhpczQuZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgX3RoaXM0LmRhdGFbbmFtZV0gPSBfZGF0YXNbbmFtZV07CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGlmIChPYmplY3QuaXMoYWN0aW9uLCAnbG9hZERyYWZ0JykpIHsKICAgICAgICB0aGlzLmNyZWF0ZURlZmF1bHQoKTsKICAgICAgfQoKICAgICAgaWYgKE9iamVjdC5pcyhhY3Rpb24sICdsb2FkJykpIHsKICAgICAgICB0aGlzLnVwZGF0ZURlZmF1bHQoKTsKICAgICAgfQoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuaWdub3JlZmllbGR2YWx1ZWNoYW5nZSA9IGZhbHNlOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOiuvue9ruihqOWNlemhueaYr+WQpuWQr+eUqA0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBwYXJhbSB7Kn0gZGF0YQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzZXRGb3JtRW5hYmxlQ29uZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Rm9ybUVuYWJsZUNvbmQoZGF0YSkgewogICAgICBPYmplY3QudmFsdWVzKHRoaXMuZGV0YWlsc01vZGVsKS5mb3JFYWNoKGZ1bmN0aW9uIChkZXRhaWwpIHsKICAgICAgICBpZiAoIU9iamVjdC5pcyhkZXRhaWwuZGV0YWlsVHlwZSwgJ0ZPUk1JVEVNJykpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBmb3JtSXRlbSA9IGRldGFpbDsKICAgICAgICBmb3JtSXRlbS5zZXRFbmFibGVDb25kKGRhdGEuc3JmdWYpOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOmHjee9ruiNieeov+ihqOWNleeKtuaAgQ0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZXNldERyYWZ0Rm9ybVN0YXRlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXREcmFmdEZvcm1TdGF0ZXMoKSB7CiAgICAgIHZhciBmb3JtID0gdGhpcy4kcmVmcy5mb3JtOwoKICAgICAgaWYgKGZvcm0pIHsKICAgICAgICBmb3JtLnJlc2V0RmllbGRzKCk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOmHjee9ruagoemqjOe7k+aenA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInJlc2V0VmFsaWRhdGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldFZhbGlkYXRlcygpIHsKICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmRldGFpbHNNb2RlbCkuZm9yRWFjaChmdW5jdGlvbiAoZGV0YWlsKSB7CiAgICAgICAgaWYgKCFPYmplY3QuaXMoZGV0YWlsLmRldGFpbFR5cGUsICdGT1JNSVRFTScpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgZm9ybUl0ZW0gPSBkZXRhaWw7CiAgICAgICAgZm9ybUl0ZW0uc2V0RXJyb3IoJycpOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWhq+WFheagoemqjOe7k+aenCDvvIjlkI7lj7DvvIkNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGZpZWxkRXJyb3JzDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImZpbGxWYWxpZGF0ZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGxWYWxpZGF0ZXMoZmllbGRFcnJvcnMpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICBmaWVsZEVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIHZhciBmb3JtSXRlbSA9IF90aGlzNS5kZXRhaWxzTW9kZWxbZXJyb3IuZmllbGRdOwoKICAgICAgICBpZiAoIWZvcm1JdGVtKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBfdGhpczUuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGZvcm1JdGVtLnNldEVycm9yKGVycm9yLm1lc3NhZ2UpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOihqOWNleagoemqjOeKtuaAgQ0KICAgICAqDQogICAgICogQHJldHVybnMge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImZvcm1WYWxpZGF0ZVN0YXR1cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybVZhbGlkYXRlU3RhdHVzKCkgewogICAgICB2YXIgZm9ybSA9IHRoaXMuJHJlZnMuZm9ybTsKICAgICAgdmFyIHZhbGlkYXRlc3RhdGUgPSB0cnVlOwogICAgICBmb3JtLnZhbGlkYXRlKGZ1bmN0aW9uICh2YWxpZCkgewogICAgICAgIHZhbGlkYXRlc3RhdGUgPSB2YWxpZCA/IHRydWUgOiBmYWxzZTsKICAgICAgfSk7CiAgICAgIHJldHVybiB2YWxpZGF0ZXN0YXRlOwogICAgfQogICAgLyoqDQogICAgICog6I635Y+W5YWo6YOo5YC8DQogICAgICoNCiAgICAgKiBAcmV0dXJucyB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0VmFsdWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLmRhdGE7CiAgICB9CiAgICAvKioNCiAgICAgKiDooajljZXpobnlgLzlj5jmm7QNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkgfX0gJGV2ZW50DQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uRm9ybUl0ZW1WYWx1ZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Gb3JtSXRlbVZhbHVlQ2hhbmdlKCRldmVudCkgewogICAgICBpZiAoISRldmVudCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKCEkZXZlbnQubmFtZSB8fCBPYmplY3QuaXMoJGV2ZW50Lm5hbWUsICcnKSB8fCAhdGhpcy5kYXRhLmhhc093blByb3BlcnR5KCRldmVudC5uYW1lKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5kYXRhWyRldmVudC5uYW1lXSA9ICRldmVudC52YWx1ZTsKICAgIH0KICAgIC8qKg0KICAgICAqIOiuvue9ruaVsOaNrumhueWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUNCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlDQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInNldERhdGFJdGVtVmFsdWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldERhdGFJdGVtVmFsdWUobmFtZSwgdmFsdWUpIHsKICAgICAgaWYgKCFuYW1lIHx8IE9iamVjdC5pcyhuYW1lLCAnJykgfHwgIXRoaXMuZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKE9iamVjdC5pcyh0aGlzLmRhdGFbbmFtZV0sIHZhbHVlKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5kYXRhW25hbWVdID0gdmFsdWU7CiAgICB9CiAgICAvKioNCiAgICAgKiDliIbnu4TnlYzpnaLooYzkuLrkuovku7YNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdyb3VwVUlBY3Rpb25DbGljayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBVSUFjdGlvbkNsaWNrKCRldmVudCkgewogICAgICBpZiAoISRldmVudCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGl0ZW0gPSAkZXZlbnQuaXRlbTsKICAgIH0KICAgIC8qKg0KICAgICAqIFZ1ZeWjsOaYjuWRqOacnyjlpITnkIbnu4Tku7bnmoTovpPlhaXlsZ7mgKcpDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY3JlYXRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgICAgdGhpcy5hZnRlckNyZWF0ZWQoKTsKICAgIH0KICAgIC8qKg0KICAgICAqIOaJp+ihjGNyZWF0ZWTlkI7nmoTpgLvovpENCiAgICAgKg0KICAgICAqICBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiYWZ0ZXJDcmVhdGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZnRlckNyZWF0ZWQoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMudmlld1N0YXRlKSB7CiAgICAgICAgdGhpcy52aWV3U3RhdGVFdmVudCA9IHRoaXMudmlld1N0YXRlLnN1YnNjcmliZShmdW5jdGlvbiAoX3JlZjQpIHsKICAgICAgICAgIHZhciB0YWcgPSBfcmVmNC50YWcsCiAgICAgICAgICAgICAgYWN0aW9uID0gX3JlZjQuYWN0aW9uLAogICAgICAgICAgICAgIGRhdGEgPSBfcmVmNC5kYXRhOwoKICAgICAgICAgIGlmICghT2JqZWN0LmlzKHRhZywgX3RoaXM2Lm5hbWUpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdhdXRvbG9hZCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXM2LmF1dG9Mb2FkKGRhdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ2xvYWQnLCBhY3Rpb24pKSB7CiAgICAgICAgICAgIF90aGlzNi5sb2FkKGRhdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ2xvYWRkcmFmdCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgaWYgKF90aGlzNi5jb250ZXh0LnNyZnNvdXJjZWtleSkgewogICAgICAgICAgICAgIF90aGlzNi5jb3B5KF90aGlzNi5jb250ZXh0LnNyZnNvdXJjZWtleSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgX3RoaXM2LmxvYWREcmFmdChkYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3NhdmUnLCBhY3Rpb24pKSB7CiAgICAgICAgICAgIF90aGlzNi5zYXZlKGRhdGEsIGRhdGEuc2hvd1Jlc3VsdEluZm8pOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3JlbW92ZScsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXM2LnJlbW92ZShkYXRhKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdzYXZlYW5kZXhpdCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgX3RoaXM2LnNhdmVBbmRFeGl0KGRhdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3NhdmVhbmRuZXcnLCBhY3Rpb24pKSB7CiAgICAgICAgICAgIF90aGlzNi5zYXZlQW5kTmV3KGRhdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3JlbW92ZWFuZGV4aXQnLCBhY3Rpb24pKSB7CiAgICAgICAgICAgIF90aGlzNi5yZW1vdmVBbmRFeGl0KGRhdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3JlZnJlc2gnLCBhY3Rpb24pKSB7CiAgICAgICAgICAgIF90aGlzNi5yZWZyZXNoKGRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICB0aGlzLmRhdGFDaGFuZy5waXBlKGRlYm91bmNlVGltZSgzMDApLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKS5zdWJzY3JpYmUoZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBpZiAoX3RoaXM2LmF1dG9zYXZlKSB7CiAgICAgICAgICBfdGhpczYuYXV0b1NhdmUoKTsKICAgICAgICB9CgogICAgICAgIHZhciBzdGF0ZSA9ICFPYmplY3QuaXMoSlNPTi5zdHJpbmdpZnkoX3RoaXM2Lm9sZERhdGEpLCBKU09OLnN0cmluZ2lmeShfdGhpczYuZGF0YSkpID8gdHJ1ZSA6IGZhbHNlOwoKICAgICAgICBfdGhpczYuJHN0b3JlLmNvbW1pdCgndmlld2FjdGlvbi9zZXRWaWV3RGF0YUNoYW5nZScsIHsKICAgICAgICAgIHZpZXd0YWc6IF90aGlzNi52aWV3dGFnLAogICAgICAgICAgdmlld2RhdGFjaGFuZ2U6IHN0YXRlCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICogdnVlIOeUn+WRveWRqOacnw0KICAgICAqDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImRlc3Ryb3llZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveWVkKCkgewogICAgICB0aGlzLmFmdGVyRGVzdHJveSgpOwogICAgfQogICAgLyoqDQogICAgICog5omn6KGMZGVzdHJveWVk5ZCO55qE6YC76L6RDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiYWZ0ZXJEZXN0cm95IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZnRlckRlc3Ryb3koKSB7CiAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZUV2ZW50KSB7CiAgICAgICAgdGhpcy52aWV3U3RhdGVFdmVudC51bnN1YnNjcmliZSgpOwogICAgICB9CgogICAgICBpZiAodGhpcy5kYXRhQ2hhbmdFdmVudCkgewogICAgICAgIHRoaXMuZGF0YUNoYW5nRXZlbnQudW5zdWJzY3JpYmUoKTsKICAgICAgfQogICAgfQogICAgLyoqDQogICAgICog5ou36LSd5YaF5a65DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFthcmc9e31dDQogICAgICogQG1lbWJlcm9mIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb3B5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5KHNyZmtleSkgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKCiAgICAgIHZhciBjb3B5RGF0YSA9IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0Q29weURhdGEoc3Jma2V5KTsKICAgICAgY29weURhdGEuc3Jma2V5ID0gVXRpbC5jcmVhdGVVVUlEKCk7CiAgICAgIGNvcHlEYXRhLnBpbWRpc3RpcmJ1dGlvbiA9IGNvcHlEYXRhLnNyZmtleTsKICAgICAgY29weURhdGEucGltZGlzdGlyYnV0aW9uaWQgPSBjb3B5RGF0YS5zcmZrZXk7CiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5jb250ZXh0LCB7CiAgICAgICAgcGltZGlzdGlyYnV0aW9uOiBjb3B5RGF0YS5waW1kaXN0aXJidXRpb24KICAgICAgfSk7CiAgICAgIHRoaXMuZGF0YSA9IGNvcHlEYXRhOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXM3LmZvcm1TdGF0ZS5uZXh0KHsKICAgICAgICAgIHR5cGU6ICdsb2FkJywKICAgICAgICAgIGRhdGE6IGNvcHlEYXRhCiAgICAgICAgfSk7CgogICAgICAgIF90aGlzNy5kYXRhLnNyZnVmID0gJzAnOwoKICAgICAgICBfdGhpczcuc2V0Rm9ybUVuYWJsZUNvbmQoX3RoaXM3LmRhdGEpOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAq5omT5Y2wDQogICAgICpAbWVtYmVyb2YgQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInByaW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmludCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLiRwcmludCh7CiAgICAgICAgaWQ6ICdwaW1kaXN0aXJidXRpb25fbWF0dXJpdHlkdWVlZGl0Zm9ybScsCiAgICAgICAgcG9wVGl0bGU6ICfkuLvnvJbovpHooajljZUo5YCf6LCD5Yiw5pyfKScKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDpg6jku7bliLfmlrANCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVmcmVzaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaChhcmdzKSB7CiAgICAgIHZhciBhcmcgPSB7fTsKICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIGFyZ3NbMF0pOwoKICAgICAgaWYgKHRoaXMuZGF0YS5zcmZrZXkgJiYgIU9iamVjdC5pcyh0aGlzLmRhdGEuc3Jma2V5LCAnJykpIHsKICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgewogICAgICAgICAgc3Jma2V5OiB0aGlzLmRhdGEuc3Jma2V5CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5sb2FkKGFyZyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5kYXRhLnNyZmtleXMgJiYgIU9iamVjdC5pcyh0aGlzLmRhdGEuc3Jma2V5cywgJycpKSB7CiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsKICAgICAgICAgIHNyZmtleTogdGhpcy5kYXRhLnNyZmtleXMKICAgICAgICB9KTsKICAgICAgICB0aGlzLmxvYWQoYXJnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOiHquWKqOWKoOi9vQ0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJnPXt9XQ0KICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhdXRvTG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0b0xvYWQoKSB7CiAgICAgIHZhciBhcmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgaWYgKGFyZy5zcmZrZXkgJiYgIU9iamVjdC5pcyhhcmcuc3Jma2V5LCAnJykpIHsKICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgewogICAgICAgICAgc3Jma2V5OiBhcmcuc3Jma2V5CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5sb2FkKGFyZyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoYXJnLnNyZmtleXMgJiYgIU9iamVjdC5pcyhhcmcuc3Jma2V5cywgJycpKSB7CiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsKICAgICAgICAgIHNyZmtleTogYXJnLnNyZmtleXMKICAgICAgICB9KTsKICAgICAgICB0aGlzLmxvYWQoYXJnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMubG9hZERyYWZ0KGFyZyk7CiAgICB9CiAgICAvKioNCiAgICAgKiDliqDovb0NCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0geyp9IFtvcHQ9e31dDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogImxvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQoKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgdmFyIG9wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICBpZiAoIXRoaXMubG9hZEFjdGlvbikgewogICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICBkZXNjOiAnUElNRElTVElSQlVUSU9OTWF0dXJpdHlEdWVFZGl0Vmlld+inhuWbvuihqOWNlWxvYWRBY3Rpb27lj4LmlbDmnKrphY3nva4nCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYXJnID0gX29iamVjdFNwcmVhZCh7fSwgb3B0KTsKCiAgICAgIHZhciB2aWV3cGFyYW1SZXN1bHQgPSBPYmplY3QuYXNzaWduKGFyZywgdGhpcy52aWV3cGFyYW1zKTsKICAgICAgdmFyIGdldCA9IHRoaXMuc2VydmljZS5nZXQodGhpcy5sb2FkQWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLCB7CiAgICAgICAgdmlld3BhcmFtczogdmlld3BhcmFtUmVzdWx0CiAgICAgIH0sIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpOwogICAgICBnZXQudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTsKCiAgICAgICAgICBfdGhpczgub25Gb3JtTG9hZChkYXRhLCAnbG9hZCcpOwoKICAgICAgICAgIF90aGlzOC4kZW1pdCgnbG9hZCcsIGRhdGEpOwoKICAgICAgICAgIF90aGlzOC4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczguZm9ybVN0YXRlLm5leHQoewogICAgICAgICAgICAgIHR5cGU6ICdsb2FkJywKICAgICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgIF90aGlzOC4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgX3RoaXM4LiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWKoOi9veiNieeovw0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJsb2FkRHJhZnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWREcmFmdCgpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CgogICAgICB2YXIgb3B0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgIGlmICghdGhpcy5sb2FkZHJhZnRBY3Rpb24pIHsKICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgZGVzYzogJ1BJTURJU1RJUkJVVElPTk1hdHVyaXR5RHVlRWRpdFZpZXfop4blm77ooajljZVsb2FkZHJhZnRBY3Rpb27lj4LmlbDmnKrphY3nva4nCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYXJnID0gX29iamVjdFNwcmVhZCh7fSwgb3B0KTsKCiAgICAgIHZhciB2aWV3cGFyYW1SZXN1bHQgPSBPYmplY3QuYXNzaWduKGFyZywgdGhpcy52aWV3cGFyYW1zKTsKICAgICAgdmFyIHBvc3QgPSB0aGlzLnNlcnZpY2UubG9hZERyYWZ0KHRoaXMubG9hZGRyYWZ0QWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLCB7CiAgICAgICAgdmlld3BhcmFtczogdmlld3BhcmFtUmVzdWx0CiAgICAgIH0sIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpOwogICAgICBwb3N0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICAgIF90aGlzOS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTsKCiAgICAgICAgaWYgKGRhdGEucGltZGlzdGlyYnV0aW9uKSB7CiAgICAgICAgICBPYmplY3QuYXNzaWduKF90aGlzOS5jb250ZXh0LCB7CiAgICAgICAgICAgIHBpbWRpc3RpcmJ1dGlvbjogZGF0YS5waW1kaXN0aXJidXRpb24KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgX3RoaXM5LnJlc2V0RHJhZnRGb3JtU3RhdGVzKCk7CgogICAgICAgIF90aGlzOS5vbkZvcm1Mb2FkKGRhdGEsICdsb2FkRHJhZnQnKTsKCiAgICAgICAgX3RoaXM5LiRlbWl0KCdsb2FkJywgZGF0YSk7CgogICAgICAgIF90aGlzOS4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXM5LmZvcm1TdGF0ZS5uZXh0KHsKICAgICAgICAgICAgdHlwZTogJ2xvYWQnLAogICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgZm9ybSA9IF90aGlzOS4kcmVmcy5mb3JtOwoKICAgICAgICAgIGlmIChmb3JtKSB7CiAgICAgICAgICAgIGZvcm0uZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgICAgICAgZmllbGQudmFsaWRhdGVNZXNzYWdlID0gIiI7CiAgICAgICAgICAgICAgZmllbGQudmFsaWRhdGVTdGF0ZSA9ICIiOwogICAgICAgICAgICAgIGZpZWxkLnZhbGlkYXRlU3RhdHVzID0gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgIF90aGlzOS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgX3RoaXM5LiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOiHquWKqOS/neWtmA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhdXRvU2F2ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0b1NhdmUoKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIHZhciBvcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgaWYgKCF0aGlzLmZvcm1WYWxpZGF0ZVN0YXR1cygpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYXJnID0gX29iamVjdFNwcmVhZCh7fSwgb3B0KTsKCiAgICAgIHZhciBkYXRhID0gdGhpcy5nZXRWYWx1ZXMoKTsKICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIGRhdGEpOwogICAgICB2YXIgYWN0aW9uID0gT2JqZWN0LmlzKGRhdGEuc3JmdWYsICcxJykgPyB0aGlzLnVwZGF0ZUFjdGlvbiA6IHRoaXMuY3JlYXRlQWN0aW9uOwoKICAgICAgaWYgKCFhY3Rpb24pIHsKICAgICAgICB2YXIgYWN0aW9uTmFtZSA9IE9iamVjdC5pcyhkYXRhLnNyZnVmLCAnMScpID8gInVwZGF0ZUFjdGlvbiIgOiAiY3JlYXRlQWN0aW9uIjsKICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgZGVzYzogJ1BJTURJU1RJUkJVVElPTk1hdHVyaXR5RHVlRWRpdFZpZXfop4blm77ooajljZUnICsgYWN0aW9uTmFtZSArICflj4LmlbDmnKrphY3nva4nCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBPYmplY3QuYXNzaWduKGFyZywgewogICAgICAgIHZpZXdwYXJhbXM6IHRoaXMudmlld3BhcmFtcwogICAgICB9KTsKICAgICAgdmFyIHBvc3QgPSB0aGlzLnNlcnZpY2UuYWRkKGFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSwgYXJnLCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsKICAgICAgcG9zdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICBfdGhpczEwLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhOwoKICAgICAgICBfdGhpczEwLm9uRm9ybUxvYWQoZGF0YSwgJ2F1dG9TYXZlJyk7CgogICAgICAgIF90aGlzMTAuJGVtaXQoJ3NhdmUnLCBkYXRhKTsKCiAgICAgICAgX3RoaXMxMC4kc3RvcmUuZGlzcGF0Y2goJ3ZpZXdhY3Rpb24vZGF0YXNhdmVkJywgewogICAgICAgICAgdmlld3RhZzogX3RoaXMxMC52aWV3dGFnCiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMTAuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMTAuZm9ybVN0YXRlLm5leHQoewogICAgICAgICAgICB0eXBlOiAnc2F2ZScsCiAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgIF90aGlzMTAuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgIF90aGlzMTAuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgZGVzYzogJ+ezu+e7n+W8guW4uCcKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5L+d5a2YDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFtvcHQ9e31dDQogICAgICogQHBhcmFtIHtib29sZWFufSBbc2hvd1Jlc3VsdEluZm9dDQogICAgICogQHBhcmFtIHtib29sZWFufSBbaWZTdGF0ZU5leHRdIGZvcm1TdGF0ZeaYr+WQpuS4i+WPkemAmuefpQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInNhdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zYXZlID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CgogICAgICAgIHZhciBvcHQsCiAgICAgICAgICAgIHNob3dSZXN1bHRJbmZvLAogICAgICAgICAgICBpZlN0YXRlTmV4dCwKICAgICAgICAgICAgX2FyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgb3B0ID0gX2FyZ3MubGVuZ3RoID4gMCAmJiBfYXJnc1swXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbMF0gOiB7fTsKICAgICAgICAgICAgICAgIHNob3dSZXN1bHRJbmZvID0gX2FyZ3MubGVuZ3RoID4gMSA/IF9hcmdzWzFdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgaWZTdGF0ZU5leHQgPSBfYXJncy5sZW5ndGggPiAyICYmIF9hcmdzWzJdICE9PSB1bmRlZmluZWQgPyBfYXJnc1syXSA6IHRydWU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgIHNob3dSZXN1bHRJbmZvID0gc2hvd1Jlc3VsdEluZm8gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTsKCiAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMxMS5mb3JtVmFsaWRhdGVTdGF0dXMoKSkgewogICAgICAgICAgICAgICAgICAgIF90aGlzMTEuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5YC86KeE5YiZ5qCh6aqM5byC5bi4JwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHZhciBhcmcgPSBfb2JqZWN0U3ByZWFkKHt9LCBvcHQpOwoKICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBfdGhpczExLmdldFZhbHVlcygpOwoKICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIGRhdGEpOwogICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgX3RoaXMxMS5jb250ZXh0KTsKCiAgICAgICAgICAgICAgICAgIGlmIChpZlN0YXRlTmV4dCkgewogICAgICAgICAgICAgICAgICAgIF90aGlzMTEuZHJjb3VudGVyID0gMDsKCiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMTEuZHJjb3VudGVyICE9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczExLmRyc2F2ZW9wdCA9IG9wdDsKCiAgICAgICAgICAgICAgICAgICAgICBfdGhpczExLmZvcm1TdGF0ZS5uZXh0KHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2JlZm9yZXNhdmUnLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBhcmcKICAgICAgICAgICAgICAgICAgICAgIH0pOyAvL+WFiOmAmuefpeWFs+ezu+eVjOmdouS/neWtmAoKCiAgICAgICAgICAgICAgICAgICAgICBfdGhpczExLnNhdmVTdGF0ZSA9IHJlc29sdmU7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gT2JqZWN0LmlzKGRhdGEuc3JmdWYsICcxJykgPyBfdGhpczExLnVwZGF0ZUFjdGlvbiA6IF90aGlzMTEuY3JlYXRlQWN0aW9uOwoKICAgICAgICAgICAgICAgICAgaWYgKCFhY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uTmFtZSA9IE9iamVjdC5pcyhkYXRhLnNyZnVmLCAnMScpID8gInVwZGF0ZUFjdGlvbiIgOiAiY3JlYXRlQWN0aW9uIjsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICdQSU1ESVNUSVJCVVRJT05NYXR1cml0eUR1ZUVkaXRWaWV36KeG5Zu+6KGo5Y2VJyArIGFjdGlvbk5hbWUgKyAn5Y+C5pWw5pyq6YWN572uJwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7CiAgICAgICAgICAgICAgICAgICAgdmlld3BhcmFtczogX3RoaXMxMS52aWV3cGFyYW1zCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB2YXIgcG9zdCA9IE9iamVjdC5pcyhkYXRhLnNyZnVmLCAnMScpID8gX3RoaXMxMS5zZXJ2aWNlLnVwZGF0ZShhY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX3RoaXMxMS5jb250ZXh0KSksIGFyZywgX3RoaXMxMS5zaG93QnVzeUluZGljYXRvcikgOiBfdGhpczExLnNlcnZpY2UuYWRkKGFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfdGhpczExLmNvbnRleHQpKSwgYXJnLCBfdGhpczExLnNob3dCdXN5SW5kaWNhdG9yKTsKICAgICAgICAgICAgICAgICAgcG9zdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczExLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhOwoKICAgICAgICAgICAgICAgICAgICBfdGhpczExLm9uRm9ybUxvYWQoZGF0YSwgJ3NhdmUnKTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS4kZW1pdCgnc2F2ZScsIGRhdGEpOwoKICAgICAgICAgICAgICAgICAgICBfdGhpczExLiRzdG9yZS5kaXNwYXRjaCgndmlld2FjdGlvbi9kYXRhc2F2ZWQnLCB7CiAgICAgICAgICAgICAgICAgICAgICB2aWV3dGFnOiBfdGhpczExLnZpZXd0YWcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS5mb3JtU3RhdGUubmV4dCh7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzYXZlJywKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIGlmIChzaG93UmVzdWx0SW5mbykgewogICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS4kTm90aWNlLnN1Y2Nlc3MoewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJycsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IChkYXRhLnNyZm1ham9ydGV4dCA/IGRhdGEuc3JmbWFqb3J0ZXh0IDogJycpICsgJyZuYnNwO+S/neWtmOaIkOWKn++8gScKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTEuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+ezu+e7n+W8guW4uCcKICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHNhdmUoKSB7CiAgICAgICAgcmV0dXJuIF9zYXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzYXZlOwogICAgfSgpCiAgICAvKioNCiAgICAqIOWIoOmZpA0KICAgICoNCiAgICAqIEBwdWJsaWMNCiAgICAqIEBwYXJhbSB7Kn0gW29wdD17fV0NCiAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICovCgogIH0sIHsKICAgIGtleTogInJlbW92ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkgewogICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CgogICAgICB2YXIgb3B0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTsKICAgICAgdmFyIHNob3dSZXN1bHRJbmZvID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgaWYgKCFfdGhpczEyLnJlbW92ZUFjdGlvbikgewogICAgICAgICAgX3RoaXMxMi4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICBkZXNjOiAnUElNRElTVElSQlVUSU9OTWF0dXJpdHlEdWVFZGl0Vmlld+inhuWbvuihqOWNlXJlbW92ZUFjdGlvbuWPguaVsOacqumFjee9ricKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBhcmcgPSBvcHRbMF07CiAgICAgICAgdmFyIF90aGlzID0gX3RoaXMxMjsKICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgewogICAgICAgICAgdmlld3BhcmFtczogX3RoaXMxMi52aWV3cGFyYW1zCiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMTIuc2VydmljZVsiZGVsZXRlIl0oX3RoaXMucmVtb3ZlQWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KF90aGlzMTIuY29udGV4dCkpLCBhcmcsIHNob3dSZXN1bHRJbmZvKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgaWYgKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTsKCiAgICAgICAgICAgIF90aGlzMTIuJGVtaXQoJ3JlbW92ZScsIGRhdGEpOwoKICAgICAgICAgICAgX3RoaXMxMi5mb3JtU3RhdGUubmV4dCh7CiAgICAgICAgICAgICAgdHlwZTogJ3JlbW92ZScsCiAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIF90aGlzMTIuZGF0YS5pc21vZGlmeSA9IGZhbHNlOwoKICAgICAgICAgICAgX3RoaXMxMi4kTm90aWNlLnN1Y2Nlc3MoewogICAgICAgICAgICAgIHRpdGxlOiAnJywKICAgICAgICAgICAgICBkZXNjOiAoZGF0YS5zcmZtYWpvcnRleHQgPyBkYXRhLnNyZm1ham9ydGV4dCA6ICcnKSArICcmbmJzcDvliKDpmaTmiJDlip/vvIEnCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgICB9CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICB2YXIgX2RhdGEgPSBlcnJvci5kYXRhOwoKICAgICAgICAgIF90aGlzMTIuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgIHRpdGxlOiBfZGF0YS50aXRsZSwKICAgICAgICAgICAgZGVzYzogX2RhdGEubWVzc2FnZQogICAgICAgICAgfSk7CgogICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiDlt6XkvZzmtYHlkK/liqgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgICogQHBhcmFtIHsqfSBbbG9jYWxkYXRhPXt9XQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogIndmc3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF93ZnN0YXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoZGF0YSwgbG9jYWxkYXRhKSB7CiAgICAgICAgdmFyIF90aGlzMTMgPSB0aGlzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gX3RoaXMxMzsKCiAgICAgICAgICAgICAgICAgIHZhciBwb3N0ID0gX3RoaXMuc2F2ZSh7fSwgZmFsc2UpOwoKICAgICAgICAgICAgICAgICAgcG9zdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBhcmcgPSByZXNwb25zZS5kYXRhOwoKICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMxMy52aWV3cGFyYW1zKSB7CiAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgewogICAgICAgICAgICAgICAgICAgICAgICB2aWV3cGFyYW1zOiBfdGhpczEzLnZpZXdwYXJhbXMKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF90aGlzMTMuc2VydmljZS53ZnN0YXJ0KF90aGlzLldGU3RhcnRBY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX3RoaXMxMy5jb250ZXh0KSksIGFyZywgX3RoaXMxMy5zaG93QnVzeUluZGljYXRvciwgbG9jYWxkYXRhKTsKCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMy4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICflt6XkvZzmtYHlkK/liqjlpLHotKUsICcgKyByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTMuJE5vdGljZS5pbmZvKHsKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5bel5L2c5rWB5ZCv5Yqo5oiQ5YqfJwogICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMy4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczEzLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn57O757uf5byC5bi4JwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTMuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczEzLiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHdmc3RhcnQoX3gsIF94MikgewogICAgICAgIHJldHVybiBfd2ZzdGFydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gd2ZzdGFydDsKICAgIH0oKQogICAgLyoqDQogICAgICog5bel5L2c5rWB5o+Q5LqkDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW2xvY2FsZGF0YT17fV0NCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ3ZnN1Ym1pdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3dmc3VibWl0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoZGF0YSwgbG9jYWxkYXRhKSB7CiAgICAgICAgdmFyIF90aGlzMTQgPSB0aGlzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gX3RoaXMxNDsKICAgICAgICAgICAgICAgICAgdmFyIGFyZyA9IGRhdGFbMF07CiAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7CiAgICAgICAgICAgICAgICAgICAgdmlld3BhcmFtczogX3RoaXMxNC52aWV3cGFyYW1zCiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgaWYgKCFhcmcucGltZGlzdGlyYnV0aW9uIHx8IE9iamVjdC5pcyhhcmcucGltZGlzdGlyYnV0aW9uLCAnJykpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHZhciBwb3N0ID0gT2JqZWN0LmlzKGFyZy5zcmZ1ZiwgJzEnKSA/IF90aGlzMTQuc2VydmljZS51cGRhdGUoX3RoaXMxNC51cGRhdGVBY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX3RoaXMxNC5jb250ZXh0KSksIGFyZywgX3RoaXMxNC5zaG93QnVzeUluZGljYXRvcikgOiBfdGhpczE0LnNlcnZpY2UuYWRkKF90aGlzMTQuY3JlYXRlQWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KF90aGlzMTQuY29udGV4dCkpLCBhcmcsIF90aGlzMTQuc2hvd0J1c3lJbmRpY2F0b3IpOwogICAgICAgICAgICAgICAgICBwb3N0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZyA9IHJlc3BvbnNlLmRhdGE7IC8vIOS/neWtmOWujOaIkFVJ5aSE55CGCgogICAgICAgICAgICAgICAgICAgIF90aGlzMTQub25Gb3JtTG9hZChhcmcsICdzYXZlJyk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzMTQuJGVtaXQoJ3NhdmUnLCBhcmcpOwoKICAgICAgICAgICAgICAgICAgICBfdGhpczE0LiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczE0LmZvcm1TdGF0ZS5uZXh0KHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NhdmUnLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBhcmcKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOyAvLyDlh4blpIfmj5DkuqTlj4LmlbAKCgogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczE0LnZpZXdwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwYXJhbXM6IF90aGlzMTQudmlld3BhcmFtcwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSAvLyDlvLrliLbooaXlhYVzcmZ3Zm1lbW8KCgogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczE0LnNyZndmbWVtbykgewogICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3Jmd2ZtZW1vOiBfdGhpczE0LnNyZndmbWVtbwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMxNC5zZXJ2aWNlLndmc3VibWl0KF90aGlzLldGU3VibWl0QWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KF90aGlzMTQuY29udGV4dCkpLCBhcmcsIF90aGlzMTQuc2hvd0J1c3lJbmRpY2F0b3IsIGxvY2FsZGF0YSk7CgogICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTQuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5bel5L2c5rWB5o+Q5Lqk5aSx6LSlLCAnICsgcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICBfdGhpczE0Lm9uRm9ybUxvYWQoYXJnLCAnc3VibWl0Jyk7CgogICAgICAgICAgICAgICAgICAgICAgX3RoaXMxNC4kc3RvcmUuZGlzcGF0Y2goJ3ZpZXdhY3Rpb24vZGF0YXNhdmVkJywgewogICAgICAgICAgICAgICAgICAgICAgICB2aWV3dGFnOiBfdGhpczE0LnZpZXd0YWcKICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTQuJE5vdGljZS5pbmZvKHsKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5bel5L2c5rWB5o+Q5Lqk5oiQ5YqfJwogICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxNC4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczE0LiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn57O757uf5byC5bi4JwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTQuJE5vdGljZS5lcnJvcih7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6ZSZ6K+vJywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczE0LiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHdmc3VibWl0KF94MywgX3g0KSB7CiAgICAgICAgcmV0dXJuIF93ZnN1Ym1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gd2ZzdWJtaXQ7CiAgICB9KCkKICAgIC8qKg0KICAgICAqIOihqOWNlemhueabtOaWsA0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUg55WM6Z2i6KGM5Li65ZCN56ewDQogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0g6K+35rGC5pWw5o2uDQogICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdXBkYXRlRGV0YWlscyDmm7TmlrDpobkNCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG93bG9hZGluZ10g5piv5ZCm5pi+56S65Yqg6L2954q25oCBDQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInVwZGF0ZUZvcm1JdGVtcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRm9ybUl0ZW1zKG1vZGUpIHsKICAgICAgdmFyIF90aGlzMTUgPSB0aGlzOwoKICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogICAgICB2YXIgdXBkYXRlRGV0YWlscyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkOwogICAgICB2YXIgc2hvd2xvYWRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDsKCiAgICAgIGlmICghbW9kZSB8fCBtb2RlICYmIE9iamVjdC5pcyhtb2RlLCAnJykpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBhcmcgPSBfb2JqZWN0U3ByZWFkKHt9LCBkYXRhKTsKCiAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB0aGlzLnZpZXdwYXJhbXMpOwogICAgICB2YXIgcG9zdCA9IHRoaXMuc2VydmljZS5mcm9udExvZ2ljKG1vZGUsIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksIGFyZywgc2hvd2xvYWRpbmcpOwogICAgICBwb3N0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgX3RoaXMxNS4kTm90aWNlLmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICfplJnor68nLAogICAgICAgICAgICBkZXNjOiAn6KGo5Y2V6aG55pu05paw5aSx6LSlJwogICAgICAgICAgfSk7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhOwogICAgICAgIHZhciBfZGF0YSA9IHt9OwogICAgICAgIHVwZGF0ZURldGFpbHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBPYmplY3QuYXNzaWduKF9kYXRhLCBfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIGRhdGFbbmFtZV0pKTsKICAgICAgICB9KTsKCiAgICAgICAgX3RoaXMxNS5zZXRGb3JtRW5hYmxlQ29uZChfZGF0YSk7CgogICAgICAgIF90aGlzMTUuZmlsbEZvcm0oX2RhdGEsICd1cGRhdGVGb3JtSXRlbScpOwoKICAgICAgICBfdGhpczE1LmZvcm1Mb2dpYyh7CiAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgIG5ld1ZhbDogbnVsbCwKICAgICAgICAgIG9sZFZhbDogbnVsbAogICAgICAgIH0pOwoKICAgICAgICBfdGhpczE1LmRhdGFDaGFuZy5uZXh0KEpTT04uc3RyaW5naWZ5KF90aGlzMTUuZGF0YSkpOwoKICAgICAgICBfdGhpczE1LiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczE1LmZvcm1TdGF0ZS5uZXh0KHsKICAgICAgICAgICAgdHlwZTogJ3VwZGF0ZWZvcm1pdGVtJywKICAgICAgICAgICAgdWZpbW9kZTogYXJnLnNyZnVmaW1vZGUsCiAgICAgICAgICAgIGRhdGE6IF9kYXRhCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICBfdGhpczE1LiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZQogICAgICAgICAgfSk7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICBfdGhpczE1LiROb3RpY2UuZXJyb3IoewogICAgICAgICAgICB0aXRsZTogJ+mUmeivrycsCiAgICAgICAgICAgIGRlc2M6ICfns7vnu5/lvILluLgnCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOWbnui9puS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25FbnRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25FbnRlcigkZXZlbnQpIHt9CiAgICAvKioNCiAgICAgKiDkv53lrZjlubbpgIDlh7oNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2F2ZUFuZEV4aXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVBbmRFeGl0KGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGFyZyA9IHt9OwoKICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCBkYXRhWzBdKTsKICAgICAgICB9CgogICAgICAgIF90aGlzLmN1cnJlbnRBY3Rpb24gPSAic2F2ZUFuZEV4aXQiOwoKICAgICAgICBfdGhpcy5zYXZlKFthcmddKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgICAgX3RoaXMuY2xvc2VWaWV3KHJlcy5kYXRhKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXNvbHZlKHJlcyk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICAqIOS/neWtmOW5tuaWsOW7ug0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzYXZlQW5kTmV3IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlQW5kTmV3KGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGFyZyA9IHt9OwoKICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCBkYXRhWzBdKTsKICAgICAgICB9CgogICAgICAgIF90aGlzLmN1cnJlbnRBY3Rpb24gPSAic2F2ZUFuZE5ldyI7CgogICAgICAgIF90aGlzLnNhdmUoW2FyZ10pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgX3RoaXMuUmVzZXREYXRhKHJlcyk7CgogICAgICAgICAgX3RoaXMubG9hZERyYWZ0KHt9KTsKICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqDQogICAgICog5Yig6Zmk5bm26YCA5Ye6DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzDQogICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogInJlbW92ZUFuZEV4aXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUFuZEV4aXQoZGF0YSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgYXJnID0ge307CgogICAgICAgIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoID4gMCkgewogICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIGRhdGFbMF0pOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMucmVtb3ZlKFthcmddKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgICAgX3RoaXMuY2xvc2VWaWV3KHJlcy5kYXRhKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXNvbHZlKHJlcyk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKg0KICAgICog5YWz57O755WM6Z2i5pWw5o2u5L+d5a2Y5a6M5oiQDQogICAgKg0KICAgICogQHBhcmFtIHthbnl9ICRldmVudA0KICAgICogQG1lbWJlcm9mIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlDQogICAgKi8KCiAgfSwgewogICAga2V5OiAiZHJkYXRhc2F2ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRyZGF0YXNhdmVkKCRldmVudCkgewogICAgICB2YXIgX3RoaXMxNiA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5kcmNvdW50ZXItLTsKCiAgICAgIGlmICh0aGlzLmRyY291bnRlciA9PT0gMCkgewogICAgICAgIHRoaXMuc2F2ZSh0aGlzLmRyc2F2ZW9wdCwgdW5kZWZpbmVkLCBmYWxzZSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBfdGhpczE2LnNhdmVTdGF0ZShyZXMpOwoKICAgICAgICAgIF90aGlzMTYuZHJzYXZlb3B0ID0ge307CgogICAgICAgICAgaWYgKE9iamVjdC5pcyhfdGhpcy5jdXJyZW50QWN0aW9uLCAic2F2ZUFuZE5ldyIpKSB7CiAgICAgICAgICAgIF90aGlzLlJlc2V0RGF0YShyZXMpOwoKICAgICAgICAgICAgX3RoaXMubG9hZERyYWZ0KHt9KTsKICAgICAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmlzKF90aGlzLmN1cnJlbnRBY3Rpb24sICJzYXZlQW5kRXhpdCIpKSB7CiAgICAgICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgICAgICBfdGhpcy5jbG9zZVZpZXcocmVzLmRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIC8qKg0KICAgICAqIOaWsOW7uum7mOiupOWAvA0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjcmVhdGVEZWZhdWx0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0KCkge30KICAgIC8qKg0KICAgICAqIOabtOaWsOm7mOiupOWAvA0KICAgICAqIEBtZW1iZXJvZiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVEZWZhdWx0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVEZWZhdWx0KCkge30KICB9XSk7CgogIHJldHVybiBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZTsKfShWdWUpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJuYW1lIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAidmlld1N0YXRlIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAiY29udGV4dCIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgInZpZXdwYXJhbXMiLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKHsKICAiZGVmYXVsdCI6IGZhbHNlCn0pXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAiYXV0b3NhdmUiLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKHsKICAiZGVmYXVsdCI6IHRydWUKfSldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJzaG93QnVzeUluZGljYXRvciIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIldGU3VibWl0QWN0aW9uIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbUHJvcCgpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAiV0ZTdGFydEFjdGlvbiIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgInVwZGF0ZUFjdGlvbiIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgInJlbW92ZUFjdGlvbiIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgImxvYWRkcmFmdEFjdGlvbiIsIHZvaWQgMCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1Byb3AoKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgImxvYWRBY3Rpb24iLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJjcmVhdGVBY3Rpb24iLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJzZWFyY2hBY3Rpb24iLCB2b2lkIDApOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtQcm9wKCldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJ2aWV3dGFnIiwgdm9pZCAwKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEuc3JmdXBkYXRlZGF0ZScpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAib25TcmZ1cGRhdGVkYXRlQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnNyZm9yaWtleScpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAib25TcmZvcmlrZXlDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEuc3Jma2V5JyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvblNyZmtleUNoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5zcmZtYWpvcnRleHQnKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIm9uU3JmbWFqb3J0ZXh0Q2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnNyZnRlbXBtb2RlJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvblNyZnRlbXBtb2RlQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnNyZnVmJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvblNyZnVmQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnNyZmRlaWQnKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIm9uU3JmZGVpZENoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5zcmZzb3VyY2VrZXknKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIm9uU3Jmc291cmNla2V5Q2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnBpbXBlcnNvbmlkJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvblBpbXBlcnNvbmlkQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLnlnYmgnKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIm9uWWdiaENoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5waW1wZXJzb25uYW1lJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvblBpbXBlcnNvbm5hbWVDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEuZnBseCcpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAib25GcGx4Q2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLmZwenQnKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIm9uRnB6dENoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5jZnBseCcpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAib25DZnBseENoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5vcm1vcmduYW1lJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvbk9ybW9yZ25hbWVDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEub3Jtb3Jnc2VjdG9ybmFtZScpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAib25Pcm1vcmdzZWN0b3JuYW1lQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLm9ybWR1dHluYW1lJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvbk9ybWR1dHluYW1lQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLm9ybXBvc3RuYW1lJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvbk9ybXBvc3RuYW1lQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLmd6ZHEnKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIm9uR3pkcUNoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5nemRkJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvbkd6ZGRDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEucnprc3NqJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvblJ6a3NzakNoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5yempzc2onKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIm9uUnpqc3NqQ2hhbmdlIiwgbnVsbCk7Cgp0c2xpYl8xLl9fZGVjb3JhdGUoW1dhdGNoKCdkYXRhLm9ybWR1dHlpZCcpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAib25Pcm1kdXR5aWRDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEucGltZGlzdGlyYnV0aW9uaWQnKV0sIE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlLnByb3RvdHlwZSwgIm9uUGltZGlzdGlyYnV0aW9uaWRDaGFuZ2UiLCBudWxsKTsKCnRzbGliXzEuX19kZWNvcmF0ZShbV2F0Y2goJ2RhdGEub3JtcG9zdGlkJyldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZS5wcm90b3R5cGUsICJvbk9ybXBvc3RpZENoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5vcm1vcmdzZWN0b3JpZCcpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAib25Pcm1vcmdzZWN0b3JpZENoYW5nZSIsIG51bGwpOwoKdHNsaWJfMS5fX2RlY29yYXRlKFtXYXRjaCgnZGF0YS5vcm1vcmdpZCcpXSwgTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UucHJvdG90eXBlLCAib25Pcm1vcmdpZENoYW5nZSIsIG51bGwpOwoKTWF0dXJpdHlEdWVFZGl0Rm9ybUJhc2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW0NvbXBvbmVudCh7CiAgY29tcG9uZW50czoge30KfSldLCBNYXR1cml0eUR1ZUVkaXRGb3JtQmFzZSk7CmV4cG9ydCBkZWZhdWx0IE1hdHVyaXR5RHVlRWRpdEZvcm1CYXNlOw=="},null]}
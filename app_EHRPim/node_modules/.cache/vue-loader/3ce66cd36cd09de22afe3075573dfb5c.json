{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-search-modal\\main-form\\main-form-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-search-modal\\main-form\\main-form-base.vue","mtime":1630509413577},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KaW1wb3J0IHsgVnVlLCBDb21wb25lbnQsIFByb3AsIFByb3ZpZGUsIEVtaXQsIFdhdGNoLCBNb2RlbCxJbmplY3QgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsNCmltcG9ydCB7IENyZWF0ZUVsZW1lbnQgfSBmcm9tICd2dWUnOw0KaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7DQppbXBvcnQgeyBDb250cm9sSW50ZXJmYWNlIH0gZnJvbSAnQC9pbnRlcmZhY2UvY29udHJvbCc7DQppbXBvcnQgeyBVSUFjdGlvblRvb2wsVXRpbCB9IGZyb20gJ0AvdXRpbHMnOw0KaW1wb3J0IE5hdkRhdGFTZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9hcHAvbmF2ZGF0YS1zZXJ2aWNlJzsNCmltcG9ydCBQaW1TZWFyY2hNb2RhbFNlcnZpY2UgZnJvbSAnQC9zZXJ2aWNlL3BpbS1zZWFyY2gtbW9kYWwvcGltLXNlYXJjaC1tb2RhbC1zZXJ2aWNlJzsNCmltcG9ydCBNYWluU2VydmljZSBmcm9tICcuL21haW4tZm9ybS1zZXJ2aWNlJzsNCg0KaW1wb3J0IHsgRm9ybUJ1dHRvbk1vZGVsLCBGb3JtUGFnZU1vZGVsLCBGb3JtSXRlbU1vZGVsLCBGb3JtRFJVSVBhcnRNb2RlbCwgRm9ybVBhcnRNb2RlbCwgRm9ybUdyb3VwUGFuZWxNb2RlbCwgRm9ybUlGcmFtZU1vZGVsLCBGb3JtUm93SXRlbU1vZGVsLCBGb3JtVGFiUGFnZU1vZGVsLCBGb3JtVGFiUGFuZWxNb2RlbCwgRm9ybVVzZXJDb250cm9sTW9kZWwgfSBmcm9tICdAL21vZGVsL2Zvcm0tZGV0YWlsJzsNCmltcG9ydCB7IGRlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7DQoNCg0KQENvbXBvbmVudCh7DQogICAgY29tcG9uZW50czogew0KICAgICAgDQogICAgfQ0KfSkNCmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW5CYXNlIGV4dGVuZHMgVnVlIGltcGxlbWVudHMgQ29udHJvbEludGVyZmFjZSB7DQoNCiAgICAvKioNCiAgICAgKiDlkI3np7ANCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgbmFtZT86IHN0cmluZzsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvumAmuiur+WvueixoQ0KICAgICAqDQogICAgICogQHR5cGUge1N1YmplY3Q8Vmlld1N0YXRlPn0NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyB2aWV3U3RhdGUhOiBTdWJqZWN0PFZpZXdTdGF0ZT47DQoNCiAgICAvKioNCiAgICAgKiDlupTnlKjkuIrkuIvmlocNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIGNvbnRleHQ6IGFueTsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvuWPguaVsA0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgdmlld3BhcmFtczogYW55Ow0KDQogICAgLyoqDQogICAgICog6KeG5Zu+54q25oCB5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHR5cGUgeyhTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQpfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyB2aWV3U3RhdGVFdmVudDogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkOw0KDQogICAgLyoqDQogICAgICog6I635Y+W6YOo5Lu257G75Z6LDQogICAgICoNCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBnZXRDb250cm9sVHlwZSgpOiBzdHJpbmcgew0KICAgICAgICByZXR1cm4gJ0ZPUk0nDQogICAgfQ0KDQoNCg0KICAgIC8qKg0KICAgICAqIOiuoeaVsOWZqOacjeWKoeWvueixoembhuWQiA0KICAgICAqDQogICAgICogQHR5cGUge0FycmF5PCo+fQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLyAgICANCiAgICBwdWJsaWMgY291bnRlclNlcnZpY2VBcnJheTpBcnJheTxhbnk+ID0gW107DQoNCiAgICAvKioNCiAgICAgKiDlu7rmnoTpg6jku7bmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtNYWluU2VydmljZX0NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgc2VydmljZTogTWFpblNlcnZpY2UgPSBuZXcgTWFpblNlcnZpY2UoeyAkc3RvcmU6IHRoaXMuJHN0b3JlIH0pOw0KDQogICAgLyoqDQogICAgICog5a6e5L2T5pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7UGltU2VhcmNoTW9kYWxTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBhcHBFbnRpdHlTZXJ2aWNlOiBQaW1TZWFyY2hNb2RhbFNlcnZpY2UgPSBuZXcgUGltU2VhcmNoTW9kYWxTZXJ2aWNlKHsgJHN0b3JlOiB0aGlzLiRzdG9yZSB9KTsNCiAgICANCg0KDQogICAgLyoqDQogICAgICog5YWz6Zet6KeG5Zu+DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBjbG9zZVZpZXcoYXJnczogYW55KTogdm9pZCB7DQogICAgICAgIGxldCBfdGhpczogYW55ID0gdGhpczsNCiAgICAgICAgX3RoaXMuJGVtaXQoJ2Nsb3NldmlldycsIFthcmdzXSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogIOiuoeaVsOWZqOWIt+aWsA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGNvdW50ZXJSZWZyZXNoKCl7DQogICAgICAgIGNvbnN0IF90aGlzOmFueSA9dGhpczsNCiAgICAgICAgaWYoX3RoaXMuY291bnRlclNlcnZpY2VBcnJheSAmJiBfdGhpcy5jb3VudGVyU2VydmljZUFycmF5Lmxlbmd0aCA+MCl7DQogICAgICAgICAgICBfdGhpcy5jb3VudGVyU2VydmljZUFycmF5LmZvckVhY2goKGl0ZW06YW55KSA9PnsNCiAgICAgICAgICAgICAgICBpZihpdGVtLnJlZnJlc2hEYXRhICYmIGl0ZW0ucmVmcmVzaERhdGEgaW5zdGFuY2VvZiBGdW5jdGlvbil7DQogICAgICAgICAgICAgICAgICAgIGl0ZW0ucmVmcmVzaERhdGEoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KQ0KICAgICAgICB9DQogICAgfQ0KDQoNCiAgICAvKioNCiAgICAgKiDlt6XkvZzmtYHlrqHmibnmhI/op4Hmjqfku7bnu5HlrprlgLwNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzcmZ3Zm1lbW86c3RyaW5nID0gIiI7DQogICAgDQogICAgLyoqDQogICAgICog6I635Y+W5aSa6aG55pWw5o2uDQogICAgICoNCiAgICAgKiBAcmV0dXJucyB7YW55W119DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGdldERhdGFzKCk6IGFueVtdIHsNCiAgICAgICAgcmV0dXJuIFt0aGlzLmRhdGFdOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPluWNlemhueagkQ0KICAgICAqDQogICAgICogQHJldHVybnMgeyp9DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGdldERhdGEoKTogYW55IHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmmK/lkKbpu5jorqTkv53lrZgNCiAgICAgKg0KICAgICAqIEB0eXBlIHtib29sZWFufQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKHsgZGVmYXVsdDogZmFsc2UgfSkgcHVibGljIGF1dG9zYXZlPzogYm9vbGVhbjsNCg0KICAgIC8qKg0KICAgICAqIOaYvuekuuWkhOeQhuaPkOekug0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgQFByb3AoeyBkZWZhdWx0OiB0cnVlIH0pIHB1YmxpYyBzaG93QnVzeUluZGljYXRvcj86IGJvb2xlYW47DQoNCiAgICAvKioNCiAgICAgKiDpg6jku7booYzkuLotLXN1Ym1pdA0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyBXRlN1Ym1pdEFjdGlvbiE6IHN0cmluZzsNCiAgICANCiAgICAvKioNCiAgICAgKiDpg6jku7booYzkuLotLXN0YXJ0DQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIFdGU3RhcnRBY3Rpb24hOiBzdHJpbmc7DQogICAgDQogICAgLyoqDQogICAgICog6YOo5Lu26KGM5Li6LS11cGRhdGUNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgdXBkYXRlQWN0aW9uITogc3RyaW5nOw0KICAgIA0KICAgIC8qKg0KICAgICAqIOmDqOS7tuihjOS4ui0tcmVtb3ZlDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIHJlbW92ZUFjdGlvbiE6IHN0cmluZzsNCiAgICANCiAgICAvKioNCiAgICAgKiDpg6jku7booYzkuLotLWxvYWRkcmFmdA0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyBsb2FkZHJhZnRBY3Rpb24hOiBzdHJpbmc7DQogICAgDQogICAgLyoqDQogICAgICog6YOo5Lu26KGM5Li6LS1sb2FkDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIGxvYWRBY3Rpb24hOiBzdHJpbmc7DQogICAgDQogICAgLyoqDQogICAgICog6YOo5Lu26KGM5Li6LS1jcmVhdGUNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgY3JlYXRlQWN0aW9uITogc3RyaW5nOw0KDQogICAgLyoqDQogICAgICog6YOo5Lu26KGM5Li6LS1jcmVhdGUNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgc2VhcmNoQWN0aW9uITogc3RyaW5nOw0KDQogICAgLyoqDQogICAgICog6KeG5Zu+5qCH6K+GDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIHZpZXd0YWchOiBzdHJpbmc7DQoNCiAgICAvKioNCiAgICAgKiDooajljZXnirbmgIENCiAgICAgKg0KICAgICAqIEB0eXBlIHtTdWJqZWN0PGFueT59DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGZvcm1TdGF0ZTogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3QoKTsNCg0KICAgIC8qKg0KICAgICAqIOW/veeVpeihqOWNlemhueWAvOWPmOWMlg0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGlnbm9yZWZpZWxkdmFsdWVjaGFuZ2U6IGJvb2xlYW4gPSBmYWxzZTsNCg0KICAgIC8qKg0KICAgICAqIOaVsOaNruWPmOWMlg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHtTdWJqZWN0PGFueT59DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGRhdGFDaGFuZzogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3QoKTsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvueKtuaAgeS6i+S7tg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHsoU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkKX0NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZGF0YUNoYW5nRXZlbnQ6IFN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZDsNCg0KICAgIC8qKg0KICAgICAqIOWOn+Wni+aVsOaNrg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBvbGREYXRhOiBhbnkgPSB7fTsNCg0KICAgIC8qKg0KICAgICAqIOihqOWNleaVsOaNruWvueixoQ0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGRhdGE6IGFueSA9IHsNCiAgICAgICAgc3JmdXBkYXRlZGF0ZTogbnVsbCwNCiAgICAgICAgc3Jmb3Jpa2V5OiBudWxsLA0KICAgICAgICBzcmZrZXk6IG51bGwsDQogICAgICAgIHNyZm1ham9ydGV4dDogbnVsbCwNCiAgICAgICAgc3JmdGVtcG1vZGU6IG51bGwsDQogICAgICAgIHNyZnVmOiBudWxsLA0KICAgICAgICBzcmZkZWlkOiBudWxsLA0KICAgICAgICBzcmZzb3VyY2VrZXk6IG51bGwsDQogICAgICAgIHBpbXNlYXJjaG1vZGFsbmFtZTogbnVsbCwNCiAgICAgICAgY3JlYXRlbWFuOiBudWxsLA0KICAgICAgICBjcmVhdGVkYXRlOiBudWxsLA0KICAgICAgICB1cGRhdGVtYW46IG51bGwsDQogICAgICAgIHVwZGF0ZWRhdGU6IG51bGwsDQogICAgICAgIHBpbXNlYXJjaG1vZGFsaWQ6IG51bGwsDQogICAgICAgIHBpbXNlYXJjaG1vZGFsOm51bGwsDQogICAgfTsNCg0KICAgIC8qKg0KICAgICAgKiDlvZPliY3miafooYznmoTooYzkuLrpgLvovpENCiAgICAgICoNCiAgICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICAqLw0KICAgIHB1YmxpYyBjdXJyZW50QWN0aW9uOiBzdHJpbmcgPSAiIjsNCg0KICAgIC8qKg0KICAgICAgKiDlhbPns7vnlYzpnaLorqHmlbDlmagNCiAgICAgICoNCiAgICAgICogQHR5cGUge251bWJlcn0NCiAgICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICAqLw0KICAgIHB1YmxpYyBkcmNvdW50ZXI6IG51bWJlciA9IDA7DQoNCiAgICAvKioNCiAgICAgICog6ZyA6KaB562J5b6F5YWz57O755WM6Z2i5L+d5a2Y5pe277yM56ys5LiA5qyh6LCD55Soc2F2ZeWPguaVsOeahOWkh+S7vQ0KICAgICAgKg0KICAgICAgKiBAdHlwZSB7bnVtYmVyfQ0KICAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgICovDQogICAgcHVibGljIGRyc2F2ZW9wdDogYW55ID0ge307DQoNCiAgICAvKioNCiAgICAgICog6KGo5Y2V5L+d5a2Y5Zue6LCD5a2Y5YKo5a+56LGhDQogICAgICAqDQogICAgICAqIEB0eXBlIHthbnl9DQogICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAgKi8NCiAgICBwdWJsaWMgc2F2ZVN0YXRlOmFueSA7DQoNCiAgICAvKioNCiAgICAgKiDlsZ7mgKflgLzop4TliJkNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBydWxlczogYW55ID0gew0KICAgICAgICBzcmZ1cGRhdGVkYXRlOiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5pu05paw5pe26Ze0IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5pu05paw5pe26Ze0IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5pu05paw5pe26Ze0IOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmm7TmlrDml7bpl7Qg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgICAgIHNyZm9yaWtleTogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICBzcmZrZXk6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfnu4TlkIjmn6Xor6LmqKHniYjmoIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfnu4TlkIjmn6Xor6LmqKHniYjmoIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfnu4TlkIjmn6Xor6LmqKHniYjmoIfor4Yg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7hOWQiOafpeivouaooeeJiOagh+ivhiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgc3JmbWFqb3J0ZXh0OiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE5ZCI5p+l6K+i5qih54mI5ZCN56ewIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE5ZCI5p+l6K+i5qih54mI5ZCN56ewIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE5ZCI5p+l6K+i5qih54mI5ZCN56ewIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfnu4TlkIjmn6Xor6LmqKHniYjlkI3np7Ag5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgICAgIHNyZnRlbXBtb2RlOiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgICAgIHNyZnVmOiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgICAgIHNyZmRlaWQ6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgc3Jmc291cmNla2V5OiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgICAgIHBpbXNlYXJjaG1vZGFsbmFtZTogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7hOWQiOafpeivouaooeeJiOWQjeensCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7hOWQiOafpeivouaooeeJiOWQjeensCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7hOWQiOafpeivouaooeeJiOWQjeensCDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE5ZCI5p+l6K+i5qih54mI5ZCN56ewIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICBjcmVhdGVtYW46IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflu7rnq4vkurog5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflu7rnq4vkurog5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflu7rnq4vkurog5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+W7uueri+S6uiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgY3JlYXRlZGF0ZTogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+W7uueri+aXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+W7uueri+aXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+W7uueri+aXtumXtCDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5bu656uL5pe26Ze0IOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICB1cGRhdGVtYW46IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmm7TmlrDkurog5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmm7TmlrDkurog5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmm7TmlrDkurog5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+abtOaWsOS6uiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgdXBkYXRlZGF0ZTogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+abtOaWsOaXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+abtOaWsOaXtumXtCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+abtOaWsOaXtumXtCDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5pu05paw5pe26Ze0IOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICBwaW1zZWFyY2htb2RhbGlkOiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE5ZCI5p+l6K+i5qih54mI5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE5ZCI5p+l6K+i5qih54mI5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE5ZCI5p+l6K+i5qih54mI5qCH6K+GIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfnu4TlkIjmn6Xor6LmqKHniYjmoIfor4Yg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgfQ0KDQogICAgLyoqDQogICAgICog6K+m5oOF5qih5Z6L6ZuG5ZCIDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZGV0YWlsc01vZGVsOiBhbnkgPSB7DQogICAgICAgIGdyb3VwMTogbmV3IEZvcm1Hcm91cFBhbmVsTW9kZWwoeyBjYXB0aW9uOiAn57uE5ZCI5p+l6K+i5qih54mI5Z+65pys5L+h5oGvJywgZGV0YWlsVHlwZTogJ0dST1VQUEFORUwnLCBuYW1lOiAnZ3JvdXAxJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgdWlBY3Rpb25Hcm91cDogeyBjYXB0aW9uOiAnJywgbGFuZ2Jhc2U6ICdlbnRpdGllcy5waW1zZWFyY2htb2RhbC5tYWluX2Zvcm0nLCBleHRyYWN0TW9kZTogJ0lURU0nLCBkZXRhaWxzOiBbXSB9IH0pDQosIA0KICAgICAgICBmb3JtcGFnZTE6IG5ldyBGb3JtUGFnZU1vZGVsKHsgY2FwdGlvbjogJ+WfuuacrOS/oeaBrycsIGRldGFpbFR5cGU6ICdGT1JNUEFHRScsIG5hbWU6ICdmb3JtcGFnZTEnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzIH0pDQosIA0KICAgICAgICBncm91cDI6IG5ldyBGb3JtR3JvdXBQYW5lbE1vZGVsKHsgY2FwdGlvbjogJ+aTjeS9nOS/oeaBrycsIGRldGFpbFR5cGU6ICdHUk9VUFBBTkVMJywgbmFtZTogJ2dyb3VwMicsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIHVpQWN0aW9uR3JvdXA6IHsgY2FwdGlvbjogJycsIGxhbmdiYXNlOiAnZW50aXRpZXMucGltc2VhcmNobW9kYWwubWFpbl9mb3JtJywgZXh0cmFjdE1vZGU6ICdJVEVNJywgZGV0YWlsczogW10gfSB9KQ0KLCANCiAgICAgICAgZm9ybXBhZ2UyOiBuZXcgRm9ybVBhZ2VNb2RlbCh7IGNhcHRpb246ICflhbblroMnLCBkZXRhaWxUeXBlOiAnRk9STVBBR0UnLCBuYW1lOiAnZm9ybXBhZ2UyJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcyB9KQ0KLCANCiAgICAgICAgc3JmdXBkYXRlZGF0ZTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn5pu05paw5pe26Ze0JywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3NyZnVwZGF0ZWRhdGUnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHNyZm9yaWtleTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAnJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3NyZm9yaWtleScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgc3Jma2V5OiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICfnu4TlkIjmn6Xor6LmqKHniYjmoIfor4YnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnc3Jma2V5JywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBzcmZtYWpvcnRleHQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+e7hOWQiOafpeivouaooeeJiOWQjeensCcsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdzcmZtYWpvcnRleHQnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHNyZnRlbXBtb2RlOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICcnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnc3JmdGVtcG1vZGUnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHNyZnVmOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICcnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnc3JmdWYnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHNyZmRlaWQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJycsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdzcmZkZWlkJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBzcmZzb3VyY2VrZXk6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJycsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdzcmZzb3VyY2VrZXknLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHBpbXNlYXJjaG1vZGFsbmFtZTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn57uE5ZCI5p+l6K+i5qih54mI5ZCN56ewJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3BpbXNlYXJjaG1vZGFsbmFtZScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgY3JlYXRlbWFuOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICflu7rnq4vkuronLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnY3JlYXRlbWFuJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBjcmVhdGVkYXRlOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICflu7rnq4vml7bpl7QnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnY3JlYXRlZGF0ZScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgdXBkYXRlbWFuOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICfmm7TmlrDkuronLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAndXBkYXRlbWFuJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICB1cGRhdGVkYXRlOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICfmm7TmlrDml7bpl7QnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAndXBkYXRlZGF0ZScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgcGltc2VhcmNobW9kYWxpZDogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn57uE5ZCI5p+l6K+i5qih54mI5qCH6K+GJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3BpbXNlYXJjaG1vZGFsaWQnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIGZvcm06IG5ldyBGb3JtVGFiUGFuZWxNb2RlbCh7IGNhcHRpb246ICdmb3JtJywgZGV0YWlsVHlwZTogJ1RBQlBBTkVMJywgbmFtZTogJ2Zvcm0nLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCB0YWJQYWdlczogW3sgbmFtZTogJ2Zvcm1wYWdlMScsIGluZGV4OiAwLCB2aXNpYmxlOiB0cnVlIH0sIHsgbmFtZTogJ2Zvcm1wYWdlMicsIGluZGV4OiAxLCB2aXNpYmxlOiB0cnVlIH1dIH0pLA0KICAgIH07DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3JmdXBkYXRlZGF0ZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3JmdXBkYXRlZGF0ZScpDQogICAgb25TcmZ1cGRhdGVkYXRlQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ3NyZnVwZGF0ZWRhdGUnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZm9yaWtleSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3Jmb3Jpa2V5JykNCiAgICBvblNyZm9yaWtleUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdzcmZvcmlrZXknLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZmtleSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3Jma2V5JykNCiAgICBvblNyZmtleUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdzcmZrZXknLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZm1ham9ydGV4dCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3JmbWFqb3J0ZXh0JykNCiAgICBvblNyZm1ham9ydGV4dENoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdzcmZtYWpvcnRleHQnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZnRlbXBtb2RlIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5zcmZ0ZW1wbW9kZScpDQogICAgb25TcmZ0ZW1wbW9kZUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdzcmZ0ZW1wbW9kZScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3JmdWYg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgQFdhdGNoKCdkYXRhLnNyZnVmJykNCiAgICBvblNyZnVmQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ3NyZnVmJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZkZWlkIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5zcmZkZWlkJykNCiAgICBvblNyZmRlaWRDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnc3JmZGVpZCcsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3Jmc291cmNla2V5IOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5zcmZzb3VyY2VrZXknKQ0KICAgIG9uU3Jmc291cmNla2V5Q2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ3NyZnNvdXJjZWtleScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgcGltc2VhcmNobW9kYWxuYW1lIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5waW1zZWFyY2htb2RhbG5hbWUnKQ0KICAgIG9uUGltc2VhcmNobW9kYWxuYW1lQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ3BpbXNlYXJjaG1vZGFsbmFtZScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgY3JlYXRlbWFuIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5jcmVhdGVtYW4nKQ0KICAgIG9uQ3JlYXRlbWFuQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ2NyZWF0ZW1hbicsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgY3JlYXRlZGF0ZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuY3JlYXRlZGF0ZScpDQogICAgb25DcmVhdGVkYXRlQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ2NyZWF0ZWRhdGUnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHVwZGF0ZW1hbiDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEudXBkYXRlbWFuJykNCiAgICBvblVwZGF0ZW1hbkNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICd1cGRhdGVtYW4nLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHVwZGF0ZWRhdGUg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgQFdhdGNoKCdkYXRhLnVwZGF0ZWRhdGUnKQ0KICAgIG9uVXBkYXRlZGF0ZUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICd1cGRhdGVkYXRlJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBwaW1zZWFyY2htb2RhbGlkIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5waW1zZWFyY2htb2RhbGlkJykNCiAgICBvblBpbXNlYXJjaG1vZGFsaWRDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAncGltc2VhcmNobW9kYWxpZCcsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIOmHjee9ruihqOWNlemhueWAvA0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9fSB7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH0NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgcmVzZXRGb3JtRGF0YSh7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH06IHsgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfSk6IHZvaWQgew0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgKiDnva7nqbrlr7nosaENCiAgICAgICoNCiAgICAgICogQHBhcmFtIHthbnlbXX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAgKi8NCiAgICBwdWJsaWMgUmVzZXREYXRhKF9kYXRhczphbnkpew0KICAgICAgICBpZihPYmplY3Qua2V5cyhfZGF0YXMpLmxlbmd0aCA+MCl7DQogICAgICAgICAgICBPYmplY3Qua2V5cyhfZGF0YXMpLmZvckVhY2goKG5hbWU6IHN0cmluZykgPT4gew0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkobmFtZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhW25hbWVdID0gbnVsbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOihqOWNlemAu+i+kQ0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9fSB7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH0NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZm9ybUxvZ2ljKHsgbmFtZSwgbmV3VmFsLCBvbGRWYWwgfTogeyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9KTogdm9pZCB7DQogICAgICAgICAgICAgICAgDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQogICAgfQ0KDQogICAgLyoqDQogICAgICog6KGo5Y2V5YC85Y+Y5YyWDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHt7IG5hbWU6IHN0cmluZywgbmV3VmFsOiBhbnksIG9sZFZhbDogYW55IH19IHsgbmFtZSwgbmV3VmFsLCBvbGRWYWwgfQ0KICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmb3JtRGF0YUNoYW5nZSh7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH06IHsgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfSk6IHZvaWQgew0KICAgICAgICBpZiAodGhpcy5pZ25vcmVmaWVsZHZhbHVlY2hhbmdlKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5yZXNldEZvcm1EYXRhKHsgbmFtZTogbmFtZSwgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgICAgICB0aGlzLmZvcm1Mb2dpYyh7IG5hbWU6IG5hbWUsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICAgICAgdGhpcy5kYXRhQ2hhbmcubmV4dChKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDooajljZXliqDovb3lrozmiJANCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPXt9XQ0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYWN0aW9uXQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBvbkZvcm1Mb2FkKGRhdGE6IGFueSA9IHt9LGFjdGlvbjpzdHJpbmcpOiB2b2lkIHsNCiAgICAgICAgaWYoT2JqZWN0LmlzKGFjdGlvbiwic2F2ZSIpIHx8IE9iamVjdC5pcyhhY3Rpb24sImF1dG9TYXZlIikgfHwgT2JqZWN0LmlzKGFjdGlvbiwic3VibWl0IikpDQogICAgICAgIC8vIOabtOaWsGNvbnRleHTnmoTlrp7kvZPkuLvplK4NCiAgICAgICAgaWYoZGF0YS5waW1zZWFyY2htb2RhbCl7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuY29udGV4dCx7cGltc2VhcmNobW9kYWw6ZGF0YS5waW1zZWFyY2htb2RhbH0pDQogICAgICAgIH0NCiAgICAgICAgdGhpcy5zZXRGb3JtRW5hYmxlQ29uZChkYXRhKTsNCiAgICAgICAgdGhpcy5maWxsRm9ybShkYXRhLGFjdGlvbik7DQogICAgICAgIHRoaXMub2xkRGF0YSA9IHt9Ow0KICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMub2xkRGF0YSwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKSk7DQogICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgndmlld2FjdGlvbi9zZXRWaWV3RGF0YUNoYW5nZScsIHsgdmlld3RhZzogdGhpcy52aWV3dGFnLCB2aWV3ZGF0YWNoYW5nZTogZmFsc2UgfSk7DQogICAgICAgIHRoaXMuZm9ybUxvZ2ljKHsgbmFtZTogJycsIG5ld1ZhbDogbnVsbCwgb2xkVmFsOiBudWxsIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWAvOWhq+WFhQ0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbX2RhdGFzPXt9XQ0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYWN0aW9uXQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmaWxsRm9ybShfZGF0YXM6IGFueSA9IHt9LGFjdGlvbjpzdHJpbmcpOiB2b2lkIHsNCiAgICAgICAgdGhpcy5pZ25vcmVmaWVsZHZhbHVlY2hhbmdlID0gdHJ1ZTsNCiAgICAgICAgT2JqZWN0LmtleXMoX2RhdGFzKS5mb3JFYWNoKChuYW1lOiBzdHJpbmcpID0+IHsNCiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkobmFtZSkpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmRhdGFbbmFtZV0gPSBfZGF0YXNbbmFtZV07DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgICAgICBpZihPYmplY3QuaXMoYWN0aW9uLCdsb2FkRHJhZnQnKSl7DQogICAgICAgICAgICB0aGlzLmNyZWF0ZURlZmF1bHQoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZihPYmplY3QuaXMoYWN0aW9uLCdsb2FkJykpew0KICAgICAgICAgICAgdGhpcy51cGRhdGVEZWZhdWx0KCk7DQogICAgICAgIH0NCiAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgdGhpcy5pZ25vcmVmaWVsZHZhbHVlY2hhbmdlID0gZmFsc2U7DQogICAgICAgIH0pDQogICAgfQ0KDQogICAgLyoqDQogICAgICog6K6+572u6KGo5Y2V6aG55piv5ZCm5ZCv55SoDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHsqfSBkYXRhDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIHNldEZvcm1FbmFibGVDb25kKGRhdGE6IGFueSk6IHZvaWQgew0KICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuZGV0YWlsc01vZGVsKS5mb3JFYWNoKChkZXRhaWw6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYgKCFPYmplY3QuaXMoZGV0YWlsLmRldGFpbFR5cGUsICdGT1JNSVRFTScpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgZm9ybUl0ZW06IEZvcm1JdGVtTW9kZWwgPSBkZXRhaWw7DQogICAgICAgICAgICBmb3JtSXRlbS5zZXRFbmFibGVDb25kKGRhdGEuc3JmdWYpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDph43nva7ojYnnqL/ooajljZXnirbmgIENCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgcmVzZXREcmFmdEZvcm1TdGF0ZXMoKTogdm9pZCB7DQogICAgICAgIGNvbnN0IGZvcm06IGFueSA9IHRoaXMuJHJlZnMuZm9ybTsNCiAgICAgICAgaWYgKGZvcm0pIHsNCiAgICAgICAgICAgIGZvcm0ucmVzZXRGaWVsZHMoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmHjee9ruagoemqjOe7k+aenA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIHJlc2V0VmFsaWRhdGVzKCk6IHZvaWQgew0KICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuZGV0YWlsc01vZGVsKS5mb3JFYWNoKChkZXRhaWw6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYgKCFPYmplY3QuaXMoZGV0YWlsLmRldGFpbFR5cGUsICdGT1JNSVRFTScpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgZm9ybUl0ZW06IEZvcm1JdGVtTW9kZWwgPSBkZXRhaWw7DQogICAgICAgICAgICBmb3JtSXRlbS5zZXRFcnJvcignJyk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWhq+WFheagoemqjOe7k+aenCDvvIjlkI7lj7DvvIkNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGZpZWxkRXJyb3JzDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGZpbGxWYWxpZGF0ZXMoZmllbGRFcnJvcnM6IGFueVtdKTogdm9pZCB7DQogICAgICAgIGZpZWxkRXJyb3JzLmZvckVhY2goKGVycm9yOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IGZvcm1JdGVtOiBGb3JtSXRlbU1vZGVsID0gdGhpcy5kZXRhaWxzTW9kZWxbZXJyb3IuZmllbGRdOw0KICAgICAgICAgICAgaWYgKCFmb3JtSXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgICAgICBmb3JtSXRlbS5zZXRFcnJvcihlcnJvci5tZXNzYWdlKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDooajljZXmoKHpqoznirbmgIENCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHtib29sZWFufSANCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZm9ybVZhbGlkYXRlU3RhdHVzKCk6IGJvb2xlYW4gew0KICAgICAgICBjb25zdCBmb3JtOiBhbnkgPSB0aGlzLiRyZWZzLmZvcm07DQogICAgICAgIGxldCB2YWxpZGF0ZXN0YXRlOiBib29sZWFuID0gdHJ1ZTsNCiAgICAgICAgZm9ybS52YWxpZGF0ZSgodmFsaWQ6IGJvb2xlYW4pID0+IHsNCiAgICAgICAgICAgIHZhbGlkYXRlc3RhdGUgPSB2YWxpZCA/IHRydWUgOiBmYWxzZTsNCiAgICAgICAgfSk7DQogICAgICAgIHJldHVybiB2YWxpZGF0ZXN0YXRlDQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+W5YWo6YOo5YC8DQogICAgICoNCiAgICAgKiBAcmV0dXJucyB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZ2V0VmFsdWVzKCk6IGFueSB7DQogICAgICAgIHJldHVybiB0aGlzLmRhdGE7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6KGo5Y2V6aG55YC85Y+Y5pu0DQogICAgICoNCiAgICAgKiBAcGFyYW0ge3sgbmFtZTogc3RyaW5nLCB2YWx1ZTogYW55IH19ICRldmVudA0KICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBvbkZvcm1JdGVtVmFsdWVDaGFuZ2UoJGV2ZW50OiB7IG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSB9KTogdm9pZCB7DQogICAgICAgIGlmICghJGV2ZW50KSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYgKCEkZXZlbnQubmFtZSB8fCBPYmplY3QuaXMoJGV2ZW50Lm5hbWUsICcnKSB8fCAhdGhpcy5kYXRhLmhhc093blByb3BlcnR5KCRldmVudC5uYW1lKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIHRoaXMuZGF0YVskZXZlbnQubmFtZV0gPSAkZXZlbnQudmFsdWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6K6+572u5pWw5o2u6aG55YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZQ0KICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUNCiAgICAgKiBAcmV0dXJucyB7dm9pZH0NCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgc2V0RGF0YUl0ZW1WYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHsNCiAgICAgICAgaWYgKCFuYW1lIHx8IE9iamVjdC5pcyhuYW1lLCAnJykgfHwgIXRoaXMuZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXModGhpcy5kYXRhW25hbWVdLCB2YWx1ZSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLmRhdGFbbmFtZV0gPSB2YWx1ZTsNCiAgICB9DQoNCg0KDQogICAgLyoqDQogICAgICog5YiG57uE55WM6Z2i6KGM5Li65LqL5Lu2DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9ICRldmVudA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBncm91cFVJQWN0aW9uQ2xpY2soJGV2ZW50OiBhbnkpOiB2b2lkIHsNCiAgICAgICAgaWYgKCEkZXZlbnQpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBpdGVtOmFueSA9ICRldmVudC5pdGVtOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFZ1ZeWjsOaYjuWRqOacnyjlpITnkIbnu4Tku7bnmoTovpPlhaXlsZ7mgKcpDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY3JlYXRlZCgpOiB2b2lkIHsNCiAgICAgICAgdGhpcy5hZnRlckNyZWF0ZWQoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmiafooYxjcmVhdGVk5ZCO55qE6YC76L6RDQogICAgICoNCiAgICAgKiAgQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovICAgIA0KICAgIHB1YmxpYyBhZnRlckNyZWF0ZWQoKXsNCiAgICAgICAgaWYgKHRoaXMudmlld1N0YXRlKSB7DQogICAgICAgICAgICB0aGlzLnZpZXdTdGF0ZUV2ZW50ID0gdGhpcy52aWV3U3RhdGUuc3Vic2NyaWJlKCh7IHRhZywgYWN0aW9uLCBkYXRhIH0pID0+IHsNCiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5pcyh0YWcsIHRoaXMubmFtZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdhdXRvbG9hZCcsIGFjdGlvbikpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRvTG9hZChkYXRhKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnbG9hZCcsIGFjdGlvbikpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkKGRhdGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdsb2FkZHJhZnQnLCBhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuY29udGV4dC5zcmZzb3VyY2VrZXkpew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3B5KHRoaXMuY29udGV4dC5zcmZzb3VyY2VrZXkpOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZERyYWZ0KGRhdGEpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3NhdmUnLCBhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZShkYXRhLGRhdGEuc2hvd1Jlc3VsdEluZm8pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdyZW1vdmUnLCBhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKGRhdGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdzYXZlYW5kZXhpdCcsIGFjdGlvbikpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlQW5kRXhpdChkYXRhKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnc2F2ZWFuZG5ldycsIGFjdGlvbikpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlQW5kTmV3KGRhdGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdyZW1vdmVhbmRleGl0JywgYWN0aW9uKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFuZEV4aXQoZGF0YSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3JlZnJlc2gnLCBhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaChkYXRhKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLmRhdGFDaGFuZw0KICAgICAgICAgICAgLnBpcGUoDQogICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lKDMwMCksDQogICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKQ0KICAgICAgICAgICAgKS5zdWJzY3JpYmUoKGRhdGE6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9zYXZlKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0b1NhdmUoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSAhT2JqZWN0LmlzKEpTT04uc3RyaW5naWZ5KHRoaXMub2xkRGF0YSksIEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpID8gdHJ1ZSA6IGZhbHNlOw0KICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgndmlld2FjdGlvbi9zZXRWaWV3RGF0YUNoYW5nZScsIHsgdmlld3RhZzogdGhpcy52aWV3dGFnLCB2aWV3ZGF0YWNoYW5nZTogc3RhdGUgfSk7DQogICAgICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiB2dWUg55Sf5ZG95ZGo5pyfDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZGVzdHJveWVkKCkgew0KICAgICAgICB0aGlzLmFmdGVyRGVzdHJveSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaJp+ihjGRlc3Ryb3llZOWQjueahOmAu+i+kQ0KICAgICAqDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGFmdGVyRGVzdHJveSgpIHsNCiAgICAgICAgaWYgKHRoaXMudmlld1N0YXRlRXZlbnQpIHsNCiAgICAgICAgICAgIHRoaXMudmlld1N0YXRlRXZlbnQudW5zdWJzY3JpYmUoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAodGhpcy5kYXRhQ2hhbmdFdmVudCkgew0KICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbmdFdmVudC51bnN1YnNjcmliZSgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5ou36LSd5YaF5a65DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFthcmc9e31dDQogICAgICogQG1lbWJlcm9mIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBjb3B5KHNyZmtleTogc3RyaW5nKTogdm9pZCB7DQogICAgICAgIGxldCBjb3B5RGF0YSA9IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0Q29weURhdGEoc3Jma2V5KTsNCiAgICAgICAgY29weURhdGEuc3Jma2V5ID0gVXRpbC5jcmVhdGVVVUlEKCk7DQogICAgICAgIGNvcHlEYXRhLnBpbXNlYXJjaG1vZGFsID0gY29weURhdGEuc3Jma2V5Ow0KICAgICAgICBjb3B5RGF0YS5waW1zZWFyY2htb2RhbGlkID0gY29weURhdGEuc3Jma2V5Ow0KICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuY29udGV4dCx7cGltc2VhcmNobW9kYWw6Y29weURhdGEucGltc2VhcmNobW9kYWx9KQ0KICAgICAgICB0aGlzLmRhdGEgPSBjb3B5RGF0YTsNCiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICAgIHRoaXMuZm9ybVN0YXRlLm5leHQoeyB0eXBlOiAnbG9hZCcsIGRhdGE6IGNvcHlEYXRhIH0pOw0KICAgICAgICAgIHRoaXMuZGF0YS5zcmZ1ZiA9ICcwJzsNCiAgICAgICAgICB0aGlzLnNldEZvcm1FbmFibGVDb25kKHRoaXMuZGF0YSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAq5omT5Y2wDQogICAgICpAbWVtYmVyb2YgQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIHByaW50KCl7DQogICAgICAgIGxldCBfdGhpczphbnkgPSB0aGlzOw0KICAgICAgICBfdGhpcy4kcHJpbnQoe2lkOidwaW1zZWFyY2htb2RhbF9tYWluJyxwb3BUaXRsZTon5Li757yW6L6R6KGo5Y2VJ30pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmDqOS7tuWIt+aWsA0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyByZWZyZXNoKGFyZ3M6IGFueVtdKTogdm9pZCB7DQogICAgICAgIGxldCBhcmc6IGFueSA9IHt9Ow0KICAgICAgICBPYmplY3QuYXNzaWduKGFyZyxhcmdzWzBdKTsNCiAgICAgICAgaWYgKHRoaXMuZGF0YS5zcmZrZXkgJiYgIU9iamVjdC5pcyh0aGlzLmRhdGEuc3Jma2V5LCAnJykpIHsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7IHNyZmtleTogdGhpcy5kYXRhLnNyZmtleSB9KTsNCiAgICAgICAgICAgIHRoaXMubG9hZChhcmcpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmICh0aGlzLmRhdGEuc3Jma2V5cyAmJiAhT2JqZWN0LmlzKHRoaXMuZGF0YS5zcmZrZXlzLCAnJykpIHsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7IHNyZmtleTogdGhpcy5kYXRhLnNyZmtleXMgfSk7DQogICAgICAgICAgICB0aGlzLmxvYWQoYXJnKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiHquWKqOWKoOi9vQ0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJnPXt9XQ0KICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBhdXRvTG9hZChhcmc6IGFueSA9IHt9KTogdm9pZCB7DQogICAgICAgIGlmIChhcmcuc3Jma2V5ICYmICFPYmplY3QuaXMoYXJnLnNyZmtleSwgJycpKSB7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgeyBzcmZrZXk6IGFyZy5zcmZrZXkgfSk7DQogICAgICAgICAgICB0aGlzLmxvYWQoYXJnKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoYXJnLnNyZmtleXMgJiYgIU9iamVjdC5pcyhhcmcuc3Jma2V5cywgJycpKSB7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgeyBzcmZrZXk6IGFyZy5zcmZrZXlzIH0pOw0KICAgICAgICAgICAgdGhpcy5sb2FkKGFyZyk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5sb2FkRHJhZnQoYXJnKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliqDovb0NCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0geyp9IFtvcHQ9e31dDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGxvYWQob3B0OiBhbnkgPSB7fSk6IHZvaWQgew0KICAgICAgICBpZighdGhpcy5sb2FkQWN0aW9uKXsNCiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ1BpbVNlYXJjaE1vZGFsRWRpdFZpZXfop4blm77ooajljZVsb2FkQWN0aW9u5Y+C5pWw5pyq6YWN572uJyB9KTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBhcmc6IGFueSA9IHsgLi4ub3B0IH07DQogICAgICAgIGxldCB2aWV3cGFyYW1SZXN1bHQ6YW55ID0gT2JqZWN0LmFzc2lnbihhcmcsdGhpcy52aWV3cGFyYW1zKTsNCiAgICAgICAgY29uc3QgZ2V0OiBQcm9taXNlPGFueT4gPSB0aGlzLnNlcnZpY2UuZ2V0KHRoaXMubG9hZEFjdGlvbixKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLHt2aWV3cGFyYW1zOnZpZXdwYXJhbVJlc3VsdH0sIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpOw0KICAgICAgICBnZXQudGhlbigocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7DQogICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7DQogICAgICAgICAgICAgICAgdGhpcy5vbkZvcm1Mb2FkKGRhdGEsJ2xvYWQnKTsNCiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdsb2FkJywgZGF0YSk7DQogICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1TdGF0ZS5uZXh0KHsgdHlwZTogJ2xvYWQnLCBkYXRhOiBkYXRhIH0pOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWKoOi9veiNieeovw0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBsb2FkRHJhZnQob3B0OiBhbnkgPSB7fSk6IHZvaWQgew0KICAgICAgICBpZighdGhpcy5sb2FkZHJhZnRBY3Rpb24pew0KICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAnUGltU2VhcmNoTW9kYWxFZGl0Vmlld+inhuWbvuihqOWNlWxvYWRkcmFmdEFjdGlvbuWPguaVsOacqumFjee9ricgfSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgYXJnOiBhbnkgPSB7IC4uLm9wdCB9IDsNCiAgICAgICAgbGV0IHZpZXdwYXJhbVJlc3VsdDphbnkgPSBPYmplY3QuYXNzaWduKGFyZyx0aGlzLnZpZXdwYXJhbXMpOw0KICAgICAgICBsZXQgcG9zdDogUHJvbWlzZTxhbnk+ID0gdGhpcy5zZXJ2aWNlLmxvYWREcmFmdCh0aGlzLmxvYWRkcmFmdEFjdGlvbixKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLHt2aWV3cGFyYW1zOnZpZXdwYXJhbVJlc3VsdH0sIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpOw0KICAgICAgICBwb3N0LnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7DQogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7DQogICAgICAgICAgICBpZihkYXRhLnBpbXNlYXJjaG1vZGFsKXsNCiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuY29udGV4dCx7cGltc2VhcmNobW9kYWw6ZGF0YS5waW1zZWFyY2htb2RhbH0pDQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLnJlc2V0RHJhZnRGb3JtU3RhdGVzKCk7DQogICAgICAgICAgICB0aGlzLm9uRm9ybUxvYWQoZGF0YSwnbG9hZERyYWZ0Jyk7DQogICAgICAgICAgICB0aGlzLiRlbWl0KCdsb2FkJywgZGF0YSk7DQogICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgICAgICAgdGhpcy5mb3JtU3RhdGUubmV4dCh7IHR5cGU6ICdsb2FkJywgZGF0YTogZGF0YSB9KTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7DQogICAgICAgICAgICAgICAgY29uc3QgZm9ybTogYW55ID0gdGhpcy4kcmVmcy5mb3JtOw0KICAgICAgICAgICAgICAgIGlmIChmb3JtKSB7DQogICAgICAgICAgICAgICAgICAgIGZvcm0uZmllbGRzLmZvckVhY2goKGZpZWxkOiBhbnkpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnZhbGlkYXRlTWVzc2FnZSA9ICIiOw0KICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQudmFsaWRhdGVTdGF0ZSA9ICIiOw0KICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQudmFsaWRhdGVTdGF0dXMgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICAmJiByZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiHquWKqOS/neWtmA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQ0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBhdXRvU2F2ZShvcHQ6IGFueSA9IHt9KTogdm9pZCB7DQogICAgICAgIGlmICghdGhpcy5mb3JtVmFsaWRhdGVTdGF0dXMoKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IGFyZzogYW55ID0geyAuLi5vcHQgfTsNCiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0VmFsdWVzKCk7DQogICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCBkYXRhKTsNCiAgICAgICAgY29uc3QgYWN0aW9uOiBhbnkgPSBPYmplY3QuaXMoZGF0YS5zcmZ1ZiwgJzEnKSA/IHRoaXMudXBkYXRlQWN0aW9uIDogdGhpcy5jcmVhdGVBY3Rpb247DQogICAgICAgIGlmKCFhY3Rpb24pew0KICAgICAgICAgICAgbGV0IGFjdGlvbk5hbWU6YW55ID0gT2JqZWN0LmlzKGRhdGEuc3JmdWYsICcxJyk/InVwZGF0ZUFjdGlvbiI6ImNyZWF0ZUFjdGlvbiI7DQogICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICdQaW1TZWFyY2hNb2RhbEVkaXRWaWV36KeG5Zu+6KGo5Y2VJythY3Rpb25OYW1lKyflj4LmlbDmnKrphY3nva4nIH0pOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLHt2aWV3cGFyYW1zOnRoaXMudmlld3BhcmFtc30pOw0KICAgICAgICBjb25zdCBwb3N0OiBQcm9taXNlPGFueT4gPSB0aGlzLnNlcnZpY2UuYWRkKGFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSxhcmcsIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpOw0KICAgICAgICBwb3N0LnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7DQogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7DQogICAgICAgICAgICB0aGlzLm9uRm9ybUxvYWQoZGF0YSwnYXV0b1NhdmUnKTsNCiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NhdmUnLCBkYXRhKTsNCiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCd2aWV3YWN0aW9uL2RhdGFzYXZlZCcsIHsgdmlld3RhZzogdGhpcy52aWV3dGFnIH0pOw0KICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICAgICAgICAgIHRoaXMuZm9ybVN0YXRlLm5leHQoeyB0eXBlOiAnc2F2ZScsIGRhdGE6IGRhdGEgfSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSkuY2F0Y2goKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ezu+e7n+W8guW4uCcgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkv53lrZgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW29wdD17fV0NCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG93UmVzdWx0SW5mb10gDQogICAgICogQHBhcmFtIHtib29sZWFufSBbaWZTdGF0ZU5leHRdIGZvcm1TdGF0ZeaYr+WQpuS4i+WPkemAmuefpQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGFzeW5jIHNhdmUob3B0OiBhbnkgPSB7fSwgc2hvd1Jlc3VsdEluZm8/OiBib29sZWFuLCBpZlN0YXRlTmV4dDogYm9vbGVhbiA9IHRydWUpOiBQcm9taXNlPGFueT4gew0KICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHsNCiAgICAgICAgICAgIHNob3dSZXN1bHRJbmZvID0gc2hvd1Jlc3VsdEluZm8gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTsNCiAgICAgICAgICAgIGlmICghdGhpcy5mb3JtVmFsaWRhdGVTdGF0dXMoKSkgew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+WAvOinhOWImeagoemqjOW8guW4uCcgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgYXJnOiBhbnkgPSB7IC4uLm9wdCB9Ow0KICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0VmFsdWVzKCk7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgZGF0YSk7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgdGhpcy5jb250ZXh0KTsNCiAgICAgICAgICAgIGlmIChpZlN0YXRlTmV4dCkgew0KICAgICAgICAgICAgICAgIHRoaXMuZHJjb3VudGVyID0gMDsNCiAgICAgICAgICAgICAgICBpZih0aGlzLmRyY291bnRlciAhPT0gMCl7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZHJzYXZlb3B0ID0gb3B0Ow0KICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1TdGF0ZS5uZXh0KHsgdHlwZTogJ2JlZm9yZXNhdmUnLCBkYXRhOiBhcmcgfSk7Ly/lhYjpgJrnn6XlhbPns7vnlYzpnaLkv53lrZgNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlU3RhdGUgPSByZXNvbHZlOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgYWN0aW9uOiBhbnkgPSBPYmplY3QuaXMoZGF0YS5zcmZ1ZiwgJzEnKSA/IHRoaXMudXBkYXRlQWN0aW9uIDogdGhpcy5jcmVhdGVBY3Rpb247DQogICAgICAgICAgICBpZighYWN0aW9uKXsNCiAgICAgICAgICAgICAgICBsZXQgYWN0aW9uTmFtZTphbnkgPSBPYmplY3QuaXMoZGF0YS5zcmZ1ZiwgJzEnKT8idXBkYXRlQWN0aW9uIjoiY3JlYXRlQWN0aW9uIjsNCiAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICdQaW1TZWFyY2hNb2RhbEVkaXRWaWV36KeG5Zu+6KGo5Y2VJythY3Rpb25OYW1lKyflj4LmlbDmnKrphY3nva4nIH0pOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLHt2aWV3cGFyYW1zOnRoaXMudmlld3BhcmFtc30pOw0KICAgICAgICAgICAgY29uc3QgcG9zdDogUHJvbWlzZTxhbnk+ID0gT2JqZWN0LmlzKGRhdGEuc3JmdWYsICcxJyk/dGhpcy5zZXJ2aWNlLnVwZGF0ZShhY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksYXJnLCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTp0aGlzLnNlcnZpY2UuYWRkKGFjdGlvbixKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcik7DQogICAgICAgICAgICBwb3N0LnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgew0KICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhOw0KICAgICAgICAgICAgICAgIHRoaXMub25Gb3JtTG9hZChkYXRhLCdzYXZlJyk7DQogICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2F2ZScsIGRhdGEpOw0KICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCd2aWV3YWN0aW9uL2RhdGFzYXZlZCcsIHsgdmlld3RhZzogdGhpcy52aWV3dGFnIH0pOw0KICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtU3RhdGUubmV4dCh7IHR5cGU6ICdzYXZlJywgZGF0YTogZGF0YSB9KTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICBpZiAoc2hvd1Jlc3VsdEluZm8pIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLnN1Y2Nlc3MoeyB0aXRsZTogJycsIGRlc2M6IChkYXRhLnNyZm1ham9ydGV4dCA/IGRhdGEuc3JmbWFqb3J0ZXh0IDogJycpICsgJyZuYnNwO+S/neWtmOaIkOWKn++8gScgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpOw0KICAgICAgICAgICAgfSkuY2F0Y2goKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICAmJiByZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICfns7vnu5/lvILluLgnIH0pOw0KICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSkNCiAgICB9DQoNCiAgICAvKioNCiAgICAqIOWIoOmZpA0KICAgICoNCiAgICAqIEBwdWJsaWMNCiAgICAqIEBwYXJhbSB7Kn0gW29wdD17fV0NCiAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICovDQogICAgcHVibGljIHJlbW92ZShvcHQ6QXJyYXk8YW55PiA9IFtdLHNob3dSZXN1bHRJbmZvPzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7DQogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYoIXRoaXMucmVtb3ZlQWN0aW9uKXsNCiAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICdQaW1TZWFyY2hNb2RhbEVkaXRWaWV36KeG5Zu+6KGo5Y2VcmVtb3ZlQWN0aW9u5Y+C5pWw5pyq6YWN572uJyB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb25zdCBhcmc6IGFueSA9IG9wdFswXTsNCiAgICAgICAgICAgIGNvbnN0IF90aGlzOiBhbnkgPSB0aGlzOw0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcse3ZpZXdwYXJhbXM6dGhpcy52aWV3cGFyYW1zfSk7DQogICAgICAgICAgICB0aGlzLnNlcnZpY2UuZGVsZXRlKF90aGlzLnJlbW92ZUFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSxhcmcsIHNob3dSZXN1bHRJbmZvKS50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdyZW1vdmUnLGRhdGEpOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1TdGF0ZS5uZXh0KHsgdHlwZTogJ3JlbW92ZScsIGRhdGE6IGRhdGEgfSk7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pc21vZGlmeSA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2Uuc3VjY2Vzcyh7IHRpdGxlOiAnJywgZGVzYzogKGRhdGEuc3JmbWFqb3J0ZXh0ID8gZGF0YS5zcmZtYWpvcnRleHQgOiAnJykgKyAnJm5ic3A75Yig6Zmk5oiQ5Yqf77yBJyB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yOiBhbnkpID0+IHsNCiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGE6IF9kYXRhIH0gPSBlcnJvcjsNCiAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogX2RhdGEudGl0bGUsIGRlc2M6IF9kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlt6XkvZzmtYHlkK/liqgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgICogQHBhcmFtIHsqfSBbbG9jYWxkYXRhPXt9XQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGFzeW5jIHdmc3RhcnQoZGF0YTogYW55LGxvY2FsZGF0YT86YW55KTogUHJvbWlzZTxhbnk+IHsNCiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PiB7DQogICAgICAgICAgICBjb25zdCBfdGhpczogYW55ID0gdGhpczsNCiAgICAgICAgICAgIGNvbnN0IHBvc3Q6IFByb21pc2U8YW55PiA9IF90aGlzLnNhdmUoe30sZmFsc2UpOw0KICAgICAgICAgICAgcG9zdC50aGVuKChyZXNwb25zZTphbnkpID0+ew0KICAgICAgICAgICAgICAgIGNvbnN0IGFyZzphbnkgPSByZXNwb25zZS5kYXRhOw0KICAgICAgICAgICAgICAgIGlmKHRoaXMudmlld3BhcmFtcyl7DQogICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLHt2aWV3cGFyYW1zOnRoaXMudmlld3BhcmFtc30pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQ6IFByb21pc2U8YW55PiA9IHRoaXMuc2VydmljZS53ZnN0YXJ0KF90aGlzLldGU3RhcnRBY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksYXJnLCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yLGxvY2FsZGF0YSk7DQogICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVzcG9uc2UuZGF0YSl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICcnLCBkZXNjOiAn5bel5L2c5rWB5ZCv5Yqo5aSx6LSlLCAnICsgcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5pbmZvKHsgdGl0bGU6ICcnLCBkZXNjOiAn5bel5L2c5rWB5ZCv5Yqo5oiQ5YqfJyB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7DQogICAgICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZSB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ezu+e7n+W8guW4uCcgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7DQogICAgICAgICAgICB9KQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlt6XkvZzmtYHmj5DkuqQNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dDQogICAgICogQHBhcmFtIHsqfSBbbG9jYWxkYXRhPXt9XQ0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIGFzeW5jIHdmc3VibWl0KGRhdGE6IGFueSxsb2NhbGRhdGE/OmFueSk6IFByb21pc2U8YW55PiB7DQogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4gew0KICAgICAgICBjb25zdCBfdGhpczogYW55ID0gdGhpczsNCiAgICAgICAgY29uc3QgYXJnOiBhbnkgPSBkYXRhWzBdOw0KICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsNCiAgICAgICAgaWYgKCFhcmcucGltc2VhcmNobW9kYWwgfHwgT2JqZWN0LmlzKGFyZy5waW1zZWFyY2htb2RhbCwgJycpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgcG9zdDogUHJvbWlzZTxhbnk+ID0gT2JqZWN0LmlzKGFyZy5zcmZ1ZiwgJzEnKT90aGlzLnNlcnZpY2UudXBkYXRlKHRoaXMudXBkYXRlQWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcik6dGhpcy5zZXJ2aWNlLmFkZCh0aGlzLmNyZWF0ZUFjdGlvbixKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcik7DQogICAgICAgIHBvc3QudGhlbigocmVzcG9uc2U6YW55KSA9PnsNCiAgICAgICAgICAgICAgICBjb25zdCBhcmc6YW55ID0gcmVzcG9uc2UuZGF0YTsNCiAgICAgICAgICAgICAgICAvLyDkv53lrZjlrozmiJBVSeWkhOeQhg0KICAgICAgICAgICAgICAgIHRoaXMub25Gb3JtTG9hZChhcmcsJ3NhdmUnKTsNCiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdzYXZlJywgYXJnKTsNCiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVN0YXRlLm5leHQoeyB0eXBlOiAnc2F2ZScsIGRhdGE6IGFyZyB9KTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAvLyDlh4blpIfmj5DkuqTlj4LmlbANCiAgICAgICAgICAgICAgICBpZih0aGlzLnZpZXdwYXJhbXMpew0KICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8g5by65Yi26KGl5YWFc3Jmd2ZtZW1vDQogICAgICAgICAgICAgICAgaWYodGhpcy5zcmZ3Zm1lbW8pew0KICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7c3Jmd2ZtZW1vOnRoaXMuc3Jmd2ZtZW1vfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUHJvbWlzZTxhbnk+ID0gdGhpcy5zZXJ2aWNlLndmc3VibWl0KF90aGlzLldGU3VibWl0QWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcixsb2NhbGRhdGEpOw0KICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAnJywgZGVzYzogJ+W3peS9nOa1geaPkOS6pOWksei0pSwgJyArIHJlc3BvbnNlLmRhdGEubWVzc2FnZSB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRm9ybUxvYWQoYXJnLCdzdWJtaXQnKTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3ZpZXdhY3Rpb24vZGF0YXNhdmVkJywgeyB2aWV3dGFnOiB0aGlzLnZpZXd0YWcgfSk7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5pbmZvKHsgdGl0bGU6ICcnLCBkZXNjOiAn5bel5L2c5rWB5o+Q5Lqk5oiQ5YqfJyB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7DQogICAgICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZSB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ezu+e7n+W8guW4uCcgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7DQogICAgICAgICAgICB9KQ0KICAgICAgICB9KQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOihqOWNlemhueabtOaWsA0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUg55WM6Z2i6KGM5Li65ZCN56ewDQogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0g6K+35rGC5pWw5o2uDQogICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdXBkYXRlRGV0YWlscyDmm7TmlrDpobkNCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG93bG9hZGluZ10g5piv5ZCm5pi+56S65Yqg6L2954q25oCBDQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIHVwZGF0ZUZvcm1JdGVtcyhtb2RlOiBzdHJpbmcsIGRhdGE6IGFueSA9IHt9LCB1cGRhdGVEZXRhaWxzOiBzdHJpbmdbXSwgc2hvd2xvYWRpbmc/OiBib29sZWFuKTogdm9pZCB7DQogICAgICAgIGlmICghbW9kZSB8fCAobW9kZSAmJiBPYmplY3QuaXMobW9kZSwgJycpKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IGFyZzogYW55ID0geyAuLi5kYXRhIH07DQogICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLHRoaXMudmlld3BhcmFtcyk7DQogICAgICAgIGNvbnN0IHBvc3Q6IFByb21pc2U8YW55PiA9IHRoaXMuc2VydmljZS5mcm9udExvZ2ljKG1vZGUsSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSxhcmcsIHNob3dsb2FkaW5nKTsNCiAgICAgICAgcG9zdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn6KGo5Y2V6aG55pu05paw5aSx6LSlJyB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTsNCiAgICAgICAgICAgIGNvbnN0IF9kYXRhOiBhbnkgPSB7fTsNCiAgICAgICAgICAgIHVwZGF0ZURldGFpbHMuZm9yRWFjaCgobmFtZTogc3RyaW5nKSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KG5hbWUpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihfZGF0YSwgeyBbbmFtZV06IGRhdGFbbmFtZV0gfSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIHRoaXMuc2V0Rm9ybUVuYWJsZUNvbmQoX2RhdGEpOw0KICAgICAgICAgICAgdGhpcy5maWxsRm9ybShfZGF0YSwndXBkYXRlRm9ybUl0ZW0nKTsNCiAgICAgICAgICAgIHRoaXMuZm9ybUxvZ2ljKHsgbmFtZTogJycsIG5ld1ZhbDogbnVsbCwgb2xkVmFsOiBudWxsIH0pOw0KICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbmcubmV4dChKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKTsNCiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgICAgICB0aGlzLmZvcm1TdGF0ZS5uZXh0KHsgdHlwZTogJ3VwZGF0ZWZvcm1pdGVtJywgdWZpbW9kZTogYXJnLnNyZnVmaW1vZGUsIGRhdGE6IF9kYXRhIH0pOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZSB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICfns7vnu5/lvILluLgnIH0pOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Zue6L2m5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9ICRldmVudA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBvbkVudGVyKCRldmVudDogYW55KTogdm9pZCB7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5L+d5a2Y5bm26YCA5Ye6DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIHNhdmVBbmRFeGl0KGRhdGE6YW55W10pOlByb21pc2U8YW55PnsNCiAgICAgICAgbGV0IF90aGlzID0gdGhpczsNCiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PnsNCiAgICAgICAgICAgIGxldCBhcmc6IGFueSA9IHt9Ow0KICAgICAgICAgICAgaWYoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApew0KICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLGRhdGFbMF0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgX3RoaXMuY3VycmVudEFjdGlvbiA9ICJzYXZlQW5kRXhpdCI7DQogICAgICAgICAgICBfdGhpcy5zYXZlKFthcmddKS50aGVuKChyZXMpID0+ew0KICAgICAgICAgICAgICAgIGlmKHJlcyl7DQogICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlVmlldyhyZXMuZGF0YSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTsNCiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT57DQogICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsNCiAgICAgICAgICAgIH0pDQogICAgICAgIH0pDQogICAgfQ0KDQogICAgLyoqDQogICAgICog5L+d5a2Y5bm25paw5bu6DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzDQogICAgICogQG1lbWJlcm9mIE1haW5CYXNlDQogICAgICovDQogICAgcHVibGljIHNhdmVBbmROZXcoZGF0YTphbnlbXSk6UHJvbWlzZTxhbnk+ew0KICAgICAgICBsZXQgX3RoaXMgPSB0aGlzOw0KICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+ew0KICAgICAgICAgICAgbGV0IGFyZzogYW55ID0ge307DQogICAgICAgICAgICBpZihkYXRhICYmIGRhdGEubGVuZ3RoID4gMCl7DQogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsZGF0YVswXSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBfdGhpcy5jdXJyZW50QWN0aW9uID0gInNhdmVBbmROZXciOw0KICAgICAgICAgICAgX3RoaXMuc2F2ZShbYXJnXSkudGhlbigocmVzKSA9PnsNCiAgICAgICAgICAgICAgICBfdGhpcy5SZXNldERhdGEocmVzKTsNCiAgICAgICAgICAgICAgICBfdGhpcy5sb2FkRHJhZnQoe30pOw0KICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PnsNCiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOw0KICAgICAgICAgICAgfSkNCiAgICAgICAgfSkNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliKDpmaTlubbpgIDlh7oNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgcmVtb3ZlQW5kRXhpdChkYXRhOmFueVtdKTpQcm9taXNlPGFueT57DQogICAgICAgIGxldCBfdGhpcyA9IHRoaXM7DQogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT57DQogICAgICAgICAgICBsZXQgYXJnOiBhbnkgPSB7fTsNCiAgICAgICAgICAgIGlmKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKXsNCiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZyxkYXRhWzBdKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIF90aGlzLnJlbW92ZShbYXJnXSkudGhlbigocmVzKSA9PnsNCiAgICAgICAgICAgICAgICBpZihyZXMpew0KICAgICAgICAgICAgICAgICAgX3RoaXMuY2xvc2VWaWV3KHJlcy5kYXRhKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpOw0KICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PnsNCiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOw0KICAgICAgICAgICAgfSkNCiAgICAgICAgfSkNCiAgICB9DQoNCiAgICAvKioNCiAgICAqIOWFs+ezu+eVjOmdouaVsOaNruS/neWtmOWujOaIkA0KICAgICoNCiAgICAqIEBwYXJhbSB7YW55fSAkZXZlbnQNCiAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICovDQogICAgcHVibGljIGRyZGF0YXNhdmVkKCRldmVudDphbnkpew0KICAgICAgICBsZXQgX3RoaXMgPSB0aGlzOw0KICAgICAgICB0aGlzLmRyY291bnRlci0tOw0KICAgICAgICBpZih0aGlzLmRyY291bnRlciA9PT0gMCl7DQogICAgICAgICAgICB0aGlzLnNhdmUodGhpcy5kcnNhdmVvcHQsIHVuZGVmaW5lZCwgZmFsc2UpLnRoZW4oKHJlcykgPT57DQogICAgICAgICAgICAgICAgdGhpcy5zYXZlU3RhdGUocmVzKTsNCiAgICAgICAgICAgICAgICB0aGlzLmRyc2F2ZW9wdCA9IHt9Ow0KICAgICAgICAgICAgICAgIGlmKE9iamVjdC5pcyhfdGhpcy5jdXJyZW50QWN0aW9uLCAic2F2ZUFuZE5ldyIpKXsNCiAgICAgICAgICAgICAgICAgICAgX3RoaXMuUmVzZXREYXRhKHJlcyk7DQogICAgICAgICAgICAgICAgICAgIF90aGlzLmxvYWREcmFmdCh7fSk7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYoT2JqZWN0LmlzKF90aGlzLmN1cnJlbnRBY3Rpb24sICJzYXZlQW5kRXhpdCIpKXsNCiAgICAgICAgICAgICAgICAgICAgaWYocmVzKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlVmlldyhyZXMuZGF0YSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaWsOW7uum7mOiupOWAvA0KICAgICAqIEBtZW1iZXJvZiBNYWluQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBjcmVhdGVEZWZhdWx0KCl7ICAgICAgICAgICAgICAgICAgICANCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmm7TmlrDpu5jorqTlgLwNCiAgICAgKiBAbWVtYmVyb2YgTWFpbkJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgdXBkYXRlRGVmYXVsdCgpeyAgICAgICAgICAgICAgICAgICAgDQogICAgfQ0KDQogICAgDQp9DQo="},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-person\\ryinfo-search-form-searchform\\ryinfo-search-form-searchform-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-person\\ryinfo-search-form-searchform\\ryinfo-search-form-searchform-base.vue","mtime":1630509411975},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaW1wb3J0IHsgVnVlLCBDb21wb25lbnQsIFByb3AsIFByb3ZpZGUsIEVtaXQsIFdhdGNoLCBNb2RlbCxJbmplY3QgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsKaW1wb3J0IHsgQ3JlYXRlRWxlbWVudCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBDb250cm9sSW50ZXJmYWNlIH0gZnJvbSAnQC9pbnRlcmZhY2UvY29udHJvbCc7CmltcG9ydCB7IFVJQWN0aW9uVG9vbCxVdGlsIH0gZnJvbSAnQC91dGlscyc7CmltcG9ydCBOYXZEYXRhU2VydmljZSBmcm9tICdAL3NlcnZpY2UvYXBwL25hdmRhdGEtc2VydmljZSc7CmltcG9ydCBQaW1QZXJzb25TZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9waW0tcGVyc29uL3BpbS1wZXJzb24tc2VydmljZSc7CmltcG9ydCBSWUluZm9TZWFyY2hGb3JtU2VydmljZSBmcm9tICcuL3J5aW5mby1zZWFyY2gtZm9ybS1zZWFyY2hmb3JtLXNlcnZpY2UnOwoKaW1wb3J0IHsgRm9ybUJ1dHRvbk1vZGVsLCBGb3JtUGFnZU1vZGVsLCBGb3JtSXRlbU1vZGVsLCBGb3JtRFJVSVBhcnRNb2RlbCwgRm9ybVBhcnRNb2RlbCwgRm9ybUdyb3VwUGFuZWxNb2RlbCwgRm9ybUlGcmFtZU1vZGVsLCBGb3JtUm93SXRlbU1vZGVsLCBGb3JtVGFiUGFnZU1vZGVsLCBGb3JtVGFiUGFuZWxNb2RlbCwgRm9ybVVzZXJDb250cm9sTW9kZWwgfSBmcm9tICdAL21vZGVsL2Zvcm0tZGV0YWlsJzsKaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJzsKCgpAQ29tcG9uZW50KHsKICAgIGNvbXBvbmVudHM6IHsKICAgICAgCiAgICB9Cn0pCmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJZSW5mb1NlYXJjaEZvcm1CYXNlIGV4dGVuZHMgVnVlIGltcGxlbWVudHMgQ29udHJvbEludGVyZmFjZSB7CgogICAgLyoqCiAgICAgKiDlkI3np7AKICAgICAqCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIG5hbWU/OiBzdHJpbmc7CgogICAgLyoqCiAgICAgKiDop4blm77pgJrorq/lr7nosaEKICAgICAqCiAgICAgKiBAdHlwZSB7U3ViamVjdDxWaWV3U3RhdGU+fQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIHZpZXdTdGF0ZSE6IFN1YmplY3Q8Vmlld1N0YXRlPjsKCiAgICAvKioKICAgICAqIOW6lOeUqOS4iuS4i+aWhwogICAgICoKICAgICAqIEB0eXBlIHsqfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIGNvbnRleHQ6IGFueTsKCiAgICAvKioKICAgICAqIOinhuWbvuWPguaVsAogICAgICoKICAgICAqIEB0eXBlIHsqfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIHZpZXdwYXJhbXM6IGFueTsKCiAgICAvKioKICAgICAqIOinhuWbvueKtuaAgeS6i+S7tgogICAgICoKICAgICAqIEBwdWJsaWMKICAgICAqIEB0eXBlIHsoU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkKX0KICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgdmlld1N0YXRlRXZlbnQ6IFN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZDsKCiAgICAvKioKICAgICAqIOiOt+WPlumDqOS7tuexu+WeiwogICAgICoKICAgICAqIEByZXR1cm5zIHtzdHJpbmd9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGdldENvbnRyb2xUeXBlKCk6IHN0cmluZyB7CiAgICAgICAgcmV0dXJuICdTRUFSQ0hGT1JNJwogICAgfQoKCgogICAgLyoqCiAgICAgKiDorqHmlbDlmajmnI3liqHlr7nosaHpm4blkIgKICAgICAqCiAgICAgKiBAdHlwZSB7QXJyYXk8Kj59CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLyAgICAKICAgIHB1YmxpYyBjb3VudGVyU2VydmljZUFycmF5OkFycmF5PGFueT4gPSBbXTsKCiAgICAvKioKICAgICAqIOW7uuaehOmDqOS7tuacjeWKoeWvueixoQogICAgICoKICAgICAqIEB0eXBlIHtSWUluZm9TZWFyY2hGb3JtU2VydmljZX0KICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgc2VydmljZTogUllJbmZvU2VhcmNoRm9ybVNlcnZpY2UgPSBuZXcgUllJbmZvU2VhcmNoRm9ybVNlcnZpY2UoeyAkc3RvcmU6IHRoaXMuJHN0b3JlIH0pOwoKICAgIC8qKgogICAgICog5a6e5L2T5pyN5Yqh5a+56LGhCiAgICAgKgogICAgICogQHR5cGUge1BpbVBlcnNvblNlcnZpY2V9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGFwcEVudGl0eVNlcnZpY2U6IFBpbVBlcnNvblNlcnZpY2UgPSBuZXcgUGltUGVyc29uU2VydmljZSh7ICRzdG9yZTogdGhpcy4kc3RvcmUgfSk7CiAgICAKCgogICAgLyoqCiAgICAgKiDlhbPpl63op4blm74KICAgICAqCiAgICAgKiBAcGFyYW0ge2FueX0gYXJncwogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBjbG9zZVZpZXcoYXJnczogYW55KTogdm9pZCB7CiAgICAgICAgbGV0IF90aGlzOiBhbnkgPSB0aGlzOwogICAgICAgIF90aGlzLiRlbWl0KCdjbG9zZXZpZXcnLCBbYXJnc10pOwogICAgfQoKICAgIC8qKgogICAgICogIOiuoeaVsOWZqOWIt+aWsAogICAgICoKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgY291bnRlclJlZnJlc2goKXsKICAgICAgICBjb25zdCBfdGhpczphbnkgPXRoaXM7CiAgICAgICAgaWYoX3RoaXMuY291bnRlclNlcnZpY2VBcnJheSAmJiBfdGhpcy5jb3VudGVyU2VydmljZUFycmF5Lmxlbmd0aCA+MCl7CiAgICAgICAgICAgIF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkuZm9yRWFjaCgoaXRlbTphbnkpID0+ewogICAgICAgICAgICAgICAgaWYoaXRlbS5yZWZyZXNoRGF0YSAmJiBpdGVtLnJlZnJlc2hEYXRhIGluc3RhbmNlb2YgRnVuY3Rpb24pewogICAgICAgICAgICAgICAgICAgIGl0ZW0ucmVmcmVzaERhdGEoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICB9CiAgICB9CgoKICAgIC8qKgogICAgICog6I635Y+W5aSa6aG55pWw5o2uCiAgICAgKgogICAgICogQHJldHVybnMge2FueVtdfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBnZXREYXRhcygpOiBhbnlbXSB7CiAgICAgICAgcmV0dXJuIFt0aGlzLmRhdGFdOwogICAgfQoKICAgIC8qKgogICAgICog6I635Y+W5Y2V6aG55qCRCiAgICAgKgogICAgICogQHJldHVybnMgeyp9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGdldERhdGEoKTogYW55IHsKICAgICAgICByZXR1cm4gdGhpcy5kYXRhOwogICAgfQoKICAgIC8qKgogICAgICog5pi+56S65aSE55CG5o+Q56S6CiAgICAgKgogICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgQFByb3AoeyBkZWZhdWx0OiB0cnVlIH0pIHB1YmxpYyBzaG93QnVzeUluZGljYXRvcj86IGJvb2xlYW47CiAgICAKICAgIC8qKgogICAgICog6YOo5Lu26KGM5Li6LS1sb2FkZHJhZnQKICAgICAqCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIGxvYWRkcmFmdEFjdGlvbiE6IHN0cmluZzsKICAgIAogICAgLyoqCiAgICAgKiDpg6jku7booYzkuLotLWxvYWQKICAgICAqCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIGxvYWRBY3Rpb24hOiBzdHJpbmc7CgogICAgLyoqCiAgICAgKiDop4blm77moIfor4YKICAgICAqCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIHZpZXd0YWchOiBzdHJpbmc7CgogICAgLyoqCiAgICAgKiDooajljZXnirbmgIEKICAgICAqCiAgICAgKiBAdHlwZSB7U3ViamVjdDxhbnk+fQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBmb3JtU3RhdGU6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7CgogICAgLyoqCiAgICAgKiDlv73nlaXooajljZXpobnlgLzlj5jljJYKICAgICAqCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgaWdub3JlZmllbGR2YWx1ZWNoYW5nZTogYm9vbGVhbiA9IGZhbHNlOwoKICAgIC8qKgogICAgICog5pWw5o2u5Y+Y5YyWCiAgICAgKgogICAgICogQHB1YmxpYwogICAgICogQHR5cGUge1N1YmplY3Q8YW55Pn0KICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgZGF0YUNoYW5nOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdCgpOwoKICAgIC8qKgogICAgICog6KeG5Zu+54q25oCB5LqL5Lu2CiAgICAgKgogICAgICogQHB1YmxpYwogICAgICogQHR5cGUgeyhTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQpfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBkYXRhQ2hhbmdFdmVudDogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkOwoKICAgIC8qKgogICAgICog5Y6f5aeL5pWw5o2uCiAgICAgKgogICAgICogQHB1YmxpYwogICAgICogQHR5cGUgeyp9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIG9sZERhdGE6IGFueSA9IHt9OwoKICAgIC8qKgogICAgICog6KGo5Y2V5pWw5o2u5a+56LGhCiAgICAgKgogICAgICogQHR5cGUgeyp9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGRhdGE6IGFueSA9IHsKICAgICAgICBuX3BpbXBlcnNvbm5hbWVfbGlrZTogbnVsbCwKICAgICAgICBuX3lnYmhfbGlrZTogbnVsbCwKICAgICAgICBuX3pqaG1fbGlrZTogbnVsbCwKICAgICAgICBuX29ybW9yZ25hbWVfbGlrZTogbnVsbCwKICAgICAgICBuX29ybW9yZ3NlY3Rvcm5hbWVfbGlrZTogbnVsbCwKICAgICAgICBuX3lnenRfZXE6IG51bGwsCiAgICAgICAgbl96Z2NvZGVfZXE6IG51bGwsCiAgICB9OwoKICAgIC8qKgogICAgICog5bGe5oCn5YC86KeE5YiZCiAgICAgKgogICAgICogQHR5cGUgeyp9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIHJ1bGVzOiBhbnkgPSB7CiAgICAgICAgbl9waW1wZXJzb25uYW1lX2xpa2U6IFsKICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LAogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZGY5bel5aeT5ZCNIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkZjlt6Xlp5PlkI0g5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwKICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZGY5bel5aeT5ZCNIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgIF0sCiAgICAgICAgbl95Z2JoX2xpa2U6IFsKICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WRmOW3pee8luWPtyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LAogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZGY5bel57yW5Y+3IOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkZjlt6XnvJblj7cg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwKICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZGY5bel57yW5Y+3IOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgIF0sCiAgICAgICAgbl96amhtX2xpa2U6IFsKICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+ivgeS7tuWPt+eggSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LAogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn6K+B5Lu25Y+356CBIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfor4Hku7blj7fnoIEg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwKICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn6K+B5Lu25Y+356CBIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgIF0sCiAgICAgICAgbl9vcm1vcmduYW1lX2xpa2U6IFsKICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7hOe7hyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LAogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE57uHIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfnu4Tnu4cg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwKICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE57uHIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgIF0sCiAgICAgICAgbl9vcm1vcmdzZWN0b3JuYW1lX2xpa2U6IFsKICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+mDqOmXqCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LAogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn6YOo6ZeoIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfpg6jpl6gg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwKICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn6YOo6ZeoIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LAogICAgICAgIF0sCiAgICAgICAgbl95Z3p0X2VxOiBbCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkZjlt6XnirbmgIEg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwKICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WRmOW3peeKtuaAgSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwKICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZGY5bel54q25oCBIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WRmOW3peeKtuaAgSDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwKICAgICAgICBdLAogICAgICAgIG5femdjb2RlX2VxOiBbCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflnKjlspfnirbmgIEg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwKICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WcqOWyl+eKtuaAgSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwKICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5Zyo5bKX54q25oCBIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WcqOWyl+eKtuaAgSDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwKICAgICAgICBdLAogICAgfQoKICAgIC8qKgogICAgICog6K+m5oOF5qih5Z6L6ZuG5ZCICiAgICAgKgogICAgICogQHR5cGUgeyp9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGRldGFpbHNNb2RlbDogYW55ID0gewogICAgICAgIGZvcm1wYWdlMTogbmV3IEZvcm1QYWdlTW9kZWwoeyBjYXB0aW9uOiAn5bi46KeE5p2h5Lu2JywgZGV0YWlsVHlwZTogJ0ZPUk1QQUdFJywgbmFtZTogJ2Zvcm1wYWdlMScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMgfSkKLCAKICAgICAgICBuX3BpbXBlcnNvbm5hbWVfbGlrZTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn5ZGY5bel5aeT5ZCNJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ25fcGltcGVyc29ubmFtZV9saWtlJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pCiwgCiAgICAgICAgbl95Z2JoX2xpa2U6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+WRmOW3pee8luWPtycsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICduX3lnYmhfbGlrZScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQosIAogICAgICAgIG5fempobV9saWtlOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICfor4Hku7blj7fnoIEnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnbl96amhtX2xpa2UnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkKLCAKICAgICAgICBuX29ybW9yZ25hbWVfbGlrZTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn57uE57uHJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ25fb3Jtb3JnbmFtZV9saWtlJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pCiwgCiAgICAgICAgbl9vcm1vcmdzZWN0b3JuYW1lX2xpa2U6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+mDqOmXqCcsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICduX29ybW9yZ3NlY3Rvcm5hbWVfbGlrZScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQosIAogICAgICAgIG5feWd6dF9lcTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn5ZGY5bel54q25oCBJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ25feWd6dF9lcScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQosIAogICAgICAgIG5femdjb2RlX2VxOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICflnKjlspfnirbmgIEnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnbl96Z2NvZGVfZXEnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkKLCAKICAgIH07CgogICAgLyoqCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgbl9waW1wZXJzb25uYW1lX2xpa2Ug5YC8CiAgICAgKgogICAgICogQHBhcmFtIHsqfSBuZXdWYWwKICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsCiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgQFdhdGNoKCdkYXRhLm5fcGltcGVyc29ubmFtZV9saWtlJykKICAgIG9uTl9waW1wZXJzb25uYW1lX2xpa2VDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7CiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICduX3BpbXBlcnNvbm5hbWVfbGlrZScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBuX3lnYmhfbGlrZSDlgLwKICAgICAqCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbAogICAgICogQHBhcmFtIHsqfSBvbGRWYWwKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBAV2F0Y2goJ2RhdGEubl95Z2JoX2xpa2UnKQogICAgb25OX3lnYmhfbGlrZUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsKICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ25feWdiaF9saWtlJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOwogICAgfQoKICAgIC8qKgogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIG5fempobV9saWtlIOWAvAogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbAogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBXYXRjaCgnZGF0YS5uX3pqaG1fbGlrZScpCiAgICBvbk5fempobV9saWtlQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgewogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnbl96amhtX2xpa2UnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgbl9vcm1vcmduYW1lX2xpa2Ug5YC8CiAgICAgKgogICAgICogQHBhcmFtIHsqfSBuZXdWYWwKICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsCiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgQFdhdGNoKCdkYXRhLm5fb3Jtb3JnbmFtZV9saWtlJykKICAgIG9uTl9vcm1vcmduYW1lX2xpa2VDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7CiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICduX29ybW9yZ25hbWVfbGlrZScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBuX29ybW9yZ3NlY3Rvcm5hbWVfbGlrZSDlgLwKICAgICAqCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbAogICAgICogQHBhcmFtIHsqfSBvbGRWYWwKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBAV2F0Y2goJ2RhdGEubl9vcm1vcmdzZWN0b3JuYW1lX2xpa2UnKQogICAgb25OX29ybW9yZ3NlY3Rvcm5hbWVfbGlrZUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsKICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ25fb3Jtb3Jnc2VjdG9ybmFtZV9saWtlJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOwogICAgfQoKICAgIC8qKgogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIG5feWd6dF9lcSDlgLwKICAgICAqCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbAogICAgICogQHBhcmFtIHsqfSBvbGRWYWwKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBAV2F0Y2goJ2RhdGEubl95Z3p0X2VxJykKICAgIG9uTl95Z3p0X2VxQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgewogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnbl95Z3p0X2VxJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOwogICAgfQoKICAgIC8qKgogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIG5femdjb2RlX2VxIOWAvAogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbAogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIEBXYXRjaCgnZGF0YS5uX3pnY29kZV9lcScpCiAgICBvbk5femdjb2RlX2VxQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgewogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnbl96Z2NvZGVfZXEnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7CiAgICB9CgoKICAgIC8qKgogICAgICog6YeN572u6KGo5Y2V6aG55YC8CiAgICAgKgogICAgICogQHB1YmxpYwogICAgICogQHBhcmFtIHt7IG5hbWU6IHN0cmluZywgbmV3VmFsOiBhbnksIG9sZFZhbDogYW55IH19IHsgbmFtZSwgbmV3VmFsLCBvbGRWYWwgfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyByZXNldEZvcm1EYXRhKHsgbmFtZSwgbmV3VmFsLCBvbGRWYWwgfTogeyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9KTogdm9pZCB7CiAgICB9CgogICAgLyoqCiAgICAgKiDooajljZXpgLvovpEKICAgICAqCiAgICAgKiBAcHVibGljCiAgICAgKiBAcGFyYW0ge3sgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfX0geyBuYW1lLCBuZXdWYWwsIG9sZFZhbCB9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGZvcm1Mb2dpYyh7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH06IHsgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfSk6IHZvaWQgewogICAgICAgICAgICAgICAgCgoKCgoKCgoKICAgIH0KCiAgICAvKioKICAgICAqIOihqOWNleWAvOWPmOWMlgogICAgICoKICAgICAqIEBwdWJsaWMKICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9fSB7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH0KICAgICAqIEByZXR1cm5zIHt2b2lkfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBmb3JtRGF0YUNoYW5nZSh7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH06IHsgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfSk6IHZvaWQgewogICAgICAgIGlmICh0aGlzLmlnbm9yZWZpZWxkdmFsdWVjaGFuZ2UpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLnJlc2V0Rm9ybURhdGEoeyBuYW1lOiBuYW1lLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7CiAgICAgICAgdGhpcy5mb3JtTG9naWMoeyBuYW1lOiBuYW1lLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7CiAgICAgICAgdGhpcy5kYXRhQ2hhbmcubmV4dChKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKTsKICAgIH0KCiAgICAvKioKICAgICAqIOihqOWNleWKoOi9veWujOaIkAogICAgICoKICAgICAqIEBwdWJsaWMKICAgICAqIEBwYXJhbSB7Kn0gW2RhdGE9e31dCiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIG9uRm9ybUxvYWQoZGF0YTogYW55ID0ge30pOiB2b2lkIHsKICAgICAgICB0aGlzLnNldEZvcm1FbmFibGVDb25kKGRhdGEpOwogICAgICAgIHRoaXMuZmlsbEZvcm0oZGF0YSk7CiAgICAgICAgdGhpcy5mb3JtTG9naWMoeyBuYW1lOiAnJywgbmV3VmFsOiBudWxsLCBvbGRWYWw6IG51bGwgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiDlgLzloavlhYUKICAgICAqCiAgICAgKiBAcGFyYW0geyp9IFtfZGF0YXM9e31dCiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGZpbGxGb3JtKF9kYXRhczogYW55ID0ge30pOiB2b2lkIHsKICAgICAgICB0aGlzLmlnbm9yZWZpZWxkdmFsdWVjaGFuZ2UgPSB0cnVlOwogICAgICAgIE9iamVjdC5rZXlzKF9kYXRhcykuZm9yRWFjaCgobmFtZTogc3RyaW5nKSA9PiB7CiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtuYW1lXSA9IF9kYXRhc1tuYW1lXTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5pZ25vcmVmaWVsZHZhbHVlY2hhbmdlID0gZmFsc2U7CiAgICAgICAgfSkKICAgIH0KCiAgICAvKioKICAgICAqIOiuvue9ruihqOWNlemhueaYr+WQpuWQr+eUqAogICAgICoKICAgICAqIEBwdWJsaWMKICAgICAqIEBwYXJhbSB7Kn0gZGF0YQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBzZXRGb3JtRW5hYmxlQ29uZChkYXRhOiBhbnkpOiB2b2lkIHsKICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuZGV0YWlsc01vZGVsKS5mb3JFYWNoKChkZXRhaWw6IGFueSkgPT4gewogICAgICAgICAgICBpZiAoIU9iamVjdC5pcyhkZXRhaWwuZGV0YWlsVHlwZSwgJ0ZPUk1JVEVNJykpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBmb3JtSXRlbTogRm9ybUl0ZW1Nb2RlbCA9IGRldGFpbDsKICAgICAgICAgICAgZm9ybUl0ZW0uc2V0RW5hYmxlQ29uZChkYXRhLnNyZnVmKTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIOmHjee9ruiNieeov+ihqOWNleeKtuaAgQogICAgICoKICAgICAqIEBwdWJsaWMKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgcmVzZXREcmFmdEZvcm1TdGF0ZXMoKTogdm9pZCB7CiAgICAgICAgY29uc3QgZm9ybTogYW55ID0gdGhpcy4kcmVmcy5mb3JtOwogICAgICAgIGlmIChmb3JtKSB7CiAgICAgICAgICAgIGZvcm0ucmVzZXRGaWVsZHMoKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiDph43nva7moKHpqoznu5PmnpwKICAgICAqCiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIHJlc2V0VmFsaWRhdGVzKCk6IHZvaWQgewogICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5kZXRhaWxzTW9kZWwpLmZvckVhY2goKGRldGFpbDogYW55KSA9PiB7CiAgICAgICAgICAgIGlmICghT2JqZWN0LmlzKGRldGFpbC5kZXRhaWxUeXBlLCAnRk9STUlURU0nKSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGZvcm1JdGVtOiBGb3JtSXRlbU1vZGVsID0gZGV0YWlsOwogICAgICAgICAgICBmb3JtSXRlbS5zZXRFcnJvcignJyk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiDloavlhYXmoKHpqoznu5Pmnpwg77yI5ZCO5Y+w77yJCiAgICAgKgogICAgICogQHBhcmFtIHthbnlbXX0gZmllbGRFcnJvcnMKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgZmlsbFZhbGlkYXRlcyhmaWVsZEVycm9yczogYW55W10pOiB2b2lkIHsKICAgICAgICBmaWVsZEVycm9ycy5mb3JFYWNoKChlcnJvcjogYW55KSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGZvcm1JdGVtOiBGb3JtSXRlbU1vZGVsID0gdGhpcy5kZXRhaWxzTW9kZWxbZXJyb3IuZmllbGRdOwogICAgICAgICAgICBpZiAoIWZvcm1JdGVtKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgICAgICAgZm9ybUl0ZW0uc2V0RXJyb3IoZXJyb3IubWVzc2FnZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICog6KGo5Y2V5qCh6aqM54q25oCBCiAgICAgKgogICAgICogQHJldHVybnMge2Jvb2xlYW59IAogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBmb3JtVmFsaWRhdGVTdGF0dXMoKTogYm9vbGVhbiB7CiAgICAgICAgY29uc3QgZm9ybTogYW55ID0gdGhpcy4kcmVmcy5zZWFyY2hmb3JtOwogICAgICAgIGxldCB2YWxpZGF0ZXN0YXRlOiBib29sZWFuID0gdHJ1ZTsKICAgICAgICBmb3JtLnZhbGlkYXRlKCh2YWxpZDogYm9vbGVhbikgPT4gewogICAgICAgICAgICB2YWxpZGF0ZXN0YXRlID0gdmFsaWQgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHZhbGlkYXRlc3RhdGUKICAgIH0KCiAgICAvKioKICAgICAqIOiOt+WPluWFqOmDqOWAvAogICAgICoKICAgICAqIEByZXR1cm5zIHsqfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBnZXRWYWx1ZXMoKTogYW55IHsKICAgICAgICByZXR1cm4gdGhpcy5kYXRhOwogICAgfQoKICAgIC8qKgogICAgICog6KGo5Y2V6aG55YC85Y+Y5pu0CiAgICAgKgogICAgICogQHBhcmFtIHt7IG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSB9fSAkZXZlbnQKICAgICAqIEByZXR1cm5zIHt2b2lkfQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBvbkZvcm1JdGVtVmFsdWVDaGFuZ2UoJGV2ZW50OiB7IG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSB9KTogdm9pZCB7CiAgICAgICAgaWYgKCEkZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoISRldmVudC5uYW1lIHx8IE9iamVjdC5pcygkZXZlbnQubmFtZSwgJycpIHx8ICF0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkoJGV2ZW50Lm5hbWUpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5kYXRhWyRldmVudC5uYW1lXSA9ICRldmVudC52YWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIOiuvue9ruaVsOaNrumhueWAvAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlCiAgICAgKiBAcmV0dXJucyB7dm9pZH0KICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgc2V0RGF0YUl0ZW1WYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHsKICAgICAgICBpZiAoIW5hbWUgfHwgT2JqZWN0LmlzKG5hbWUsICcnKSB8fCAhdGhpcy5kYXRhLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKE9iamVjdC5pcyh0aGlzLmRhdGFbbmFtZV0sIHZhbHVlKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRoaXMuZGF0YVtuYW1lXSA9IHZhbHVlOwogICAgfQoKCgogICAgLyoqCiAgICAgKiDliIbnu4TnlYzpnaLooYzkuLrkuovku7YKICAgICAqCiAgICAgKiBAcGFyYW0geyp9ICRldmVudAogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBncm91cFVJQWN0aW9uQ2xpY2soJGV2ZW50OiBhbnkpOiB2b2lkIHsKICAgICAgICBpZiAoISRldmVudCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGl0ZW06YW55ID0gJGV2ZW50Lml0ZW07CiAgICB9CgogICAgLyoqCiAgICAgKiBWdWXlo7DmmI7lkajmnJ8o5aSE55CG57uE5Lu255qE6L6T5YWl5bGe5oCnKQogICAgICoKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgY3JlYXRlZCgpOiB2b2lkIHsKICAgICAgICB0aGlzLmFmdGVyQ3JlYXRlZCgpOwogICAgfQoKICAgIC8qKgogICAgICog5omn6KGMY3JlYXRlZOWQjueahOmAu+i+kQogICAgICoKICAgICAqICBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLyAgICAKICAgIHB1YmxpYyBhZnRlckNyZWF0ZWQoKXsKICAgICAgICBpZiAodGhpcy52aWV3U3RhdGUpIHsKICAgICAgICAgICAgdGhpcy52aWV3U3RhdGVFdmVudCA9IHRoaXMudmlld1N0YXRlLnN1YnNjcmliZSgoeyB0YWcsIGFjdGlvbiwgZGF0YSB9KSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5pcyh0YWcsIHRoaXMubmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdhdXRvbG9hZCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dG9Mb2FkKGRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnbG9hZCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWQoZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdsb2FkZHJhZnQnLCBhY3Rpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkRHJhZnQoZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIHZ1ZSDnlJ/lkb3lkajmnJ8KICAgICAqCiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGRlc3Ryb3llZCgpIHsKICAgICAgICB0aGlzLmFmdGVyRGVzdHJveSgpOwogICAgfQoKICAgIC8qKgogICAgICog5omn6KGMZGVzdHJveWVk5ZCO55qE6YC76L6RCiAgICAgKgogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBhZnRlckRlc3Ryb3koKSB7CiAgICAgICAgaWYgKHRoaXMudmlld1N0YXRlRXZlbnQpIHsKICAgICAgICAgICAgdGhpcy52aWV3U3RhdGVFdmVudC51bnN1YnNjcmliZSgpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5kYXRhQ2hhbmdFdmVudCkgewogICAgICAgICAgICB0aGlzLmRhdGFDaGFuZ0V2ZW50LnVuc3Vic2NyaWJlKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICog6Ieq5Yqo5Yqg6L29CiAgICAgKgogICAgICogQHBhcmFtIHsqfSBbYXJnPXt9XQogICAgICogQHJldHVybnMge3ZvaWR9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIGF1dG9Mb2FkKGFyZzogYW55ID0ge30pOiB2b2lkIHsKICAgICAgICBpZiAoYXJnLnNyZmtleSAmJiAhT2JqZWN0LmlzKGFyZy5zcmZrZXksICcnKSkgewogICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgeyBzcmZrZXk6IGFyZy5zcmZrZXkgfSk7CiAgICAgICAgICAgIHRoaXMubG9hZChhcmcpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChhcmcuc3Jma2V5cyAmJiAhT2JqZWN0LmlzKGFyZy5zcmZrZXlzLCAnJykpIHsKICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsgc3Jma2V5OiBhcmcuc3Jma2V5cyB9KTsKICAgICAgICAgICAgdGhpcy5sb2FkKGFyZyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5sb2FkRHJhZnQoYXJnKTsKICAgIH0KCiAgICAvKioKICAgICAqIOWKoOi9vQogICAgICoKICAgICAqIEBwdWJsaWMKICAgICAqIEBwYXJhbSB7Kn0gW29wdD17fV0KICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgbG9hZChvcHQ6IGFueSA9IHt9KTogdm9pZCB7CiAgICAgICAgaWYoIXRoaXMubG9hZEFjdGlvbil7CiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ1BJTVBFUlNPTlBpY2t1cFZpZXfop4blm77mkJzntKLooajljZVsb2FkQWN0aW9u5Y+C5pWw5pyq6YWN572uJyB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBhcmc6IGFueSA9IHsgLi4ub3B0IH07CiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcse3ZpZXdwYXJhbXM6dGhpcy52aWV3cGFyYW1zfSk7CiAgICAgICAgY29uc3QgZ2V0OiBQcm9taXNlPGFueT4gPSB0aGlzLnNlcnZpY2UuZ2V0KHRoaXMubG9hZEFjdGlvbixKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLCBhcmcsIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpOwogICAgICAgIGdldC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICAgICAgICB0aGlzLm9uRm9ybUxvYWQoZGF0YSk7CiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdsb2FkJywgZGF0YSk7CiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtU3RhdGUubmV4dCh7IHR5cGU6ICdsb2FkJywgZGF0YTogZGF0YSB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goKHJlc3BvbnNlOiBhbnkpID0+IHsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7CiAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICfns7vnu5/lvILluLgnIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCB7IGRhdGE6IF9kYXRhIH0gPSByZXNwb25zZTsKICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6IF9kYXRhLnRpdGxlLCBkZXNjOiBfZGF0YS5tZXNzYWdlIH0pOwogICAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICog5Yqg6L296I2J56i/CiAgICAgKgogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBsb2FkRHJhZnQob3B0OiBhbnkgPSB7fSxtb2RlPzpzdHJpbmcpOiB2b2lkIHsKICAgICAgICBpZighdGhpcy5sb2FkZHJhZnRBY3Rpb24pewogICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICdQSU1QRVJTT05QaWNrdXBWaWV36KeG5Zu+5pCc57Si6KGo5Y2VbG9hZGRyYWZ0QWN0aW9u5Y+C5pWw5pyq6YWN572uJyB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBhcmc6IGFueSA9IHsgLi4ub3B0IH0gOwogICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLHt2aWV3cGFyYW1zOnRoaXMudmlld3BhcmFtc30pOwogICAgICAgIGxldCBwb3N0OiBQcm9taXNlPGFueT4gPSB0aGlzLnNlcnZpY2UubG9hZERyYWZ0KHRoaXMubG9hZGRyYWZ0QWN0aW9uLEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksIGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcik7CiAgICAgICAgcG9zdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7CiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JNZXNzYWdlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5lcnJvck1lc3NhZ2UgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhOwogICAgICAgICAgICB0aGlzLnJlc2V0RHJhZnRGb3JtU3RhdGVzKCk7CiAgICAgICAgICAgIHRoaXMub25Gb3JtTG9hZChkYXRhKTsKICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICBjb25zdCBmb3JtOiBhbnkgPSB0aGlzLiRyZWZzLmZvcm07CiAgICAgICAgICAgICAgICBpZiAoZm9ybSkgewogICAgICAgICAgICAgICAgICAgIGZvcm0uZmllbGRzLmZvckVhY2goKGZpZWxkOiBhbnkpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQudmFsaWRhdGVNZXNzYWdlID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnZhbGlkYXRlU3RhdGUgPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQudmFsaWRhdGVTdGF0dXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmKE9iamVjdC5pcyhtb2RlLCdSRVNFVCcpKXsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5mb3JtVmFsaWRhdGVTdGF0dXMoKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLiRlbWl0KCdsb2FkJywgZGF0YSk7CiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMuZm9ybVN0YXRlLm5leHQoeyB0eXBlOiAnbG9hZCcsIGRhdGE6IGRhdGEgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDQwMSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBfZGF0YSB9ID0gcmVzcG9uc2U7CiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiBfZGF0YS50aXRsZSwgZGVzYzogX2RhdGEubWVzc2FnZSB9KTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIOihqOWNlemhueabtOaWsAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIOeVjOmdouihjOS4uuWQjeensAogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0g6K+35rGC5pWw5o2uCiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB1cGRhdGVEZXRhaWxzIOabtOaWsOmhuQogICAgICogQHBhcmFtIHtib29sZWFufSBbc2hvd2xvYWRpbmddIOaYr+WQpuaYvuekuuWKoOi9veeKtuaAgQogICAgICogQHJldHVybnMge3ZvaWR9CiAgICAgKiBAbWVtYmVyb2YgUllJbmZvU2VhcmNoRm9ybUJhc2UKICAgICAqLwogICAgcHVibGljIHVwZGF0ZUZvcm1JdGVtcyhtb2RlOiBzdHJpbmcsIGRhdGE6IGFueSA9IHt9LCB1cGRhdGVEZXRhaWxzOiBzdHJpbmdbXSwgc2hvd2xvYWRpbmc/OiBib29sZWFuKTogdm9pZCB7CiAgICAgICAgCiAgICB9CgogICAgLyoqCiAgICAgKiDlm57ovabkuovku7YKICAgICAqCiAgICAgKiBAcGFyYW0geyp9ICRldmVudAogICAgICogQG1lbWJlcm9mIFJZSW5mb1NlYXJjaEZvcm1CYXNlCiAgICAgKi8KICAgIHB1YmxpYyBvbkVudGVyKCRldmVudDogYW55KTogdm9pZCB7CiAgICAgICAgaWYgKCF0aGlzLmZvcm1WYWxpZGF0ZVN0YXR1cygpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy4kZW1pdCgnc2VhcmNoJywgdGhpcy5kYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIOaQnOe0ogogICAgICoKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgb25TZWFyY2goKSB7CiAgICAgICAgaWYgKCF0aGlzLmZvcm1WYWxpZGF0ZVN0YXR1cygpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy4kZW1pdCgnc2VhcmNoJywgdGhpcy5kYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIOmHjee9rgogICAgICoKICAgICAqIEBtZW1iZXJvZiBSWUluZm9TZWFyY2hGb3JtQmFzZQogICAgICovCiAgICBwdWJsaWMgb25SZXNldCgpIHsKICAgICAgICB0aGlzLmxvYWREcmFmdCh7fSwnUkVTRVQnKTsKICAgIH0KfQo="},null]}
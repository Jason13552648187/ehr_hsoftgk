{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\components\\app-data-upload\\app-data-upload.vue?vue&type=script&lang=ts&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\components\\app-data-upload\\app-data-upload.vue","mtime":1630509408669},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCmltcG9ydCBYTFNYIGZyb20gJ3hsc3gnOw0KaW1wb3J0IENvZGVMaXN0U2VydmljZSBmcm9tICJAc2VydmljZS9hcHAvY29kZWxpc3Qtc2VydmljZSI7DQppbXBvcnQgRW50aXR5U2VydmljZSBmcm9tICdAL3NlcnZpY2UvZW50aXR5LXNlcnZpY2UnOw0KaW1wb3J0IHsgVnVlLCBDb21wb25lbnQsIFByb3AsIFByb3ZpZGUsIEVtaXQsIFdhdGNoIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7DQoNCkBDb21wb25lbnQoew0KfSkNCmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcERhdGFVcGxvYWRWaWV3IGV4dGVuZHMgVnVlIHsNCg0KICAgICAvKioNCiAgICAgKiDkvKDlhaXop4blm77kuIrkuIvmlocNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgQFByb3AoKSBwcm90ZWN0ZWQgdmlld2RhdGEhOiBzdHJpbmc7DQoNCiAgICAvKioNCiAgICAgKiDkvKDlhaXop4blm77lj4LmlbANCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgQFByb3AoKSBwcm90ZWN0ZWQgdmlld3BhcmFtITogc3RyaW5nOw0KDQogICAgLyoqDQogICAgICog5Luj56CB6KGo5pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7Q29kZUxpc3RTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLyAgDQogICAgcHVibGljIGNvZGVMaXN0U2VydmljZTpDb2RlTGlzdFNlcnZpY2UgPSBuZXcgQ29kZUxpc3RTZXJ2aWNlKHsgJHN0b3JlOiB0aGlzLiRzdG9yZSB9KTsNCg0KICAgIC8qKg0KICAgICAqIOWunuS9k+acjeWKoeWvueixoQ0KICAgICAqDQogICAgICogQHByb3RlY3RlZA0KICAgICAqIEB0eXBlIHtFbnRpdHlTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLw0KICAgIHByb3RlY3RlZCBlbnRpdHlTZXJ2aWNlOiBFbnRpdHlTZXJ2aWNlID0gbmV3IEVudGl0eVNlcnZpY2UoKTsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvuWPguaVsA0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHJvdGVjdGVkIHZpZXdwYXJhbXM6YW55ID0ge307DQoNCiAgICAvKioNCiAgICAgKiDlr7zlhaXmlbDmja7mqKHlnosNCiAgICAgKg0KICAgICAqIEB0eXBlIHtBcnJheTwqPn0NCiAgICAgKiBAbWVtYmVyb2YgQXBwRGF0YVVwbG9hZFZpZXcNCiAgICAgKi8NCiAgICBwcm90ZWN0ZWQgaW1wb3J0RGF0YU1vZGVsOkFycmF5PGFueT4gPSBbXTsNCg0KICAgIC8qKg0KICAgICAqIOWvvOWFpeaVsOaNrumbhuWQiA0KICAgICAqDQogICAgICogQHR5cGUge0FycmF5PCo+fQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLw0KICAgIHByb3RlY3RlZCBpbXBvcnREYXRhQXJyYXk6QXJyYXk8YW55PiA9IFtdOw0KDQogICAgLyoqDQogICAgICog5a+85YWl5qCH6K+GDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLw0KICAgIHByb3RlY3RlZCBpbXBvcnRJZDpzdHJpbmcgPSAiIjsNCg0KICAgIC8qKg0KICAgICAqIOaYr+WQpuW3suacieWvvOWFpeaVsOaNrg0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHJvdGVjdGVkIGhhc0ltcG9ydGVkOmJvb2xlYW4gPSBmYWxzZTsNCg0KICAgIC8qKg0KICAgICAqIOWvvOWFpeaVsOaNruivhuWIq+mhueWxnuaApw0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgQXBwRGF0YVVwbG9hZFZpZXcNCiAgICAgKi8NCiAgICBwcm90ZWN0ZWQgaW1wb3J0VW5pcXVlSXRlbTpzdHJpbmcgPSIiOw0KDQogICAgLyoqDQogICAgICog5o+Q56S65L+h5oGvDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLw0KICAgIHByb3RlY3RlZCBwcm9tcHRJbmZvOnN0cmluZyA9IiI7DQoNCiAgICAvKioNCiAgICAgKiDlr7zlhaXnirbmgIENCiAgICAgKg0KICAgICAqIEB0eXBlIHtib29sZWFufQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLw0KICAgIHByb3RlY3RlZCBpc1VwbG9hZGluZzpib29sZWFuID0gZmFsc2U7DQoNCiAgICAvKioNCiAgICAgKiDlr7zlhaXmiJDlip/mlbDmja4NCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHJvdGVjdGVkIGltcG9ydFN1Y2Nlc3NEYXRhOkFycmF5PGFueT4gPSBbXTsNCg0KICAgIC8qKg0KICAgICAqIOWvvOWFpeWksei0peaVsOaNrg0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgQXBwRGF0YVVwbG9hZFZpZXcNCiAgICAgKi8NCiAgICBwcm90ZWN0ZWQgaW1wb3J0RXJyb3JEYXRhOkFycmF5PGFueT4gPSBbXTsNCg0KICAgIC8qKg0KICAgICAqIOivu+WPluWujOaIkOeahOaVsOaNrg0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIHdvcmtCb29rRGF0YTphbnk7DQoNCiAgICAvKioNCiAgICAgKiDmiYDmnInnmoTku6PnoIHooagNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLw0KICAgIHB1YmxpYyBhbGxDb2RlTGlzdDphbnk7DQoNCiAgICAvKioNCiAgICAgKiDlsZ7mgKdNYXAo55So5L2c5bGe5oCn6L2s5YyWKQ0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIGFsbEZpZWxkTWFwOk1hcDxzdHJpbmcsYW55PiA9IG5ldyBNYXAoKTsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvuWPguaVsOWPmOWMlg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLw0KICAgIEBXYXRjaCgndmlld3BhcmFtJyx7aW1tZWRpYXRlOiB0cnVlLCBkZWVwOiB0cnVlfSkNCiAgICBvblBhcmFtRGF0YShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgaWYobmV3VmFsKXsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy52aWV3cGFyYW1zLCBKU09OLnBhcnNlKHRoaXMudmlld3BhcmFtKSk7DQogICAgICAgICAgICB0aGlzLmluaXRCYXNpYygpOw0KICAgICAgICB9IA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIneWni+WMluWfuuehgOaVsOaNrg0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIGFzeW5jIGluaXRCYXNpYygpew0KICAgICAgICBpZih0aGlzLnZpZXdwYXJhbXMuaW1wb3J0SWQpew0KICAgICAgICAgICAgdGhpcy5pbXBvcnRJZCA9IHRoaXMudmlld3BhcmFtcy5pbXBvcnRJZDsNCiAgICAgICAgfQ0KICAgICAgICBpZih0aGlzLnZpZXdwYXJhbXMuaW1wb3J0RGF0YSl7DQogICAgICAgICAgICB0aGlzLmltcG9ydERhdGFNb2RlbCA9IE9iamVjdC52YWx1ZXModGhpcy52aWV3cGFyYW1zLmltcG9ydERhdGEpOw0KICAgICAgICAgICAgdGhpcy5CdWJibGVTb3J0KHRoaXMuaW1wb3J0RGF0YU1vZGVsLHRoaXMuaW1wb3J0RGF0YU1vZGVsLmxlbmd0aCk7DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5pbXBvcnREYXRhTW9kZWwuZm9yRWFjaCgoaXRlbTphbnkpID0+ew0KICAgICAgICAgICAgaWYoaXRlbS5pc3VuaXF1ZWl0ZW0pew0KICAgICAgICAgICAgICAgIHRoaXMuaW1wb3J0VW5pcXVlSXRlbSA9IGl0ZW0uaGVhZGVybmFtZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMuYWxsRmllbGRNYXAuc2V0KGl0ZW0uaGVhZGVybmFtZSxpdGVtKTsNCiAgICAgICAgfSk7DQogICAgICAgIC8v6I635Y+W5Luj56CB6KGo5YC8DQogICAgICAgIHRoaXMuYWxsQ29kZUxpc3QgPSBhd2FpdCB0aGlzLmdldENoYXJ0QWxsQ29kZUxpc3QoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlhpLms6HmjpLluo8NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgQXBwRGF0YVVwbG9hZFZpZXcNCiAgICAgKi8NCiAgICBwdWJsaWMgQnViYmxlU29ydChhcnJheTpBcnJheTxhbnk+LGxlbmd0aDpudW1iZXIpew0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsNCgkJZm9yIChsZXQgaiA9IDA7IGogPCBsZW5ndGggLSAgaSAtIDE7IGorKyl7DQogICAgICAgICAgICAgICAgaWYgKGFycmF5W2pdLm9yZGVyID4gYXJyYXlbaiArIDFdLm9yZGVyKXsNCiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXA6YW55Ow0KICAgICAgICAgICAgICAgICAgICB0ZW1wID0gYXJyYXlbaiArIDFdOw0KICAgICAgICAgICAgICAgICAgICBhcnJheVtqICsgMV0gPSBhcnJheVtqXTsNCiAgICAgICAgICAgICAgICAgICAgYXJyYXlbal0gPSB0ZW1wOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS4i+i9veWvvOWFpeaVsOaNruaooeadvw0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIGRvd25sb2FkVGVtcCgpew0KICAgICAgICB0aGlzLmltcG9ydEV4Y2VsKHRoaXMudmlld3BhcmFtcy5hcHBEZUxvZ2ljTmFtZSt0aGlzLiR0KCdjb21wb25lbnRzLmFwcERhdGFVcGxvYWRWaWV3LmRhdGF0ZW1wJyksW10pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAieaLqeaWh+S7tg0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIGhhbmRsZVVwTG9hZCgpew0KICAgICAgICB0aGlzLmltcG9ydFN1Y2Nlc3NEYXRhID0gW107DQogICAgICAgICh0aGlzLiRyZWZzLmlucHV0VXBMb2FkIGFzIGFueSkuY2xpY2soKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkuIrkvKDmnI3liqHlmagNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBBcHBEYXRhVXBsb2FkVmlldw0KICAgICAqLw0KICAgIHB1YmxpYyB1cGxvYWRTZXJ2ZXIoKXsNCiAgICAgICAgaWYodGhpcy5pbXBvcnREYXRhQXJyYXkubGVuZ3RoID09IDApew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGxldCB0ZW1wRGF0YUFycmF5OkFycmF5PGFueT4gPSBbXTsNCiAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuaW1wb3J0RGF0YUFycmF5LHRlbXBEYXRhQXJyYXkpOw0KICAgICAgICB0aGlzLmhhc0ltcG9ydGVkID0gdHJ1ZTsNCiAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IHRydWU7DQogICAgICAgIHRoaXMuaW1wb3J0RGF0YUFycmF5ID0gW107DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIHRoaXMuZW50aXR5U2VydmljZS5nZXRTZXJ2aWNlKHRoaXMudmlld3BhcmFtcy5zZXJ2aWNlTmFtZSkudGhlbigoc2VydmljZTphbnkpID0+ew0KICAgICAgICAgICAgc2VydmljZS5JbXBvcnREYXRhKHRoaXMudmlld2RhdGEse25hbWU6dGhpcy5pbXBvcnRJZCxkYXRhOnRlbXBEYXRhQXJyYXl9KS50aGVuKChyZXM6YW55KSA9PnsNCiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQ6YW55ID0gcmVzLmRhdGE7DQogICAgICAgICAgICAgICAgaWYocmVzdWx0ICYmIHJlc3VsdC5yc3QgIT09IDApew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnByb21wdEluZm8gPSAodGhpcy4kdCgnY29tcG9uZW50cy5hcHBEYXRhVXBsb2FkVmlldy5pbXBvcnRmYWlsZWQnKSBhcyBzdHJpbmcpOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkaW5nID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy5pbXBvcnRTdWNjZXNzRGF0YSA9IHJlc3VsdC5kYXRhOw0KICAgICAgICAgICAgICAgIHRoaXMucHJvbXB0SW5mbyA9ICh0aGlzLiR0KCdjb21wb25lbnRzLmFwcERhdGFVcGxvYWRWaWV3LmNvbXBsZXRlZCcpIGFzIHN0cmluZyk7DQogICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IGZhbHNlOw0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcjphbnkpID0+ew0KICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICB0aGlzLnByb21wdEluZm8gPSAodGhpcy4kdCgnY29tcG9uZW50cy5hcHBEYXRhVXBsb2FkVmlldy5pbXBvcnRmYWlsZWQnKSBhcyBzdHJpbmcpOw0KICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOw0KICAgICAgICAgICAgfSkNCiAgICAgICAgfWNhdGNoKGVycm9yKXsNCiAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSBmYWxzZTsNCiAgICAgICAgICAgIHRoaXMucHJvbXB0SW5mbyA9ICh0aGlzLiR0KCdjb21wb25lbnRzLmFwcERhdGFVcGxvYWRWaWV3LmltcG9ydGZhaWxlZCcpIGFzIHN0cmluZyk7DQogICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsNCiAgICAgICAgfTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlr7zlh7pleGNlbA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIGFzeW5jIGltcG9ydEV4Y2VsIChmaWxlbmFtZTpzdHJpbmcsX2RhdGE6YW55KXsNCiAgICAgICAgY29uc3QgdEhlYWRlcjogQXJyYXk8YW55PiA9IFtdOw0KICAgICAgICB0aGlzLmltcG9ydERhdGFNb2RlbC5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHsNCiAgICAgICAgICAgIHRIZWFkZXIucHVzaChpdGVtLmhlYWRlcm5hbWUpOw0KICAgICAgICB9KTsNCiAgICAgICAgLy9jb25zdCBkYXRhID0gYXdhaXQgdGhpcy5mb3JtYXRFeGNlbERhdGEoZmlsdGVyVmFsLCBfZGF0YSk7DQogICAgICAgIGNvbnN0IGRhdGEgPSBfZGF0YT9fZGF0YTpbXTsNCiAgICAgICAgdGhpcy4kZXhwb3J0LmV4cG9ydEV4Y2VsKCkudGhlbigoZXhjZWw6YW55KT0+ew0KICAgICAgICAgICAgZXhjZWwuZXhwb3J0X2pzb25fdG9fZXhjZWwoew0KICAgICAgICAgICAgICAgIGhlYWRlcjogdEhlYWRlciwgLy/ooajlpLQg5b+F5aGrDQogICAgICAgICAgICAgICAgZGF0YTpkYXRhLCAvL+WFt+S9k+aVsOaNriDlv4XloasNCiAgICAgICAgICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUsIC8v6Z2e5b+F5aGrDQogICAgICAgICAgICAgICAgYXV0b1dpZHRoOiB0cnVlLCAvL+mdnuW/heWhqw0KICAgICAgICAgICAgICAgIGJvb2tUeXBlOiAieGxzeCIgLy/pnZ7lv4XloasNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsgDQogICAgfTsNCg0KICAgIC8qKg0KICAgICAqIOehruiupA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIGhhbmRsZU9LKCl7DQogICAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlJyx0aGlzLmltcG9ydFN1Y2Nlc3NEYXRhKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlr7zlhaVFeGNlbA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIGltcG9ydEZpbGUoJGV2ZW50OmFueSkgew0KICAgICAgICBsZXQgb2JqID0gJGV2ZW50LnRhcmdldCB8fCAkZXZlbnQuc3JjRWxlbWVudDsNCiAgICAgICBpZiAoIW9iai5maWxlcykgew0KICAgICAgICAgICByZXR1cm47DQogICAgICAgfQ0KICAgICAgIGxldCBmID0gb2JqLmZpbGVzWzBdOw0KICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOw0KICAgICAgIHJlYWRlci5vbmxvYWQgPSAoZTphbnkpID0+IHsNCiAgICAgICAgICAgbGV0IGRhdGEgPSBlLnRhcmdldC5yZXN1bHQ7DQogICAgICAgICAgIHRoaXMud29ya0Jvb2tEYXRhID0gWExTWC5yZWFkKGRhdGEsIHt0eXBlOiAnYmluYXJ5J30pOw0KICAgICAgICAgICBsZXQgeGxzeERhdGEgPSBYTFNYLnV0aWxzLnNoZWV0X3RvX2pzb24odGhpcy53b3JrQm9va0RhdGEuU2hlZXRzW3RoaXMud29ya0Jvb2tEYXRhLlNoZWV0TmFtZXNbMF1dKTsNCiAgICAgICAgICAgbGV0IGxpc3QxID0gdGhpcy5nZXRGaXJzdFJvdyh0aGlzLndvcmtCb29rRGF0YSk7DQogICAgICAgICAgIHhsc3hEYXRhID0gdGhpcy5BZGRYbHN4RGF0YSh4bHN4RGF0YSwgbGlzdDEpOw0KICAgICAgICAgICB0aGlzLmltcG9ydERhdGFBcnJheSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeGxzeERhdGEpKTsNCiAgICAgICAgICAgKHRoaXMuJHJlZnMuaW5wdXRVcExvYWQgYXMgYW55KS52YWx1ZSA9ICcnOw0KICAgICAgIH07DQogICAgICAgcmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmKTsNCiAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPlmV4Y2Vs56ys5LiA6KGM55qE5YaF5a65DQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgQXBwRGF0YVVwbG9hZFZpZXcNCiAgICAgKi8NCiAgIHB1YmxpYyBnZXRGaXJzdFJvdyh3YjphbnkpIHsNCiAgICAgICAvLy8vIOivu+WPlueahGV4Y2Vs5Y2V5YWD5qC85YaF5a65DQogICAgICAgbGV0IHdiRGF0YSA9IHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzWzBdXTsNCiAgICAgICAvLyDljLnphY1leGNlbOesrOS4gOihjOeahOWGheWuuQ0KICAgICAgIGxldCByZSA9IC9eW0EtWl0xJC87IA0KICAgICAgIGxldCB0ZW1wYXJyID0gW107DQogICAgICAgLy8gZXhjZWznrKzkuIDooYzlhoXlrrnotYvlgLznu5nmlbDnu4QNCiAgICAgICBmb3IgKGxldCBrZXkgaW4gd2JEYXRhKSB7DQogICAgICAgICAgIGlmICh3YkRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkgew0KICAgICAgICAgICAgICAgaWYgKHJlLnRlc3Qoa2V5KSkgew0KICAgICAgICAgICAgICAgICAgIHRlbXBhcnIucHVzaCh3YkRhdGFba2V5XS5oKTsNCiAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgfQ0KICAgICAgIH0NCiAgICAgICByZXR1cm4gdGVtcGFycjsNCiAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWinuWKoOWvueW6lOWtl+auteepuueZveWGheWuuQ0KICAgICAqDQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICBwdWJsaWMgQWRkWGxzeERhdGEoeGxzeERhdGE6YW55LCBsaXN0MTphbnkpIHsNCiAgICAgICAvLyDnqbrnmb3lrZfmrrXmm7/mjaLlgLwNCiAgICAgICBsZXQgYWRkRGF0YSA9IG51bGw7DQogICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4bHN4RGF0YS5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAvLyDopoHooqtKU09O55qE5pWw57uEDQogICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdDEubGVuZ3RoOyBqKyspIHsNCiAgICAgICAgICAgICAgIC8vIGV4Y2Vs56ys5LiA6KGM5YaF5a65DQogICAgICAgICAgICAgICBpZiAoIXhsc3hEYXRhW2ldW2xpc3QxW2pdXSkgew0KICAgICAgICAgICAgICAgICAgIHhsc3hEYXRhW2ldW2xpc3QxW2pdXSA9IGFkZERhdGE7DQogICAgICAgICAgICAgICB9DQogICAgICAgICAgIH0NCiAgICAgICB9DQogICAgICAgcmV0dXJuIHhsc3hEYXRhOw0KICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+W5Zu+6KGo5omA6ZyA5Luj56CB6KGoDQogICAgICogDQogICAgICogQG1lbWJlcm9mIEFwcERhdGFVcGxvYWRWaWV3DQogICAgICovDQogICAgcHVibGljIGFzeW5jIGdldENoYXJ0QWxsQ29kZUxpc3QoKXsNCiAgICAgICAgbGV0IGNvZGVMaXN0TWFwOk1hcDxzdHJpbmcsYW55PiA9IG5ldyBNYXAoKTsNCiAgICAgICAgaWYoT2JqZWN0LnZhbHVlcyh0aGlzLmltcG9ydERhdGFNb2RlbCkubGVuZ3RoID4wKXsNCiAgICAgICAgICAgIGF3YWl0IE9iamVjdC52YWx1ZXModGhpcy5pbXBvcnREYXRhTW9kZWwpLmZvckVhY2goYXN5bmMgKHNpbmdsZURhdGFNb2RlbDphbnkpID0+ew0KICAgICAgICAgICAgICAgIGlmKHNpbmdsZURhdGFNb2RlbC5jb2RlbGlzdCl7DQogICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wQ29kZUxpc3RNYXA6TWFwPGFueSxhbnk+ID0gbmV3IE1hcCgpOw0KICAgICAgICAgICAgICAgICAgICBsZXQgcmVzOmFueSA9IGF3YWl0IHRoaXMuZ2V0Q29kZUxpc3Qoc2luZ2xlRGF0YU1vZGVsLmNvZGVsaXN0KTsNCiAgICAgICAgICAgICAgICAgICAgaWYocmVzICYmIHJlcy5sZW5ndGggPjApew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmZvckVhY2goKGNvZGVMaXN0SXRlbTphbnkpID0+ew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb2RlTGlzdE1hcC5zZXQoY29kZUxpc3RJdGVtLnZhbHVlLGNvZGVMaXN0SXRlbS50ZXh0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgY29kZUxpc3RNYXAuc2V0KHNpbmdsZURhdGFNb2RlbC5jb2RlbGlzdC50YWcsdGVtcENvZGVMaXN0TWFwKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBjb2RlTGlzdE1hcDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bku6PnoIHooagNCiAgICAgKiANCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSANCiAgICAgKiBAbWVtYmVyb2YgQXBwRGF0YVVwbG9hZFZpZXcNCiAgICAgKi8NCiAgICBwdWJsaWMgZ2V0Q29kZUxpc3QoY29kZUxpc3RPYmplY3Q6YW55KTpQcm9taXNlPGFueT57DQogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTphbnkscmVqZWN0OmFueSkgPT57DQogICAgICAgICAgICBpZihjb2RlTGlzdE9iamVjdC50YWcgJiYgT2JqZWN0LmlzKGNvZGVMaXN0T2JqZWN0LnR5cGUsIlNUQVRJQyIpKXsNCiAgICAgICAgICAgICAgICBjb25zdCBjb2RlbGlzdCA9IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0Q29kZUxpc3QoY29kZUxpc3RPYmplY3QudGFnKTsNCiAgICAgICAgICAgICAgICBpZiAoY29kZWxpc3QpIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbLi4uSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb2RlbGlzdC5pdGVtcykpXSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYC0tLS0ke2NvZGVMaXN0T2JqZWN0LnRhZ30tLS0t5Luj56CB6KGo5LiN5a2Y5ZyoYCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfWVsc2UgaWYoY29kZUxpc3RPYmplY3QudGFnICYmIE9iamVjdC5pcyhjb2RlTGlzdE9iamVjdC50eXBlLCJEWU5BTUlDIikpew0KICAgICAgICAgICAgICAgIHRoaXMuY29kZUxpc3RTZXJ2aWNlLmdldEl0ZW1zKGNvZGVMaXN0T2JqZWN0LnRhZykudGhlbigocmVzOmFueSkgPT4gew0KICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7DQogICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yOmFueSkgPT4gew0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgLS0tLSR7Y29kZUxpc3RPYmplY3QudGFnfS0tLS3ku6PnoIHooajkuI3lrZjlnKhgKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSkNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDovazljJbmlbDmja4NCiAgICAgKiANCiAgICAgKiBAbWVtYmVyb2YgQXBwRGF0YVVwbG9hZFZpZXcNCiAgICAgKi8NCiAgICBwdWJsaWMgdHJhbnNmb3JtRGF0YShkYXRhOkFycmF5PGFueT4scmVzdWx0OkFycmF5PGFueT4pew0KICAgICAgICBkYXRhLmZvckVhY2goKGl0ZW06YW55KSA9PnsNCiAgICAgICAgICAgIGxldCBjdXJPYmplY3Q6YW55ID0ge307DQogICAgICAgICAgICBPYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKChlbGU6YW55KSA9PiB7DQogICAgICAgICAgICAgICAgaWYodGhpcy5hbGxGaWVsZE1hcC5nZXQoZWxlKS5jb2RlbGlzdCl7DQogICAgICAgICAgICAgICAgICAgIGxldCBjb2RlbGlzdFRhZzpzdHJpbmcgPSB0aGlzLmFsbEZpZWxkTWFwLmdldChlbGUpLmNvZGVsaXN0LnRhZzsNCiAgICAgICAgICAgICAgICAgICAgIGxldCBjb2RlbGlzdElzTnVtYmVyOmJvb2xlYW4gPSB0aGlzLmFsbEZpZWxkTWFwLmdldChlbGUpLmNvZGVsaXN0LmlzbnVtYmVyOw0KICAgICAgICAgICAgICAgICAgICBsZXQgY3VyQ29kZUxpc3Q6YW55ID0gdGhpcy50cmFuc0NvZGVMaXN0KGNvZGVsaXN0VGFnLGNvZGVsaXN0SXNOdW1iZXIsdHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ck9iamVjdCwgdGhpcy5hbGxGaWVsZE1hcC5nZXQoZWxlKS5uYW1lLCB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3VyQ29kZUxpc3QuZ2V0KGl0ZW1bZWxlXSksDQogICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZSA6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlIDogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZSA6IHRydWUNCiAgICAgICAgICAgICAgICAgICAgfSk7IA0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VyT2JqZWN0LCB0aGlzLmFsbEZpZWxkTWFwLmdldChlbGUpLm5hbWUsIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtW2VsZV0sDQogICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZSA6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlIDogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZSA6IHRydWUNCiAgICAgICAgICAgICAgICAgICAgfSk7IA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VyT2JqZWN0KTsNCiAgICAgICAgfSkNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnv7vor5Hku6PnoIHooagNCiAgICAgKiANCiAgICAgKiBAbWVtYmVyb2YgQXBwRGF0YVVwbG9hZFZpZXcNCiAgICAgKi8NCiAgICBwdWJsaWMgdHJhbnNDb2RlTGlzdChjb2RlTGlzdFRhZzpzdHJpbmcsY29kZWxpc3RJc051bWJlcjpib29sZWFuLGlzVHJhbnNmb3JtOmJvb2xlYW4pew0KICAgICAgICBsZXQgY3VyQ29kZUxpc3Q6YW55ID0gdGhpcy5hbGxDb2RlTGlzdC5nZXQoY29kZUxpc3RUYWcpOw0KICAgICAgICBpZihpc1RyYW5zZm9ybSl7DQogICAgICAgICAgICBsZXQgdGVtcENvZGVsaXN0Ok1hcDxzdHJpbmcsc3RyaW5nPiA9IG5ldyBNYXAoKTsNCiAgICAgICAgICAgIGN1ckNvZGVMaXN0LmZvckVhY2goKGl0ZW06c3RyaW5nLGtleTpzdHJpbmcpID0+ew0KICAgICAgICAgICAgICAgIGxldCB2YWx1ZTphbnkgPSBjb2RlbGlzdElzTnVtYmVyP051bWJlcihrZXkpOmtleTsNCiAgICAgICAgICAgICAgICB0ZW1wQ29kZWxpc3Quc2V0KGl0ZW0sdmFsdWUpOw0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIGN1ckNvZGVMaXN0ID0gdGVtcENvZGVsaXN0Ow0KICAgICAgICB9DQogICAgICAgIHJldHVybiBjdXJDb2RlTGlzdDsNCiAgICB9DQoNCn0NCg=="},null]}
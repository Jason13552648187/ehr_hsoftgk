{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-person\\ygcd-drbar\\ygcd-drbar-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-person\\ygcd-drbar\\ygcd-drbar-base.vue","mtime":1630509411997},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KaW1wb3J0IHsgVnVlLCBDb21wb25lbnQsIFByb3AsIFByb3ZpZGUsIEVtaXQsIFdhdGNoLCBNb2RlbCxJbmplY3QgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsNCmltcG9ydCB7IENyZWF0ZUVsZW1lbnQgfSBmcm9tICd2dWUnOw0KaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7DQppbXBvcnQgeyBDb250cm9sSW50ZXJmYWNlIH0gZnJvbSAnQC9pbnRlcmZhY2UvY29udHJvbCc7DQppbXBvcnQgeyBVSUFjdGlvblRvb2wsVXRpbCB9IGZyb20gJ0AvdXRpbHMnOw0KaW1wb3J0IE5hdkRhdGFTZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9hcHAvbmF2ZGF0YS1zZXJ2aWNlJzsNCmltcG9ydCBQaW1QZXJzb25TZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9waW0tcGVyc29uL3BpbS1wZXJzb24tc2VydmljZSc7DQppbXBvcnQgWUdDRFNlcnZpY2UgZnJvbSAnLi95Z2NkLWRyYmFyLXNlcnZpY2UnOw0KDQoNCg0KQENvbXBvbmVudCh7DQogICAgY29tcG9uZW50czogew0KICAgICAgDQogICAgfQ0KfSkNCmV4cG9ydCBkZWZhdWx0IGNsYXNzIFlHQ0RCYXNlIGV4dGVuZHMgVnVlIGltcGxlbWVudHMgQ29udHJvbEludGVyZmFjZSB7DQoNCiAgICAvKioNCiAgICAgKiDlkI3np7ANCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgbmFtZT86IHN0cmluZzsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvumAmuiur+WvueixoQ0KICAgICAqDQogICAgICogQHR5cGUge1N1YmplY3Q8Vmlld1N0YXRlPn0NCiAgICAgKiBAbWVtYmVyb2YgWUdDREJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyB2aWV3U3RhdGUhOiBTdWJqZWN0PFZpZXdTdGF0ZT47DQoNCiAgICAvKioNCiAgICAgKiDlupTnlKjkuIrkuIvmlocNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIGNvbnRleHQ6IGFueTsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvuWPguaVsA0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgdmlld3BhcmFtczogYW55Ow0KDQogICAgLyoqDQogICAgICog6KeG5Zu+54q25oCB5LqL5Lu2DQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHR5cGUgeyhTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQpfQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyB2aWV3U3RhdGVFdmVudDogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkOw0KDQogICAgLyoqDQogICAgICog6I635Y+W6YOo5Lu257G75Z6LDQogICAgICoNCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBnZXRDb250cm9sVHlwZSgpOiBzdHJpbmcgew0KICAgICAgICByZXR1cm4gJ0RSQkFSJw0KICAgIH0NCg0KDQoNCiAgICAvKioNCiAgICAgKiDorqHmlbDlmajmnI3liqHlr7nosaHpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHtBcnJheTwqPn0NCiAgICAgKiBAbWVtYmVyb2YgWUdDREJhc2UNCiAgICAgKi8gICAgDQogICAgcHVibGljIGNvdW50ZXJTZXJ2aWNlQXJyYXk6QXJyYXk8YW55PiA9IFtdOw0KDQogICAgLyoqDQogICAgICog5bu65p6E6YOo5Lu25pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7WUdDRFNlcnZpY2V9DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIHNlcnZpY2U6IFlHQ0RTZXJ2aWNlID0gbmV3IFlHQ0RTZXJ2aWNlKHsgJHN0b3JlOiB0aGlzLiRzdG9yZSB9KTsNCg0KICAgIC8qKg0KICAgICAqIOWunuS9k+acjeWKoeWvueixoQ0KICAgICAqDQogICAgICogQHR5cGUge1BpbVBlcnNvblNlcnZpY2V9DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIGFwcEVudGl0eVNlcnZpY2U6IFBpbVBlcnNvblNlcnZpY2UgPSBuZXcgUGltUGVyc29uU2VydmljZSh7ICRzdG9yZTogdGhpcy4kc3RvcmUgfSk7DQogICAgDQoNCg0KICAgIC8qKg0KICAgICAqIOWFs+mXreinhuWbvg0KICAgICAqDQogICAgICogQHBhcmFtIHthbnl9IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgWUdDREJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY2xvc2VWaWV3KGFyZ3M6IGFueSk6IHZvaWQgew0KICAgICAgICBsZXQgX3RoaXM6IGFueSA9IHRoaXM7DQogICAgICAgIF90aGlzLiRlbWl0KCdjbG9zZXZpZXcnLCBbYXJnc10pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqICDorqHmlbDlmajliLfmlrANCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBjb3VudGVyUmVmcmVzaCgpew0KICAgICAgICBjb25zdCBfdGhpczphbnkgPXRoaXM7DQogICAgICAgIGlmKF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkgJiYgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5sZW5ndGggPjApew0KICAgICAgICAgICAgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5mb3JFYWNoKChpdGVtOmFueSkgPT57DQogICAgICAgICAgICAgICAgaWYoaXRlbS5yZWZyZXNoRGF0YSAmJiBpdGVtLnJlZnJlc2hEYXRhIGluc3RhbmNlb2YgRnVuY3Rpb24pew0KICAgICAgICAgICAgICAgICAgICBpdGVtLnJlZnJlc2hEYXRhKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSkNCiAgICAgICAgfQ0KICAgIH0NCg0KDQoNCiAgICAvKioNCiAgICAgKiDojrflj5blpJrpobnmlbDmja4NCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHthbnlbXX0NCiAgICAgKiBAbWVtYmVyb2YgWUdDREJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZ2V0RGF0YXMoKTogYW55W10gew0KICAgICAgICByZXR1cm4gdGhpcy5pdGVtczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bljZXpobnmoJENCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBnZXREYXRhKCk6IGFueSB7DQogICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliqDovb3ooYzkuLoNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgbG9hZEFjdGlvbj86IHN0cmluZzsNCg0KICAgIC8qKg0KICAgICAqICDooajljZXmlbDmja4NCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKHtkZWZhdWx0Ont9fSkgcHVibGljIGZvcm1EYXRhPzphbnk7DQoNCiAgICAvKioNCiAgICAgKiDmlbDmja7pgInkuK3pobkNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzZWxlY3Rpb246IGFueSA9IHt9Ow0KDQogICAgLyoqDQogICAgICog5YWz57O75qCP5pWw5o2u6aG5DQogICAgICoNCiAgICAgKiBAdHlwZSB7YW55W119DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIGl0ZW1zOiBhbnlbXSA9IFsNCiAgICAgICAgew0KICAgICAgICAgICAgdGV4dDogIuWRmOW3peS/oeaBryIsDQogICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsDQogICAgICAgICAgICBpZDogImRyaXRlbTI0IiwNCiAgICAgICAgICAgIGljb25jbHM6ICcnLA0KICAgICAgICAgICAgaWNvbjogJy4uLy4uLy4uL2ltZy9qY2dsLzEvZ2VyZW54aW54aS5wbmcnLA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICB0ZXh0OiAi5YiG6YWN5L+h5oGvIiwNCiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSwNCiAgICAgICAgICAgIGlkOiAiZHJpdGVtNyIsDQogICAgICAgICAgICBpY29uY2xzOiAnJywNCiAgICAgICAgICAgIGljb246ICcuLi8uLi8uLi9pbWcvamNnbC8xL2ZlbnBlaXhpbnhpLnBuZycsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIHRleHQ6ICLmlZnogrLkv6Hmga8iLA0KICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLA0KICAgICAgICAgICAgaWQ6ICJkcml0ZW00IiwNCiAgICAgICAgICAgIGljb25jbHM6ICcnLA0KICAgICAgICAgICAgaWNvbjogJy4uLy4uLy4uL2ltZy9qY2dsLzEvamlhb3l1eGlueGkucG5nJywNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgdGV4dDogIuivreiogOiDveWKmyIsDQogICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsDQogICAgICAgICAgICBpZDogImRyaXRlbTE0IiwNCiAgICAgICAgICAgIGljb25jbHM6ICcnLA0KICAgICAgICAgICAgaWNvbjogJy4uLy4uLy4uL2ltZy9qY2dsLzEveXV5YW5zaHVpcGluZy5wbmcnLA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICB0ZXh0OiAi5a625bqt5oOF5Ya1IiwNCiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSwNCiAgICAgICAgICAgIGlkOiAiZHJpdGVtMyIsDQogICAgICAgICAgICBpY29uY2xzOiAnJywNCiAgICAgICAgICAgIGljb246ICcuLi8uLi8uLi9pbWcvamNnbC8xL2ppYXRpbmdxaW5na3VhbmcucG5nJywNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgdGV4dDogIuW3peS9nOWxpeWOhiIsDQogICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsDQogICAgICAgICAgICBpZDogImRyaXRlbTEiLA0KICAgICAgICAgICAgaWNvbmNsczogJycsDQogICAgICAgICAgICBpY29uOiAnLi4vLi4vLi4vaW1nL2pjZ2wvMS9nb25nenVvbHZsaS5wbmcnLA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICB0ZXh0OiAi5qGj5qGI5L+h5oGvIiwNCiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSwNCiAgICAgICAgICAgIGlkOiAiZHJpdGVtMTgiLA0KICAgICAgICAgICAgaWNvbmNsczogJycsDQogICAgICAgICAgICBpY29uOiAnLi4vLi4vLi4vaW1nL2pjZ2wvMS9kYW5nYW54aW54aS5wbmcnLA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICB0ZXh0OiAi57up5pWI5L+h5oGvIiwNCiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSwNCiAgICAgICAgICAgIGlkOiAiZHJpdGVtNiIsDQogICAgICAgICAgICBpY29uY2xzOiAnJywNCiAgICAgICAgICAgIGljb246ICcuLi8uLi8uLi9pbWcvamNnbC8xL2ppeGlhb3hpbnhpLnBuZycsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIHRleHQ6ICLogIPli6Tkv6Hmga8iLA0KICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLA0KICAgICAgICAgICAgaWQ6ICJkcml0ZW0yMiIsDQogICAgICAgICAgICBpY29uY2xzOiAnJywNCiAgICAgICAgICAgIGljb246ICcuLi8uLi8uLi9pbWcvamNnbC8xL2thb3FpbnhpbnhpLnBuZycsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIHRleHQ6ICLlkIjlkIzkv6Hmga8iLA0KICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLA0KICAgICAgICAgICAgaWQ6ICJkcml0ZW05IiwNCiAgICAgICAgICAgIGljb25jbHM6ICcnLA0KICAgICAgICAgICAgaWNvbjogJy4uLy4uLy4uL2ltZy9qY2dsLzEvaGV0b25neGlueGkucG5nJywNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgdGV4dDogIuivgeS5puS/oeaBryIsDQogICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsDQogICAgICAgICAgICBpZDogImRyaXRlbTI2IiwNCiAgICAgICAgICAgIGljb25jbHM6ICcnLA0KICAgICAgICAgICAgaWNvbjogJy4uLy4uLy4uL2ltZy9qY2dsLzEvemhpeWV6aWdlbXVsdWd1YW5saS5wbmcnLA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICB0ZXh0OiAi5aWW5Yqx5oOp572aIiwNCiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSwNCiAgICAgICAgICAgIGlkOiAiZHJpdGVtMjMiLA0KICAgICAgICAgICAgaWNvbmNsczogJycsDQogICAgICAgICAgICBpY29uOiAnLi4vLi4vLi4vaW1nL2pjZ2wvMS9qaWFuZ2xpY2hlbmdmYS5wbmcnLA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICB0ZXh0OiAi5Z+56K6t6K6w5b2VIiwNCiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSwNCiAgICAgICAgICAgIGlkOiAiZHJpdGVtMjAiLA0KICAgICAgICAgICAgaWNvbmNsczogJycsDQogICAgICAgICAgICBpY29uOiAnLi4vLi4vLi4vaW1nL2tmZ2wvMS9wZWl4dW5qaWx1Z3VhbmxpLnBuZycsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIHRleHQ6ICLlhpvovazlubLpg6giLA0KICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLA0KICAgICAgICAgICAgaWQ6ICJkcml0ZW0xNyIsDQogICAgICAgICAgICBpY29uY2xzOiAnJywNCiAgICAgICAgICAgIGljb246ICcuLi8uLi8uLi9pbWcvamNnbC8xL2p1bnpodWFuZ2FuYnUucG5nJywNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgdGV4dDogIuWtpuacr+aIkOaenCIsDQogICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsDQogICAgICAgICAgICBpZDogImRyaXRlbTI3IiwNCiAgICAgICAgICAgIGljb25jbHM6ICcnLA0KICAgICAgICAgICAgaWNvbjogJy4uLy4uLy4uL2ltZy9qY2dsLzEva2V5YW5jaGVuZ2d1by5wbmcnLA0KICAgICAgICB9LA0KICAgIF07DQoNCiAgICAvKioNCiAgICAgKiDlhbPns7vmoI/mlbDmja7pobnlr7zoiKrlj4LmlbDpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHthbnlbXX0NCiAgICAgKiBAbWVtYmVyb2YgWUdDREJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgbmF2UGFyYW1zQXJyYXk6QXJyYXk8YW55PiA9IFsNCiAgICAgICAgew0KICAgICAgICAgICAgaWQ6J2RyaXRlbTI0JywNCiAgICAgICAgICAgIGxvY2FsQ29udGV4dDpudWxsLA0KICAgICAgICAgICAgbG9jYWxWaWV3UGFyYW06bnVsbA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICBpZDonZHJpdGVtNycsDQogICAgICAgICAgICBsb2NhbENvbnRleHQ6bnVsbCwNCiAgICAgICAgICAgIGxvY2FsVmlld1BhcmFtOm51bGwNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgaWQ6J2RyaXRlbTQnLA0KICAgICAgICAgICAgbG9jYWxDb250ZXh0Om51bGwsDQogICAgICAgICAgICBsb2NhbFZpZXdQYXJhbTpudWxsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIGlkOidkcml0ZW0xNCcsDQogICAgICAgICAgICBsb2NhbENvbnRleHQ6bnVsbCwNCiAgICAgICAgICAgIGxvY2FsVmlld1BhcmFtOm51bGwNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgaWQ6J2RyaXRlbTMnLA0KICAgICAgICAgICAgbG9jYWxDb250ZXh0Om51bGwsDQogICAgICAgICAgICBsb2NhbFZpZXdQYXJhbTpudWxsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIGlkOidkcml0ZW0xJywNCiAgICAgICAgICAgIGxvY2FsQ29udGV4dDpudWxsLA0KICAgICAgICAgICAgbG9jYWxWaWV3UGFyYW06bnVsbA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICBpZDonZHJpdGVtMTgnLA0KICAgICAgICAgICAgbG9jYWxDb250ZXh0Om51bGwsDQogICAgICAgICAgICBsb2NhbFZpZXdQYXJhbTpudWxsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIGlkOidkcml0ZW02JywNCiAgICAgICAgICAgIGxvY2FsQ29udGV4dDpudWxsLA0KICAgICAgICAgICAgbG9jYWxWaWV3UGFyYW06bnVsbA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICBpZDonZHJpdGVtMjInLA0KICAgICAgICAgICAgbG9jYWxDb250ZXh0Om51bGwsDQogICAgICAgICAgICBsb2NhbFZpZXdQYXJhbTpudWxsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIGlkOidkcml0ZW05JywNCiAgICAgICAgICAgIGxvY2FsQ29udGV4dDpudWxsLA0KICAgICAgICAgICAgbG9jYWxWaWV3UGFyYW06bnVsbA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICBpZDonZHJpdGVtMjYnLA0KICAgICAgICAgICAgbG9jYWxDb250ZXh0Om51bGwsDQogICAgICAgICAgICBsb2NhbFZpZXdQYXJhbTp7c3Jma2V5OiJjdXJ1c2VyIn0NCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgaWQ6J2RyaXRlbTIzJywNCiAgICAgICAgICAgIGxvY2FsQ29udGV4dDpudWxsLA0KICAgICAgICAgICAgbG9jYWxWaWV3UGFyYW06bnVsbA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICBpZDonZHJpdGVtMjAnLA0KICAgICAgICAgICAgbG9jYWxDb250ZXh0Om51bGwsDQogICAgICAgICAgICBsb2NhbFZpZXdQYXJhbTpudWxsDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIGlkOidkcml0ZW0xNycsDQogICAgICAgICAgICBsb2NhbENvbnRleHQ6bnVsbCwNCiAgICAgICAgICAgIGxvY2FsVmlld1BhcmFtOm51bGwNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgaWQ6J2RyaXRlbTI3JywNCiAgICAgICAgICAgIGxvY2FsQ29udGV4dDpudWxsLA0KICAgICAgICAgICAgbG9jYWxWaWV3UGFyYW06e3NyZmtleToiY3VydXNlciJ9DQogICAgICAgIH0NCiAgICBdOw0KDQogICAgLyoqDQogICAgICog6buY6K6k5omT5byA6aG5DQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nW119DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIGRlZmF1bHRPcGVuZWRzOiBzdHJpbmdbXSA9IFtdOw0KDQogICAgLyoqDQogICAgICog54i25pWw5o2uDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIHBhcmVudERhdGE6IGFueSA9IHt9Ow0KDQogICAgLyoqDQogICAgICog5a695bqmDQogICAgICoNCiAgICAgKiBAdHlwZSB7bnVtYmVyfQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyID0gMjQwOw0KDQogICAgLyoqDQogICAgICog55Sf5ZG95ZGo5pyfDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgWUdDREJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY3JlYXRlZCgpOiB2b2lkIHsNCiAgICAgICAgaWYgKHRoaXMudmlld1N0YXRlKSB7DQogICAgICAgICAgICB0aGlzLnZpZXdTdGF0ZUV2ZW50ID0gdGhpcy52aWV3U3RhdGUuc3Vic2NyaWJlKCh7IHRhZywgYWN0aW9uLCBkYXRhIH0pID0+IHsNCiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5pcyh0YWcsIHRoaXMubmFtZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdzdGF0ZScsIGFjdGlvbikpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSAhdGhpcy5jb250ZXh0LnBpbXBlcnNvbiA/IHRydWUgOiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtRGlzYWJsZWQodGhpcy5pdGVtcywgc3RhdGUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgIHRoaXMub25TZWxlY3QodGhpcy5pdGVtc1swXS5pZCkNCiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdGlvbmNoYW5nZScsIFt0aGlzLml0ZW1zWzBdXSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIHZ1ZSDnlJ/lkb3lkajmnJ8NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBkZXN0cm95ZWQoKSB7DQogICAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZUV2ZW50KSB7DQogICAgICAgICAgICB0aGlzLnZpZXdTdGF0ZUV2ZW50LnVuc3Vic2NyaWJlKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5blhbPns7vpobkNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0geyp9IFthcmc9e31dDQogICAgICogQHJldHVybnMgeyp9DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIGdldERSQmFySXRlbShhcmc6IGFueSA9IHt9KTogYW55IHsNCiAgICAgICAgbGV0IGV4cG1vZGUgPSBhcmcubm9kZXR5cGU7DQogICAgICAgIGlmICghZXhwbW9kZSkgew0KICAgICAgICAgICAgZXhwbW9kZSA9ICcnOw0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXMoZXhwbW9kZSwgJ2RyaXRlbTMnKSkgew0KICAgICAgICAgICAgcmV0dXJuIHsgIA0KICAgICAgICAgICAgICAgIHZpZXduYW1lOiAncGltZmFtaW5mb3BpbWZpbS1ncmlkLXZpZXcnLCANCiAgICAgICAgICAgICAgICBwYXJlbnRkYXRham86IHt9LA0KCQkJfTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoT2JqZWN0LmlzKGV4cG1vZGUsICdkcml0ZW0yMCcpKSB7DQogICAgICAgICAgICByZXR1cm4geyAgDQogICAgICAgICAgICAgICAgdmlld25hbWU6ICd0cm10cmlhbnBlcnNvbmdyaWQtdmlldycsIA0KICAgICAgICAgICAgICAgIHBhcmVudGRhdGFqbzoge30sDQoJCQl9Ow0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXMoZXhwbW9kZSwgJ2RyaXRlbTE0JykpIHsNCiAgICAgICAgICAgIHJldHVybiB7ICANCiAgICAgICAgICAgICAgICB2aWV3bmFtZTogJ3BpbWxhbmd1YWdlYWJpbGl0eXl5bmxncmlkLXZpZXcnLCANCiAgICAgICAgICAgICAgICBwYXJlbnRkYXRham86IHt9LA0KCQkJfTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoT2JqZWN0LmlzKGV4cG1vZGUsICdkcml0ZW0yMycpKSB7DQogICAgICAgICAgICByZXR1cm4geyAgDQogICAgICAgICAgICAgICAgdmlld25hbWU6ICdwaW1yZXdhcmRwdW5pc2htZW50cGltLWphbmdsLWdyaWQtdmlldycsIA0KICAgICAgICAgICAgICAgIHBhcmVudGRhdGFqbzoge30sDQoJCQl9Ow0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXMoZXhwbW9kZSwgJ2RyaXRlbTQnKSkgew0KICAgICAgICAgICAgcmV0dXJuIHsgIA0KICAgICAgICAgICAgICAgIHZpZXduYW1lOiAncGltZWR1Y2F0aW9ucGltLWVkdS1ncmlkLXZpZXcnLCANCiAgICAgICAgICAgICAgICBwYXJlbnRkYXRham86IHt9LA0KCQkJfTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoT2JqZWN0LmlzKGV4cG1vZGUsICdkcml0ZW0yMicpKSB7DQogICAgICAgICAgICByZXR1cm4geyAgDQogICAgICAgICAgICAgICAgdmlld25hbWU6ICdhdHRlbmRhbmNlbXJlcG9ydG14d3NjLWdyaWQtdmlldycsIA0KICAgICAgICAgICAgICAgIHBhcmVudGRhdGFqbzoge30sDQoJCQl9Ow0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXMoZXhwbW9kZSwgJ2RyaXRlbTcnKSkgew0KICAgICAgICAgICAgcmV0dXJuIHsgIA0KICAgICAgICAgICAgICAgIHZpZXduYW1lOiAncGltZGlzdGlyYnV0aW9ueWdmZW4tcGVpLWdyaWQtdmlldycsIA0KICAgICAgICAgICAgICAgIHBhcmVudGRhdGFqbzoge30sDQoJCQl9Ow0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXMoZXhwbW9kZSwgJ2RyaXRlbTI0JykpIHsNCiAgICAgICAgICAgIHJldHVybiB7ICANCiAgICAgICAgICAgICAgICB2aWV3bmFtZTogJ3BpbXBlcnNvbnpkZWRpdC12aWV3JywgDQogICAgICAgICAgICAgICAgcGFyZW50ZGF0YWpvOiB7fSwNCgkJCX07DQogICAgICAgIH0NCiAgICAgICAgaWYgKE9iamVjdC5pcyhleHBtb2RlLCAnZHJpdGVtNicpKSB7DQogICAgICAgICAgICByZXR1cm4geyAgDQogICAgICAgICAgICAgICAgdmlld25hbWU6ICdwaW1hY2hpZXZlbWVudHNwaW0taml4LWdyaWQtdmlldycsIA0KICAgICAgICAgICAgICAgIHBhcmVudGRhdGFqbzoge30sDQoJCQl9Ow0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXMoZXhwbW9kZSwgJ2RyaXRlbTI3JykpIHsNCiAgICAgICAgICAgIHJldHVybiB7ICANCiAgICAgICAgICAgICAgICB2aWV3bmFtZTogJ3BpbXBlcnNvbnhzY2dlZGl0LXZpZXcnLCANCiAgICAgICAgICAgICAgICBwYXJlbnRkYXRham86IHt9LA0KCQkJfTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoT2JqZWN0LmlzKGV4cG1vZGUsICdkcml0ZW05JykpIHsNCiAgICAgICAgICAgIHJldHVybiB7ICANCiAgICAgICAgICAgICAgICB2aWV3bmFtZTogJ3BpbWNvbnRyYWN0d3NzZ3JpZC12aWV3JywgDQogICAgICAgICAgICAgICAgcGFyZW50ZGF0YWpvOiB7fSwNCgkJCX07DQogICAgICAgIH0NCiAgICAgICAgaWYgKE9iamVjdC5pcyhleHBtb2RlLCAnZHJpdGVtMjYnKSkgew0KICAgICAgICAgICAgcmV0dXJuIHsgIA0KICAgICAgICAgICAgICAgIHZpZXduYW1lOiAncGltcGVyc29uemh6Y2VkaXQtdmlldycsIA0KICAgICAgICAgICAgICAgIHBhcmVudGRhdGFqbzoge30sDQoJCQl9Ow0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXMoZXhwbW9kZSwgJ2RyaXRlbTEnKSkgew0KICAgICAgICAgICAgcmV0dXJuIHsgIA0KICAgICAgICAgICAgICAgIHZpZXduYW1lOiAncGltd29ya2hpc3RvcnlwaW0td29yay1ncmlkLXZpZXcnLCANCiAgICAgICAgICAgICAgICBwYXJlbnRkYXRham86IHt9LA0KCQkJfTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoT2JqZWN0LmlzKGV4cG1vZGUsICdkcml0ZW0xNycpKSB7DQogICAgICAgICAgICByZXR1cm4geyAgDQogICAgICAgICAgICAgICAgdmlld25hbWU6ICdwaW1hcm15Y2FkcmVzYXJteWdyaWQtdmlldycsIA0KICAgICAgICAgICAgICAgIHBhcmVudGRhdGFqbzoge30sDQoJCQl9Ow0KICAgICAgICB9DQogICAgICAgIGlmIChPYmplY3QuaXMoZXhwbW9kZSwgJ2RyaXRlbTE4JykpIHsNCiAgICAgICAgICAgIHJldHVybiB7ICANCiAgICAgICAgICAgICAgICB2aWV3bmFtZTogJ3BpbWFyY2hpdmVzcGltLWRhbmdhLWdyaWQtdmlldycsIA0KICAgICAgICAgICAgICAgIHBhcmVudGRhdGFqbzoge30sDQoJCQl9Ow0KICAgICAgICB9DQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5aSE55CG5pWw5o2uDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHthbnlbXX0gaXRlbXMNCiAgICAgKiBAbWVtYmVyb2YgWUdDREJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZGF0YVByb2Nlc3MoaXRlbXM6IGFueVtdKTogdm9pZCB7DQogICAgICAgIGl0ZW1zLmZvckVhY2goKF9pdGVtOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmIChfaXRlbS5leHBhbmRlZCkgew0KICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdE9wZW5lZHMucHVzaChfaXRlbS5pZCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIF9pdGVtLmRpc2FibGVkID0gZmFsc2U7DQogICAgICAgICAgICBpZiAoX2l0ZW0uaXRlbXMgJiYgQXJyYXkuaXNBcnJheShfaXRlbS5pdGVtcykgJiYgX2l0ZW0uaXRlbXMubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgIHRoaXMuZGF0YVByb2Nlc3MoX2l0ZW0uaXRlbXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5blrZDpobkNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGl0ZW1zDQogICAgICogQHBhcmFtIHtzdHJpbmd9IGlkDQogICAgICogQHJldHVybnMgeyp9DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIGdldEl0ZW0oaXRlbXM6IGFueVtdLCBpZDogc3RyaW5nKTogYW55IHsNCiAgICAgICAgY29uc3QgaXRlbTogYW55ID0ge307DQogICAgICAgIGl0ZW1zLnNvbWUoKF9pdGVtOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmIChPYmplY3QuaXMoX2l0ZW0uaWQsIGlkKSkgew0KICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXRlbSwgX2l0ZW0pOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKF9pdGVtLml0ZW1zICYmIF9pdGVtLml0ZW1zLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICBjb25zdCBzdWJJdGVtID0gdGhpcy5nZXRJdGVtKF9pdGVtLml0ZW1zLCBpZCk7DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN1Ykl0ZW0pLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdGVtLCBzdWJJdGVtKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9KTsNCiAgICAgICAgcmV0dXJuIGl0ZW07DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yid5aeL5YyW5a+86Iiq5Y+C5pWwDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IGRySXRlbQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBpbml0TmF2UGFyYW0oZHJJdGVtOmFueSl7DQogICAgICAgIGxldCByZXR1cm5OYXZQYXJhbTphbnkgPSB7fTsNCiAgICAgICAgaWYoZHJJdGVtICYmIGRySXRlbS5pZCl7DQogICAgICAgICAgICBsZXQgY3VyRFJJdGVtOmFueSA9IHRoaXMubmF2UGFyYW1zQXJyYXkuZmluZCgoaXRlbTphbnkpID0+ew0KICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuaXMoaXRlbS5pZCxkckl0ZW0uaWQpOw0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIGlmKGN1ckRSSXRlbSl7DQogICAgICAgICAgICAgICAgbGV0IGxvY2FsQ29udGV4dDphbnkgPSBjdXJEUkl0ZW0ubG9jYWxDb250ZXh0Ow0KICAgICAgICAgICAgICAgIGxldCBsb2NhbFZpZXdQYXJhbTphbnkgPSBjdXJEUkl0ZW0ubG9jYWxWaWV3UGFyYW07DQogICAgICAgICAgICAgICAgaWYobG9jYWxDb250ZXh0ICYmIE9iamVjdC5rZXlzKGxvY2FsQ29udGV4dCkubGVuZ3RoID4wKXsNCiAgICAgICAgICAgICAgICAgICAgbGV0IF9jb250ZXh0OmFueSA9IHRoaXMuJHV0aWwuY29tcHV0ZWROYXZEYXRhKHRoaXMuZm9ybURhdGEsdGhpcy5jb250ZXh0LHRoaXMudmlld3BhcmFtcyxsb2NhbENvbnRleHQpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm5OYXZQYXJhbS5sb2NhbENvbnRleHQgPSBfY29udGV4dDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYobG9jYWxWaWV3UGFyYW0gJiYgT2JqZWN0LmtleXMobG9jYWxWaWV3UGFyYW0pLmxlbmd0aCA+MCl7DQogICAgICAgICAgICAgICAgICAgIGxldCBfcGFyYW1zOmFueSA9IHRoaXMuJHV0aWwuY29tcHV0ZWROYXZEYXRhKHRoaXMuZm9ybURhdGEsdGhpcy5jb250ZXh0LHRoaXMudmlld3BhcmFtcyxsb2NhbFZpZXdQYXJhbSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybk5hdlBhcmFtLmxvY2FsVmlld1BhcmFtID0gX3BhcmFtczsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybk5hdlBhcmFtOw0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDoioLngrnpgInkuK0NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIG9uU2VsZWN0KCRldmVudDogYW55KTogdm9pZCB7DQogICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmdldEl0ZW0odGhpcy5pdGVtcywgJGV2ZW50KTsNCiAgICAgICAgaWYgKE9iamVjdC5pcyhpdGVtLmlkLCB0aGlzLnNlbGVjdGlvbi5pZCkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3Rpb25jaGFuZ2UnLCBbaXRlbV0pOw0KICAgICAgICBsZXQgbG9jYWxOYXZQYXJhbTphbnkgPSB0aGlzLmluaXROYXZQYXJhbShpdGVtKTsNCiAgICAgICAgY29uc3QgcmVmdmlldyA9IHRoaXMuZ2V0RFJCYXJJdGVtKHsgbm9kZXR5cGU6IGl0ZW0uaWQgfSk7DQogICAgICAgIHRoaXMuc2VsZWN0aW9uID0ge307DQogICAgICAgIGNvbnN0IF9jb250ZXh0OiBhbnkgPSB7IC4uLkpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSkgfTsNCiAgICAgICAgaWYobG9jYWxOYXZQYXJhbSAmJiBsb2NhbE5hdlBhcmFtLmxvY2FsQ29udGV4dCl7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKF9jb250ZXh0LGxvY2FsTmF2UGFyYW0ubG9jYWxDb250ZXh0KTsNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBfcGFyYW1zOiBhbnkgPSB7fTsNCiAgICAgICAgaWYobG9jYWxOYXZQYXJhbSAmJiBsb2NhbE5hdlBhcmFtLmxvY2FsVmlld1BhcmFtKXsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oX3BhcmFtcyxsb2NhbE5hdlBhcmFtLmxvY2FsVmlld1BhcmFtKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAocmVmdmlldyAmJiByZWZ2aWV3LnBhcmVudGRhdGFqbykgew0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihfY29udGV4dCwgcmVmdmlldy5wYXJlbnRkYXRham8pOw0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnNlbGVjdGlvbiwgeyB2aWV3OiB7IHZpZXduYW1lOiByZWZ2aWV3LnZpZXduYW1lIH0sIGRhdGE6IF9jb250ZXh0LCBwYXJhbTogX3BhcmFtcyB9KTsNCiAgICAgICAgfQ0KICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuc2VsZWN0aW9uLCBpdGVtKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlrZDoioLngrnmiZPlvIANCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50DQogICAgICogQG1lbWJlcm9mIFlHQ0RCYXNlDQogICAgICovDQogICAgcHVibGljIG9uT3BlbigkZXZlbnQ6IGFueSk6IHZvaWQgew0KICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5nZXRJdGVtKHRoaXMuaXRlbXMsICRldmVudCk7DQogICAgICAgIGlmIChPYmplY3QuaXMoaXRlbS5pZCwgdGhpcy5zZWxlY3Rpb24uaWQpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSB7fTsNCiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnNlbGVjdGlvbiwgaXRlbSk7DQogICAgICAgIGlmIChPYmplY3QuaXMoaXRlbS5pZCwgJ2Zvcm0nKSB8fCAoaXRlbS52aWV3bmFtZSAmJiAhT2JqZWN0LmlzKGl0ZW0udmlld25hbWUsICcnKSkpIHsNCiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdGlvbmNoYW5nZScsIFt0aGlzLnNlbGVjdGlvbl0pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5a2Q6IqC54K55YWz6ZetDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9ICRldmVudA0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBvbkNsb3NlKCRldmVudDogYW55KTogdm9pZCB7DQogICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmdldEl0ZW0odGhpcy5pdGVtcywgJGV2ZW50KTsNCiAgICAgICAgaWYgKE9iamVjdC5pcyhpdGVtLmlkLCB0aGlzLnNlbGVjdGlvbi5pZCkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IHt9Ow0KICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuc2VsZWN0aW9uLCBpdGVtKTsNCiAgICAgICAgaWYgKE9iamVjdC5pcyhpdGVtLmlkLCAnZm9ybScpIHx8IChpdGVtLnZpZXduYW1lICYmICFPYmplY3QuaXMoaXRlbS52aWV3bmFtZSwgJycpKSkgew0KICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0aW9uY2hhbmdlJywgW3RoaXMuc2VsZWN0aW9uXSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDorr7nva7lhbPns7vpobnnirbmgIENCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGl0ZW1zDQogICAgICogQHBhcmFtIHtib29sZWFufSBzdGF0ZQ0KICAgICAqIEBtZW1iZXJvZiBZR0NEQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzZXRJdGVtRGlzYWJsZWQoaXRlbXM6IGFueVtdLCBzdGF0ZTogYm9vbGVhbikgew0KICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmICghT2JqZWN0LmlzKGl0ZW0uaWQsICdmb3JtJykpIHsNCiAgICAgICAgICAgICAgICBpdGVtLmRpc2FibGVkID0gc3RhdGU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoaXRlbS5pdGVtcyAmJiBBcnJheS5pc0FycmF5KGl0ZW0uaXRlbXMpKSB7DQogICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtRGlzYWJsZWQoaXRlbS5pdGVtcywgc3RhdGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCn0NCg=="},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-contract\\lab-services-edit-grid-form\\lab-services-edit-grid-form-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-contract\\lab-services-edit-grid-form\\lab-services-edit-grid-form-base.vue","mtime":1630509411427},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KaW1wb3J0IHsgVnVlLCBDb21wb25lbnQsIFByb3AsIFByb3ZpZGUsIEVtaXQsIFdhdGNoLCBNb2RlbCxJbmplY3QgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsNCmltcG9ydCB7IENyZWF0ZUVsZW1lbnQgfSBmcm9tICd2dWUnOw0KaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7DQppbXBvcnQgeyBDb250cm9sSW50ZXJmYWNlIH0gZnJvbSAnQC9pbnRlcmZhY2UvY29udHJvbCc7DQppbXBvcnQgeyBVSUFjdGlvblRvb2wsVXRpbCB9IGZyb20gJ0AvdXRpbHMnOw0KaW1wb3J0IE5hdkRhdGFTZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9hcHAvbmF2ZGF0YS1zZXJ2aWNlJzsNCmltcG9ydCBQaW1Db250cmFjdFNlcnZpY2UgZnJvbSAnQC9zZXJ2aWNlL3BpbS1jb250cmFjdC9waW0tY29udHJhY3Qtc2VydmljZSc7DQppbXBvcnQgTGFiU2VydmljZXNfRWRpdEdyaWRTZXJ2aWNlIGZyb20gJy4vbGFiLXNlcnZpY2VzLWVkaXQtZ3JpZC1mb3JtLXNlcnZpY2UnOw0KDQppbXBvcnQgeyBGb3JtQnV0dG9uTW9kZWwsIEZvcm1QYWdlTW9kZWwsIEZvcm1JdGVtTW9kZWwsIEZvcm1EUlVJUGFydE1vZGVsLCBGb3JtUGFydE1vZGVsLCBGb3JtR3JvdXBQYW5lbE1vZGVsLCBGb3JtSUZyYW1lTW9kZWwsIEZvcm1Sb3dJdGVtTW9kZWwsIEZvcm1UYWJQYWdlTW9kZWwsIEZvcm1UYWJQYW5lbE1vZGVsLCBGb3JtVXNlckNvbnRyb2xNb2RlbCB9IGZyb20gJ0AvbW9kZWwvZm9ybS1kZXRhaWwnOw0KaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJzsNCg0KDQpAQ29tcG9uZW50KHsNCiAgICBjb21wb25lbnRzOiB7DQogICAgICANCiAgICB9DQp9KQ0KZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlIGV4dGVuZHMgVnVlIGltcGxlbWVudHMgQ29udHJvbEludGVyZmFjZSB7DQoNCiAgICAvKioNCiAgICAgKiDlkI3np7ANCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIG5hbWU/OiBzdHJpbmc7DQoNCiAgICAvKioNCiAgICAgKiDop4blm77pgJrorq/lr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtTdWJqZWN0PFZpZXdTdGF0ZT59DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIHZpZXdTdGF0ZSE6IFN1YmplY3Q8Vmlld1N0YXRlPjsNCg0KICAgIC8qKg0KICAgICAqIOW6lOeUqOS4iuS4i+aWhw0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIGNvbnRleHQ6IGFueTsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvuWPguaVsA0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIHZpZXdwYXJhbXM6IGFueTsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvueKtuaAgeS6i+S7tg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHsoU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkKX0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIHZpZXdTdGF0ZUV2ZW50OiBTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQ7DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bpg6jku7bnsbvlnosNCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBnZXRDb250cm9sVHlwZSgpOiBzdHJpbmcgew0KICAgICAgICByZXR1cm4gJ0ZPUk0nDQogICAgfQ0KDQoNCg0KICAgIC8qKg0KICAgICAqIOiuoeaVsOWZqOacjeWKoeWvueixoembhuWQiA0KICAgICAqDQogICAgICogQHR5cGUge0FycmF5PCo+fQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8gICAgDQogICAgcHVibGljIGNvdW50ZXJTZXJ2aWNlQXJyYXk6QXJyYXk8YW55PiA9IFtdOw0KDQogICAgLyoqDQogICAgICog5bu65p6E6YOo5Lu25pyN5Yqh5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7TGFiU2VydmljZXNfRWRpdEdyaWRTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgc2VydmljZTogTGFiU2VydmljZXNfRWRpdEdyaWRTZXJ2aWNlID0gbmV3IExhYlNlcnZpY2VzX0VkaXRHcmlkU2VydmljZSh7ICRzdG9yZTogdGhpcy4kc3RvcmUgfSk7DQoNCiAgICAvKioNCiAgICAgKiDlrp7kvZPmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtQaW1Db250cmFjdFNlcnZpY2V9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBhcHBFbnRpdHlTZXJ2aWNlOiBQaW1Db250cmFjdFNlcnZpY2UgPSBuZXcgUGltQ29udHJhY3RTZXJ2aWNlKHsgJHN0b3JlOiB0aGlzLiRzdG9yZSB9KTsNCiAgICANCg0KDQogICAgLyoqDQogICAgICog5YWz6Zet6KeG5Zu+DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueX0gYXJncw0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY2xvc2VWaWV3KGFyZ3M6IGFueSk6IHZvaWQgew0KICAgICAgICBsZXQgX3RoaXM6IGFueSA9IHRoaXM7DQogICAgICAgIF90aGlzLiRlbWl0KCdjbG9zZXZpZXcnLCBbYXJnc10pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqICDorqHmlbDlmajliLfmlrANCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY291bnRlclJlZnJlc2goKXsNCiAgICAgICAgY29uc3QgX3RoaXM6YW55ID10aGlzOw0KICAgICAgICBpZihfdGhpcy5jb3VudGVyU2VydmljZUFycmF5ICYmIF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkubGVuZ3RoID4wKXsNCiAgICAgICAgICAgIF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkuZm9yRWFjaCgoaXRlbTphbnkpID0+ew0KICAgICAgICAgICAgICAgIGlmKGl0ZW0ucmVmcmVzaERhdGEgJiYgaXRlbS5yZWZyZXNoRGF0YSBpbnN0YW5jZW9mIEZ1bmN0aW9uKXsNCiAgICAgICAgICAgICAgICAgICAgaXRlbS5yZWZyZXNoRGF0YSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pDQogICAgICAgIH0NCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIOW3peS9nOa1geWuoeaJueaEj+ingeaOp+S7tue7keWumuWAvA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzcmZ3Zm1lbW86c3RyaW5nID0gIiI7DQogICAgDQogICAgLyoqDQogICAgICog6I635Y+W5aSa6aG55pWw5o2uDQogICAgICoNCiAgICAgKiBAcmV0dXJucyB7YW55W119DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBnZXREYXRhcygpOiBhbnlbXSB7DQogICAgICAgIHJldHVybiBbdGhpcy5kYXRhXTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bljZXpobnmoJENCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZ2V0RGF0YSgpOiBhbnkgew0KICAgICAgICByZXR1cm4gdGhpcy5kYXRhOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaYr+WQpum7mOiupOS/neWtmA0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKHsgZGVmYXVsdDogZmFsc2UgfSkgcHVibGljIGF1dG9zYXZlPzogYm9vbGVhbjsNCg0KICAgIC8qKg0KICAgICAqIOaYvuekuuWkhOeQhuaPkOekug0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKHsgZGVmYXVsdDogdHJ1ZSB9KSBwdWJsaWMgc2hvd0J1c3lJbmRpY2F0b3I/OiBib29sZWFuOw0KDQogICAgLyoqDQogICAgICog6YOo5Lu26KGM5Li6LS1zdWJtaXQNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIFdGU3VibWl0QWN0aW9uITogc3RyaW5nOw0KICAgIA0KICAgIC8qKg0KICAgICAqIOmDqOS7tuihjOS4ui0tc3RhcnQNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIFdGU3RhcnRBY3Rpb24hOiBzdHJpbmc7DQogICAgDQogICAgLyoqDQogICAgICog6YOo5Lu26KGM5Li6LS11cGRhdGUNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIHVwZGF0ZUFjdGlvbiE6IHN0cmluZzsNCiAgICANCiAgICAvKioNCiAgICAgKiDpg6jku7booYzkuLotLXJlbW92ZQ0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgcmVtb3ZlQWN0aW9uITogc3RyaW5nOw0KICAgIA0KICAgIC8qKg0KICAgICAqIOmDqOS7tuihjOS4ui0tbG9hZGRyYWZ0DQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyBsb2FkZHJhZnRBY3Rpb24hOiBzdHJpbmc7DQogICAgDQogICAgLyoqDQogICAgICog6YOo5Lu26KGM5Li6LS1sb2FkDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyBsb2FkQWN0aW9uITogc3RyaW5nOw0KICAgIA0KICAgIC8qKg0KICAgICAqIOmDqOS7tuihjOS4ui0tY3JlYXRlDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyBjcmVhdGVBY3Rpb24hOiBzdHJpbmc7DQoNCiAgICAvKioNCiAgICAgKiDpg6jku7booYzkuLotLWNyZWF0ZQ0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgc2VhcmNoQWN0aW9uITogc3RyaW5nOw0KDQogICAgLyoqDQogICAgICog6KeG5Zu+5qCH6K+GDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyB2aWV3dGFnITogc3RyaW5nOw0KDQogICAgLyoqDQogICAgICog6KGo5Y2V54q25oCBDQogICAgICoNCiAgICAgKiBAdHlwZSB7U3ViamVjdDxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZm9ybVN0YXRlOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdCgpOw0KDQogICAgLyoqDQogICAgICog5b+955Wl6KGo5Y2V6aG55YC85Y+Y5YyWDQogICAgICoNCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGlnbm9yZWZpZWxkdmFsdWVjaGFuZ2U6IGJvb2xlYW4gPSBmYWxzZTsNCg0KICAgIC8qKg0KICAgICAqIOaVsOaNruWPmOWMlg0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEB0eXBlIHtTdWJqZWN0PGFueT59DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBkYXRhQ2hhbmc6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7DQoNCiAgICAvKioNCiAgICAgKiDop4blm77nirbmgIHkuovku7YNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAdHlwZSB7KFN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZCl9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBkYXRhQ2hhbmdFdmVudDogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkOw0KDQogICAgLyoqDQogICAgICog5Y6f5aeL5pWw5o2uDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBvbGREYXRhOiBhbnkgPSB7fTsNCg0KICAgIC8qKg0KICAgICAqIOihqOWNleaVsOaNruWvueixoQ0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBkYXRhOiBhbnkgPSB7DQogICAgICAgIHNyZnVwZGF0ZWRhdGU6IG51bGwsDQogICAgICAgIHNyZm9yaWtleTogbnVsbCwNCiAgICAgICAgc3Jma2V5OiBudWxsLA0KICAgICAgICBzcmZtYWpvcnRleHQ6IG51bGwsDQogICAgICAgIHNyZnRlbXBtb2RlOiBudWxsLA0KICAgICAgICBzcmZ1ZjogbnVsbCwNCiAgICAgICAgc3JmZGVpZDogbnVsbCwNCiAgICAgICAgc3Jmc291cmNla2V5OiBudWxsLA0KICAgICAgICBwaW1wZXJzb25pZDogbnVsbCwNCiAgICAgICAgcGltcGVyc29ubmFtZTogbnVsbCwNCiAgICAgICAgaHRiaDogbnVsbCwNCiAgICAgICAgY29udHJhY3R0eXBlOiBudWxsLA0KICAgICAgICBxc3JxOiBudWxsLA0KICAgICAgICBqc3JxOiBudWxsLA0KICAgICAgICBodHp0OiBudWxsLA0KICAgICAgICBvcm1vcmduYW1lOiBudWxsLA0KICAgICAgICBzeWRxc2o6IG51bGwsDQogICAgICAgIHBpbWxhYm91cmNhbXBhbnluYW1lOiBudWxsLA0KICAgICAgICBvcm1vcmdpZDogbnVsbCwNCiAgICAgICAgb3JnaWQ6IG51bGwsDQogICAgICAgIHBlcnNvbm9yZ2lkOiBudWxsLA0KICAgICAgICBwaW1jb250cmFjdGlkOiBudWxsLA0KICAgICAgICBwaW1sYWJvdXJjYW1wYW55aWQ6IG51bGwsDQogICAgICAgIHBpbWNvbnRyYWN0Om51bGwsDQogICAgfTsNCg0KICAgIC8qKg0KICAgICAgKiDlvZPliY3miafooYznmoTooYzkuLrpgLvovpENCiAgICAgICoNCiAgICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAgKi8NCiAgICBwdWJsaWMgY3VycmVudEFjdGlvbjogc3RyaW5nID0gIiI7DQoNCiAgICAvKioNCiAgICAgICog5YWz57O755WM6Z2i6K6h5pWw5ZmoDQogICAgICAqDQogICAgICAqIEB0eXBlIHtudW1iZXJ9DQogICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgICovDQogICAgcHVibGljIGRyY291bnRlcjogbnVtYmVyID0gMDsNCg0KICAgIC8qKg0KICAgICAgKiDpnIDopoHnrYnlvoXlhbPns7vnlYzpnaLkv53lrZjml7bvvIznrKzkuIDmrKHosIPnlKhzYXZl5Y+C5pWw55qE5aSH5Lu9DQogICAgICAqDQogICAgICAqIEB0eXBlIHtudW1iZXJ9DQogICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgICovDQogICAgcHVibGljIGRyc2F2ZW9wdDogYW55ID0ge307DQoNCiAgICAvKioNCiAgICAgICog6KGo5Y2V5L+d5a2Y5Zue6LCD5a2Y5YKo5a+56LGhDQogICAgICAqDQogICAgICAqIEB0eXBlIHthbnl9DQogICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgICovDQogICAgcHVibGljIHNhdmVTdGF0ZTphbnkgOw0KDQogICAgLyoqDQogICAgICog5bGe5oCn5YC86KeE5YiZDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIHJ1bGVzOiBhbnkgPSB7DQogICAgICAgIHNyZnVwZGF0ZWRhdGU6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmm7TmlrDml7bpl7Qg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmm7TmlrDml7bpl7Qg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmm7TmlrDml7bpl7Qg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+abtOaWsOaXtumXtCDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgc3Jmb3Jpa2V5OiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgICAgIHNyZmtleTogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOS/oeaBr+agh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOS/oeaBr+agh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOS/oeaBr+agh+ivhiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM5L+h5oGv5qCH6K+GIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICBzcmZtYWpvcnRleHQ6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkZjlt6Xlp5PlkI0g5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkZjlt6Xlp5PlkI0g5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkZjlt6Xlp5PlkI0g5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgc3JmdGVtcG1vZGU6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgc3JmdWY6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgc3JmZGVpZDogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAnIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICBzcmZzb3VyY2VrZXk6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICcg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgcGltcGVyc29uaWQ6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfkurrlkZjkv6Hmga/moIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfkurrlkZjkv6Hmga/moIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfkurrlkZjkv6Hmga/moIfor4Yg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+S6uuWRmOS/oeaBr+agh+ivhiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgcGltcGVyc29ubmFtZTogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZGY5bel5aeT5ZCNIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WRmOW3peWnk+WQjSDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgaHRiaDogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOe8luWPtyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOe8luWPtyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM57yW5Y+3IOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOe8luWPtyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgY29udHJhY3R0eXBlOiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM57G75Z6LIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM57G75Z6LIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM57G75Z6LIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkIjlkIznsbvlnosg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgICAgIHFzcnE6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfotbflp4vml6XmnJ8g5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfotbflp4vml6XmnJ8g5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfotbflp4vml6XmnJ8g5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+i1t+Wni+aXpeacnyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAganNycTogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7k+adn+aXpeacnyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7k+adn+aXpeacnyDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uT5p2f5pel5pyfIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7k+adn+aXpeacnyDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgaHR6dDogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOeKtuaAgSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOeKtuaAgSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM54q25oCBIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOeKtuaAgSDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgb3Jtb3JnbmFtZTogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOeuoeeQhuWNleS9jSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOeuoeeQhuWNleS9jSDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOeuoeeQhuWNleS9jSDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM566h55CG5Y2V5L2NIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICBzeWRxc2o6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfor5XnlKjliLDmnJ/ml7bpl7Qg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfor5XnlKjliLDmnJ/ml7bpl7Qg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfor5XnlKjliLDmnJ/ml7bpl7Qg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+ivleeUqOWIsOacn+aXtumXtCDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgcGltbGFib3VyY2FtcGFueW5hbWU6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmiYDlsZ7lirPliqHmtL7pgaPlhazlj7gg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmiYDlsZ7lirPliqHmtL7pgaPlhazlj7gg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfmiYDlsZ7lirPliqHmtL7pgaPlhazlj7gg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+aJgOWxnuWKs+WKoea0vumBo+WFrOWPuCDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgb3Jtb3JnaWQ6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkIjlkIznrqHnkIbljZXkvY3moIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkIjlkIznrqHnkIbljZXkvY3moIfor4Yg5YC85b+F6aG75Li65a2X56ym5Liy57G75Z6LJywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkIjlkIznrqHnkIbljZXkvY3moIfor4Yg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WQiOWQjOeuoeeQhuWNleS9jeagh+ivhiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgXSwNCiAgICAgICAgb3JnaWQ6IFsNCiAgICAgICAgICAgIHsgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICfnu4Tnu4dJRCDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7hOe7h0lEIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn57uE57uHSUQg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+e7hOe7h0lEIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICBwZXJzb25vcmdpZDogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+S6uuWRmOaJgOWxnuWNleS9jeagh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+S6uuWRmOaJgOWxnuWNleS9jeagh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+S6uuWRmOaJgOWxnuWNleS9jeagh+ivhiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5Lq65ZGY5omA5bGe5Y2V5L2N5qCH6K+GIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgICAgICBwaW1jb250cmFjdGlkOiBbDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM5L+h5oGv5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM5L+h5oGv5qCH6K+GIOWAvOW/hemhu+S4uuWtl+espuS4suexu+WeiycsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5ZCI5ZCM5L+h5oGv5qCH6K+GIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sDQogICAgICAgICAgICB7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogJ3N0cmluZycsIG1lc3NhZ2U6ICflkIjlkIzkv6Hmga/moIfor4Yg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2JsdXInIH0sDQogICAgICAgIF0sDQogICAgICAgIHBpbWxhYm91cmNhbXBhbnlpZDogWw0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WKs+WKoea0vumBo+WFrOWPuOeuoeeQhuagh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WKs+WKoea0vumBo+WFrOWPuOeuoeeQhuagh+ivhiDlgLzlv4XpobvkuLrlrZfnrKbkuLLnsbvlnosnLCB0cmlnZ2VyOiAnYmx1cicgfSwNCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiAnc3RyaW5nJywgbWVzc2FnZTogJ+WKs+WKoea0vumBo+WFrOWPuOeuoeeQhuagh+ivhiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnY2hhbmdlJyB9LA0KICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6ICdzdHJpbmcnLCBtZXNzYWdlOiAn5Yqz5Yqh5rS+6YGj5YWs5Y+4566h55CG5qCH6K+GIOWAvOS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9LA0KICAgICAgICBdLA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOivpuaDheaooeWei+mbhuWQiA0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBkZXRhaWxzTW9kZWw6IGFueSA9IHsNCiAgICAgICAgZ3JvdXAxOiBuZXcgRm9ybUdyb3VwUGFuZWxNb2RlbCh7IGNhcHRpb246ICfln7rmnKzkv6Hmga8nLCBkZXRhaWxUeXBlOiAnR1JPVVBQQU5FTCcsIG5hbWU6ICdncm91cDEnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCB1aUFjdGlvbkdyb3VwOiB7IGNhcHRpb246ICcnLCBsYW5nYmFzZTogJ2VudGl0aWVzLnBpbWNvbnRyYWN0LmxhYnNlcnZpY2VzX2VkaXRncmlkX2Zvcm0nLCBleHRyYWN0TW9kZTogJ0lURU0nLCBkZXRhaWxzOiBbXSB9IH0pDQosIA0KICAgICAgICBmb3JtcGFnZTE6IG5ldyBGb3JtUGFnZU1vZGVsKHsgY2FwdGlvbjogJ+WfuuacrOS/oeaBrycsIGRldGFpbFR5cGU6ICdGT1JNUEFHRScsIG5hbWU6ICdmb3JtcGFnZTEnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzIH0pDQosIA0KICAgICAgICBzcmZ1cGRhdGVkYXRlOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICfmm7TmlrDml7bpl7QnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnc3JmdXBkYXRlZGF0ZScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgc3Jmb3Jpa2V5OiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICcnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnc3Jmb3Jpa2V5JywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBzcmZrZXk6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+WQiOWQjOS/oeaBr+agh+ivhicsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdzcmZrZXknLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHNyZm1ham9ydGV4dDogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn5ZGY5bel5aeT5ZCNJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3NyZm1ham9ydGV4dCcsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgc3JmdGVtcG1vZGU6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJycsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdzcmZ0ZW1wbW9kZScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgc3JmdWY6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJycsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdzcmZ1ZicsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgc3JmZGVpZDogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAnJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3NyZmRlaWQnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHNyZnNvdXJjZWtleTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAnJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3NyZnNvdXJjZWtleScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgcGltcGVyc29uaWQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+S6uuWRmOS/oeaBr+agh+ivhicsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdwaW1wZXJzb25pZCcsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgcGltcGVyc29ubmFtZTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn5ZGY5bel5aeT5ZCNJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3BpbXBlcnNvbm5hbWUnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIGh0Ymg6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+WQiOWQjOe8luWPtycsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdodGJoJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBjb250cmFjdHR5cGU6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+WQiOWQjOexu+WeiycsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdjb250cmFjdHR5cGUnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHFzcnE6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+i1t+Wni+aXpeacnycsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdxc3JxJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBqc3JxOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICfnu5PmnZ/ml6XmnJ8nLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnanNycScsIHZpc2libGU6IGZhbHNlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIGh0enQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+WQiOWQjOeKtuaAgScsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdodHp0JywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBvcm1vcmduYW1lOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICflkIjlkIznrqHnkIbljZXkvY0nLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnb3Jtb3JnbmFtZScsIHZpc2libGU6IHRydWUsIGlzU2hvd0NhcHRpb246IHRydWUsIGZvcm06IHRoaXMsIGRpc2FibGVkOiBmYWxzZSwgZW5hYmxlQ29uZDogMyB9KQ0KLCANCiAgICAgICAgc3lkcXNqOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICfor5XnlKjliLDmnJ/ml7bpl7QnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnc3lkcXNqJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBwaW1sYWJvdXJjYW1wYW55bmFtZTogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn5omA5bGe5Yqz5Yqh5rS+6YGj5YWs5Y+4JywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ3BpbWxhYm91cmNhbXBhbnluYW1lJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBvcm1vcmdpZDogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn5ZCI5ZCM566h55CG5Y2V5L2N5qCH6K+GJywgZGV0YWlsVHlwZTogJ0ZPUk1JVEVNJywgbmFtZTogJ29ybW9yZ2lkJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBvcmdpZDogbmV3IEZvcm1JdGVtTW9kZWwoeyBjYXB0aW9uOiAn57uE57uHSUQnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAnb3JnaWQnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHBlcnNvbm9yZ2lkOiBuZXcgRm9ybUl0ZW1Nb2RlbCh7IGNhcHRpb246ICfkurrlkZjmiYDlsZ7ljZXkvY3moIfor4YnLCBkZXRhaWxUeXBlOiAnRk9STUlURU0nLCBuYW1lOiAncGVyc29ub3JnaWQnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgICAgIHBpbWNvbnRyYWN0aWQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+WQiOWQjOS/oeaBr+agh+ivhicsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdwaW1jb250cmFjdGlkJywgdmlzaWJsZTogdHJ1ZSwgaXNTaG93Q2FwdGlvbjogdHJ1ZSwgZm9ybTogdGhpcywgZGlzYWJsZWQ6IGZhbHNlLCBlbmFibGVDb25kOiAzIH0pDQosIA0KICAgICAgICBwaW1sYWJvdXJjYW1wYW55aWQ6IG5ldyBGb3JtSXRlbU1vZGVsKHsgY2FwdGlvbjogJ+WKs+WKoea0vumBo+WFrOWPuOeuoeeQhuagh+ivhicsIGRldGFpbFR5cGU6ICdGT1JNSVRFTScsIG5hbWU6ICdwaW1sYWJvdXJjYW1wYW55aWQnLCB2aXNpYmxlOiB0cnVlLCBpc1Nob3dDYXB0aW9uOiB0cnVlLCBmb3JtOiB0aGlzLCBkaXNhYmxlZDogZmFsc2UsIGVuYWJsZUNvbmQ6IDMgfSkNCiwgDQogICAgfTsNCg0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZ1cGRhdGVkYXRlIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3JmdXBkYXRlZGF0ZScpDQogICAgb25TcmZ1cGRhdGVkYXRlQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ3NyZnVwZGF0ZWRhdGUnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZm9yaWtleSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgQFdhdGNoKCdkYXRhLnNyZm9yaWtleScpDQogICAgb25TcmZvcmlrZXlDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnc3Jmb3Jpa2V5JywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzcmZrZXkg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5zcmZrZXknKQ0KICAgIG9uU3Jma2V5Q2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ3NyZmtleScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3JmbWFqb3J0ZXh0IOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3JmbWFqb3J0ZXh0JykNCiAgICBvblNyZm1ham9ydGV4dENoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdzcmZtYWpvcnRleHQnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZnRlbXBtb2RlIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3JmdGVtcG1vZGUnKQ0KICAgIG9uU3JmdGVtcG1vZGVDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnc3JmdGVtcG1vZGUnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZnVmIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3JmdWYnKQ0KICAgIG9uU3JmdWZDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnc3JmdWYnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHNyZmRlaWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5zcmZkZWlkJykNCiAgICBvblNyZmRlaWRDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnc3JmZGVpZCcsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgc3Jmc291cmNla2V5IOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuc3Jmc291cmNla2V5JykNCiAgICBvblNyZnNvdXJjZWtleUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdzcmZzb3VyY2VrZXknLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHBpbXBlcnNvbmlkIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEucGltcGVyc29uaWQnKQ0KICAgIG9uUGltcGVyc29uaWRDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAncGltcGVyc29uaWQnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIHBpbXBlcnNvbm5hbWUg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5waW1wZXJzb25uYW1lJykNCiAgICBvblBpbXBlcnNvbm5hbWVDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAncGltcGVyc29ubmFtZScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgaHRiaCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgQFdhdGNoKCdkYXRhLmh0YmgnKQ0KICAgIG9uSHRiaENoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdodGJoJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBjb250cmFjdHR5cGUg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5jb250cmFjdHR5cGUnKQ0KICAgIG9uQ29udHJhY3R0eXBlQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ2NvbnRyYWN0dHlwZScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgcXNycSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgQFdhdGNoKCdkYXRhLnFzcnEnKQ0KICAgIG9uUXNycUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdxc3JxJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBqc3JxIOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBAV2F0Y2goJ2RhdGEuanNycScpDQogICAgb25Kc3JxQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ2pzcnEnLCBuZXdWYWw6IG5ld1ZhbCwgb2xkVmFsOiBvbGRWYWwgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55uR5o6n6KGo5Y2V5bGe5oCnIGh0enQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5odHp0JykNCiAgICBvbkh0enRDaGFuZ2UobmV3VmFsOiBhbnksIG9sZFZhbDogYW55KSB7DQogICAgICAgIHRoaXMuZm9ybURhdGFDaGFuZ2UoeyBuYW1lOiAnaHR6dCcsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgb3Jtb3JnbmFtZSDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgQFdhdGNoKCdkYXRhLm9ybW9yZ25hbWUnKQ0KICAgIG9uT3Jtb3JnbmFtZUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdvcm1vcmduYW1lJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBzeWRxc2og5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5zeWRxc2onKQ0KICAgIG9uU3lkcXNqQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ3N5ZHFzaicsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgcGltbGFib3VyY2FtcGFueW5hbWUg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5waW1sYWJvdXJjYW1wYW55bmFtZScpDQogICAgb25QaW1sYWJvdXJjYW1wYW55bmFtZUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdwaW1sYWJvdXJjYW1wYW55bmFtZScsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgb3Jtb3JnaWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5vcm1vcmdpZCcpDQogICAgb25Pcm1vcmdpZENoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdvcm1vcmdpZCcsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgb3JnaWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5vcmdpZCcpDQogICAgb25PcmdpZENoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdvcmdpZCcsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgcGVyc29ub3JnaWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5wZXJzb25vcmdpZCcpDQogICAgb25QZXJzb25vcmdpZENoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdwZXJzb25vcmdpZCcsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnm5HmjqfooajljZXlsZ7mgKcgcGltY29udHJhY3RpZCDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsDQogICAgICogQHBhcmFtIHsqfSBvbGRWYWwNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgQFdhdGNoKCdkYXRhLnBpbWNvbnRyYWN0aWQnKQ0KICAgIG9uUGltY29udHJhY3RpZENoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsNCiAgICAgICAgdGhpcy5mb3JtRGF0YUNoYW5nZSh7IG5hbWU6ICdwaW1jb250cmFjdGlkJywgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOebkeaOp+ihqOWNleWxnuaApyBwaW1sYWJvdXJjYW1wYW55aWQg5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbA0KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIEBXYXRjaCgnZGF0YS5waW1sYWJvdXJjYW1wYW55aWQnKQ0KICAgIG9uUGltbGFib3VyY2FtcGFueWlkQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmZvcm1EYXRhQ2hhbmdlKHsgbmFtZTogJ3BpbWxhYm91cmNhbXBhbnlpZCcsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIOmHjee9ruihqOWNlemhueWAvA0KICAgICAqDQogICAgICogQHB1YmxpYw0KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9fSB7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIHJlc2V0Rm9ybURhdGEoeyBuYW1lLCBuZXdWYWwsIG9sZFZhbCB9OiB7IG5hbWU6IHN0cmluZywgbmV3VmFsOiBhbnksIG9sZFZhbDogYW55IH0pOiB2b2lkIHsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICog572u56m65a+56LGhDQogICAgICAqDQogICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICAqLw0KICAgIHB1YmxpYyBSZXNldERhdGEoX2RhdGFzOmFueSl7DQogICAgICAgIGlmKE9iamVjdC5rZXlzKF9kYXRhcykubGVuZ3RoID4wKXsNCiAgICAgICAgICAgIE9iamVjdC5rZXlzKF9kYXRhcykuZm9yRWFjaCgobmFtZTogc3RyaW5nKSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFbbmFtZV0gPSBudWxsOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6KGo5Y2V6YC76L6RDQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHt7IG5hbWU6IHN0cmluZywgbmV3VmFsOiBhbnksIG9sZFZhbDogYW55IH19IHsgbmFtZSwgbmV3VmFsLCBvbGRWYWwgfQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZm9ybUxvZ2ljKHsgbmFtZSwgbmV3VmFsLCBvbGRWYWwgfTogeyBuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSB9KTogdm9pZCB7DQogICAgICAgICAgICAgICAgDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQogICAgICAgIGlmIChPYmplY3QuaXMobmFtZSwgJycpIHx8IE9iamVjdC5pcyhuYW1lLCAnY29udHJhY3R0eXBlJykpIHsNCiAgICAgICAgICAgIGxldCByZXQgPSB0cnVlOw0KICAgICAgICAgICAgY29uc3QgX2NvbnRyYWN0dHlwZSA9IHRoaXMuZGF0YS5jb250cmFjdHR5cGU7DQogICAgICAgICAgICBpZiAodGhpcy4kdmVyaWZ5LnRlc3RDb25kKF9jb250cmFjdHR5cGUsICdOT1RFUScsICcxMCcpKSB7DQogICAgICAgICAgICAgICAgcmV0ID0gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLnJ1bGVzLmpzcnEuc29tZSgocnVsZTogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKHJ1bGUuaGFzT3duUHJvcGVydHkoJ3JlcXVpcmVkJykpIHsNCiAgICAgICAgICAgICAgICAgICAgcnVsZS5yZXF1aXJlZCA9IHJldDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKE9iamVjdC5pcyhuYW1lLCAnJykgfHwgT2JqZWN0LmlzKG5hbWUsICdjb250cmFjdHR5cGUnKSkgew0KICAgICAgICAgICAgbGV0IHJldCA9IGZhbHNlOw0KICAgICAgICAgICAgY29uc3QgX2NvbnRyYWN0dHlwZSA9IHRoaXMuZGF0YS5jb250cmFjdHR5cGU7DQogICAgICAgICAgICBpZiAodGhpcy4kdmVyaWZ5LnRlc3RDb25kKF9jb250cmFjdHR5cGUsICdFUScsICcxMCcpKSB7DQogICAgICAgICAgICAgICAgcmV0ID0gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMuZGV0YWlsc01vZGVsLmpzcnEuc2V0VmlzaWJsZShyZXQpOw0KICAgICAgICB9DQoNCg0KDQoNCg0KDQoNCg0KDQoNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDooajljZXlgLzlj5jljJYNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0ge3sgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfX0geyBuYW1lLCBuZXdWYWwsIG9sZFZhbCB9DQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmb3JtRGF0YUNoYW5nZSh7IG5hbWUsIG5ld1ZhbCwgb2xkVmFsIH06IHsgbmFtZTogc3RyaW5nLCBuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkgfSk6IHZvaWQgew0KICAgICAgICBpZiAodGhpcy5pZ25vcmVmaWVsZHZhbHVlY2hhbmdlKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5yZXNldEZvcm1EYXRhKHsgbmFtZTogbmFtZSwgbmV3VmFsOiBuZXdWYWwsIG9sZFZhbDogb2xkVmFsIH0pOw0KICAgICAgICB0aGlzLmZvcm1Mb2dpYyh7IG5hbWU6IG5hbWUsIG5ld1ZhbDogbmV3VmFsLCBvbGRWYWw6IG9sZFZhbCB9KTsNCiAgICAgICAgdGhpcy5kYXRhQ2hhbmcubmV4dChKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDooajljZXliqDovb3lrozmiJANCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPXt9XQ0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYWN0aW9uXQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgb25Gb3JtTG9hZChkYXRhOiBhbnkgPSB7fSxhY3Rpb246c3RyaW5nKTogdm9pZCB7DQogICAgICAgIGlmKE9iamVjdC5pcyhhY3Rpb24sInNhdmUiKSB8fCBPYmplY3QuaXMoYWN0aW9uLCJhdXRvU2F2ZSIpIHx8IE9iamVjdC5pcyhhY3Rpb24sInN1Ym1pdCIpKQ0KICAgICAgICAvLyDmm7TmlrBjb250ZXh055qE5a6e5L2T5Li76ZSuDQogICAgICAgIGlmKGRhdGEucGltY29udHJhY3Qpew0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbnRleHQse3BpbWNvbnRyYWN0OmRhdGEucGltY29udHJhY3R9KQ0KICAgICAgICB9DQogICAgICAgIHRoaXMuc2V0Rm9ybUVuYWJsZUNvbmQoZGF0YSk7DQogICAgICAgIHRoaXMuZmlsbEZvcm0oZGF0YSxhY3Rpb24pOw0KICAgICAgICB0aGlzLm9sZERhdGEgPSB7fTsNCiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm9sZERhdGEsIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKSkpOw0KICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3ZpZXdhY3Rpb24vc2V0Vmlld0RhdGFDaGFuZ2UnLCB7IHZpZXd0YWc6IHRoaXMudmlld3RhZywgdmlld2RhdGFjaGFuZ2U6IGZhbHNlIH0pOw0KICAgICAgICB0aGlzLmZvcm1Mb2dpYyh7IG5hbWU6ICcnLCBuZXdWYWw6IG51bGwsIG9sZFZhbDogbnVsbCB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlgLzloavlhYUNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW19kYXRhcz17fV0NCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2FjdGlvbl0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGZpbGxGb3JtKF9kYXRhczogYW55ID0ge30sYWN0aW9uOnN0cmluZyk6IHZvaWQgew0KICAgICAgICB0aGlzLmlnbm9yZWZpZWxkdmFsdWVjaGFuZ2UgPSB0cnVlOw0KICAgICAgICBPYmplY3Qua2V5cyhfZGF0YXMpLmZvckVhY2goKG5hbWU6IHN0cmluZykgPT4gew0KICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgew0KICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtuYW1lXSA9IF9kYXRhc1tuYW1lXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICAgIGlmKE9iamVjdC5pcyhhY3Rpb24sJ2xvYWREcmFmdCcpKXsNCiAgICAgICAgICAgIHRoaXMuY3JlYXRlRGVmYXVsdCgpOw0KICAgICAgICB9DQogICAgICAgIGlmKE9iamVjdC5pcyhhY3Rpb24sJ2xvYWQnKSl7DQogICAgICAgICAgICB0aGlzLnVwZGF0ZURlZmF1bHQoKTsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICB0aGlzLmlnbm9yZWZpZWxkdmFsdWVjaGFuZ2UgPSBmYWxzZTsNCiAgICAgICAgfSkNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDorr7nva7ooajljZXpobnmmK/lkKblkK/nlKgNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0geyp9IGRhdGENCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIHNldEZvcm1FbmFibGVDb25kKGRhdGE6IGFueSk6IHZvaWQgew0KICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuZGV0YWlsc01vZGVsKS5mb3JFYWNoKChkZXRhaWw6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYgKCFPYmplY3QuaXMoZGV0YWlsLmRldGFpbFR5cGUsICdGT1JNSVRFTScpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgZm9ybUl0ZW06IEZvcm1JdGVtTW9kZWwgPSBkZXRhaWw7DQogICAgICAgICAgICBmb3JtSXRlbS5zZXRFbmFibGVDb25kKGRhdGEuc3JmdWYpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDph43nva7ojYnnqL/ooajljZXnirbmgIENCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIHJlc2V0RHJhZnRGb3JtU3RhdGVzKCk6IHZvaWQgew0KICAgICAgICBjb25zdCBmb3JtOiBhbnkgPSB0aGlzLiRyZWZzLmZvcm07DQogICAgICAgIGlmIChmb3JtKSB7DQogICAgICAgICAgICBmb3JtLnJlc2V0RmllbGRzKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDph43nva7moKHpqoznu5PmnpwNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgcmVzZXRWYWxpZGF0ZXMoKTogdm9pZCB7DQogICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5kZXRhaWxzTW9kZWwpLmZvckVhY2goKGRldGFpbDogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAoIU9iamVjdC5pcyhkZXRhaWwuZGV0YWlsVHlwZSwgJ0ZPUk1JVEVNJykpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb25zdCBmb3JtSXRlbTogRm9ybUl0ZW1Nb2RlbCA9IGRldGFpbDsNCiAgICAgICAgICAgIGZvcm1JdGVtLnNldEVycm9yKCcnKTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5aGr5YWF5qCh6aqM57uT5p6cIO+8iOWQjuWPsO+8iQ0KICAgICAqDQogICAgICogQHBhcmFtIHthbnlbXX0gZmllbGRFcnJvcnMNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGZpbGxWYWxpZGF0ZXMoZmllbGRFcnJvcnM6IGFueVtdKTogdm9pZCB7DQogICAgICAgIGZpZWxkRXJyb3JzLmZvckVhY2goKGVycm9yOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IGZvcm1JdGVtOiBGb3JtSXRlbU1vZGVsID0gdGhpcy5kZXRhaWxzTW9kZWxbZXJyb3IuZmllbGRdOw0KICAgICAgICAgICAgaWYgKCFmb3JtSXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgICAgICBmb3JtSXRlbS5zZXRFcnJvcihlcnJvci5tZXNzYWdlKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDooajljZXmoKHpqoznirbmgIENCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHtib29sZWFufSANCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGZvcm1WYWxpZGF0ZVN0YXR1cygpOiBib29sZWFuIHsNCiAgICAgICAgY29uc3QgZm9ybTogYW55ID0gdGhpcy4kcmVmcy5mb3JtOw0KICAgICAgICBsZXQgdmFsaWRhdGVzdGF0ZTogYm9vbGVhbiA9IHRydWU7DQogICAgICAgIGZvcm0udmFsaWRhdGUoKHZhbGlkOiBib29sZWFuKSA9PiB7DQogICAgICAgICAgICB2YWxpZGF0ZXN0YXRlID0gdmFsaWQgPyB0cnVlIDogZmFsc2U7DQogICAgICAgIH0pOw0KICAgICAgICByZXR1cm4gdmFsaWRhdGVzdGF0ZQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPluWFqOmDqOWAvA0KICAgICAqDQogICAgICogQHJldHVybnMgeyp9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBnZXRWYWx1ZXMoKTogYW55IHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDooajljZXpobnlgLzlj5jmm7QNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkgfX0gJGV2ZW50DQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBvbkZvcm1JdGVtVmFsdWVDaGFuZ2UoJGV2ZW50OiB7IG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSB9KTogdm9pZCB7DQogICAgICAgIGlmICghJGV2ZW50KSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYgKCEkZXZlbnQubmFtZSB8fCBPYmplY3QuaXMoJGV2ZW50Lm5hbWUsICcnKSB8fCAhdGhpcy5kYXRhLmhhc093blByb3BlcnR5KCRldmVudC5uYW1lKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIHRoaXMuZGF0YVskZXZlbnQubmFtZV0gPSAkZXZlbnQudmFsdWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6K6+572u5pWw5o2u6aG55YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZQ0KICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUNCiAgICAgKiBAcmV0dXJucyB7dm9pZH0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIHNldERhdGFJdGVtVmFsdWUobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7DQogICAgICAgIGlmICghbmFtZSB8fCBPYmplY3QuaXMobmFtZSwgJycpIHx8ICF0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkobmFtZSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoT2JqZWN0LmlzKHRoaXMuZGF0YVtuYW1lXSwgdmFsdWUpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5kYXRhW25hbWVdID0gdmFsdWU7DQogICAgfQ0KDQoNCg0KICAgIC8qKg0KICAgICAqIOWIhue7hOeVjOmdouihjOS4uuS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGdyb3VwVUlBY3Rpb25DbGljaygkZXZlbnQ6IGFueSk6IHZvaWQgew0KICAgICAgICBpZiAoISRldmVudCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IGl0ZW06YW55ID0gJGV2ZW50Lml0ZW07DQogICAgfQ0KDQogICAgLyoqDQogICAgICogVnVl5aOw5piO5ZGo5pyfKOWkhOeQhue7hOS7tueahOi+k+WFpeWxnuaApykNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY3JlYXRlZCgpOiB2b2lkIHsNCiAgICAgICAgdGhpcy5hZnRlckNyZWF0ZWQoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmiafooYxjcmVhdGVk5ZCO55qE6YC76L6RDQogICAgICoNCiAgICAgKiAgQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLyAgICANCiAgICBwdWJsaWMgYWZ0ZXJDcmVhdGVkKCl7DQogICAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZSkgew0KICAgICAgICAgICAgdGhpcy52aWV3U3RhdGVFdmVudCA9IHRoaXMudmlld1N0YXRlLnN1YnNjcmliZSgoeyB0YWcsIGFjdGlvbiwgZGF0YSB9KSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuaXModGFnLCB0aGlzLm5hbWUpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnYXV0b2xvYWQnLCBhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0b0xvYWQoZGF0YSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaXMoJ2xvYWQnLCBhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZChkYXRhKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnbG9hZGRyYWZ0JywgYWN0aW9uKSkgew0KICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmNvbnRleHQuc3Jmc291cmNla2V5KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29weSh0aGlzLmNvbnRleHQuc3Jmc291cmNla2V5KTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWREcmFmdChkYXRhKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdzYXZlJywgYWN0aW9uKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoZGF0YSxkYXRhLnNob3dSZXN1bHRJbmZvKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygncmVtb3ZlJywgYWN0aW9uKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShkYXRhKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnc2F2ZWFuZGV4aXQnLCBhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUFuZEV4aXQoZGF0YSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3NhdmVhbmRuZXcnLCBhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUFuZE5ldyhkYXRhKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygncmVtb3ZlYW5kZXhpdCcsIGFjdGlvbikpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbmRFeGl0KGRhdGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdyZWZyZXNoJywgYWN0aW9uKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goZGF0YSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5kYXRhQ2hhbmcNCiAgICAgICAgICAgIC5waXBlKA0KICAgICAgICAgICAgICAgIGRlYm91bmNlVGltZSgzMDApLA0KICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkNCiAgICAgICAgICAgICkuc3Vic2NyaWJlKChkYXRhOiBhbnkpID0+IHsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvc2F2ZSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dG9TYXZlKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gIU9iamVjdC5pcyhKU09OLnN0cmluZ2lmeSh0aGlzLm9sZERhdGEpLCBKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKSA/IHRydWUgOiBmYWxzZTsNCiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3ZpZXdhY3Rpb24vc2V0Vmlld0RhdGFDaGFuZ2UnLCB7IHZpZXd0YWc6IHRoaXMudmlld3RhZywgdmlld2RhdGFjaGFuZ2U6IHN0YXRlIH0pOw0KICAgICAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogdnVlIOeUn+WRveWRqOacnw0KICAgICAqDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBkZXN0cm95ZWQoKSB7DQogICAgICAgIHRoaXMuYWZ0ZXJEZXN0cm95KCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5omn6KGMZGVzdHJveWVk5ZCO55qE6YC76L6RDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGFmdGVyRGVzdHJveSgpIHsNCiAgICAgICAgaWYgKHRoaXMudmlld1N0YXRlRXZlbnQpIHsNCiAgICAgICAgICAgIHRoaXMudmlld1N0YXRlRXZlbnQudW5zdWJzY3JpYmUoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAodGhpcy5kYXRhQ2hhbmdFdmVudCkgew0KICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbmdFdmVudC51bnN1YnNjcmliZSgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5ou36LSd5YaF5a65DQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFthcmc9e31dDQogICAgICogQG1lbWJlcm9mIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY29weShzcmZrZXk6IHN0cmluZyk6IHZvaWQgew0KICAgICAgICBsZXQgY29weURhdGEgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldENvcHlEYXRhKHNyZmtleSk7DQogICAgICAgIGNvcHlEYXRhLnNyZmtleSA9IFV0aWwuY3JlYXRlVVVJRCgpOw0KICAgICAgICBjb3B5RGF0YS5waW1jb250cmFjdCA9IGNvcHlEYXRhLnNyZmtleTsNCiAgICAgICAgY29weURhdGEucGltY29udHJhY3RpZCA9IGNvcHlEYXRhLnNyZmtleTsNCiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbnRleHQse3BpbWNvbnRyYWN0OmNvcHlEYXRhLnBpbWNvbnRyYWN0fSkNCiAgICAgICAgdGhpcy5kYXRhID0gY29weURhdGE7DQogICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICB0aGlzLmZvcm1TdGF0ZS5uZXh0KHsgdHlwZTogJ2xvYWQnLCBkYXRhOiBjb3B5RGF0YSB9KTsNCiAgICAgICAgICB0aGlzLmRhdGEuc3JmdWYgPSAnMCc7DQogICAgICAgICAgdGhpcy5zZXRGb3JtRW5hYmxlQ29uZCh0aGlzLmRhdGEpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKuaJk+WNsA0KICAgICAqQG1lbWJlcm9mIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgcHJpbnQoKXsNCiAgICAgICAgbGV0IF90aGlzOmFueSA9IHRoaXM7DQogICAgICAgIF90aGlzLiRwcmludCh7aWQ6J3BpbWNvbnRyYWN0X2xhYnNlcnZpY2VzX2VkaXRncmlkJyxwb3BUaXRsZTon5Li757yW6L6R6KGo5Y2VKOWKs+WKoeWQiOWQjCknfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YOo5Lu25Yi35pawDQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyByZWZyZXNoKGFyZ3M6IGFueVtdKTogdm9pZCB7DQogICAgICAgIGxldCBhcmc6IGFueSA9IHt9Ow0KICAgICAgICBPYmplY3QuYXNzaWduKGFyZyxhcmdzWzBdKTsNCiAgICAgICAgaWYgKHRoaXMuZGF0YS5zcmZrZXkgJiYgIU9iamVjdC5pcyh0aGlzLmRhdGEuc3Jma2V5LCAnJykpIHsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7IHNyZmtleTogdGhpcy5kYXRhLnNyZmtleSB9KTsNCiAgICAgICAgICAgIHRoaXMubG9hZChhcmcpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmICh0aGlzLmRhdGEuc3Jma2V5cyAmJiAhT2JqZWN0LmlzKHRoaXMuZGF0YS5zcmZrZXlzLCAnJykpIHsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB7IHNyZmtleTogdGhpcy5kYXRhLnNyZmtleXMgfSk7DQogICAgICAgICAgICB0aGlzLmxvYWQoYXJnKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiHquWKqOWKoOi9vQ0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbYXJnPXt9XQ0KICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgYXV0b0xvYWQoYXJnOiBhbnkgPSB7fSk6IHZvaWQgew0KICAgICAgICBpZiAoYXJnLnNyZmtleSAmJiAhT2JqZWN0LmlzKGFyZy5zcmZrZXksICcnKSkgew0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsgc3Jma2V5OiBhcmcuc3Jma2V5IH0pOw0KICAgICAgICAgICAgdGhpcy5sb2FkKGFyZyk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYgKGFyZy5zcmZrZXlzICYmICFPYmplY3QuaXMoYXJnLnNyZmtleXMsICcnKSkgew0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHsgc3Jma2V5OiBhcmcuc3Jma2V5cyB9KTsNCiAgICAgICAgICAgIHRoaXMubG9hZChhcmcpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIHRoaXMubG9hZERyYWZ0KGFyZyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yqg6L29DQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHsqfSBbb3B0PXt9XQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgbG9hZChvcHQ6IGFueSA9IHt9KTogdm9pZCB7DQogICAgICAgIGlmKCF0aGlzLmxvYWRBY3Rpb24pew0KICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAnUElNQ09OVFJBQ1RMV0VkaXRWaWV36KeG5Zu+6KGo5Y2VbG9hZEFjdGlvbuWPguaVsOacqumFjee9ricgfSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgYXJnOiBhbnkgPSB7IC4uLm9wdCB9Ow0KICAgICAgICBsZXQgdmlld3BhcmFtUmVzdWx0OmFueSA9IE9iamVjdC5hc3NpZ24oYXJnLHRoaXMudmlld3BhcmFtcyk7DQogICAgICAgIGNvbnN0IGdldDogUHJvbWlzZTxhbnk+ID0gdGhpcy5zZXJ2aWNlLmdldCh0aGlzLmxvYWRBY3Rpb24sSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSx7dmlld3BhcmFtczp2aWV3cGFyYW1SZXN1bHR9LCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsNCiAgICAgICAgZ2V0LnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDIwMCkgew0KICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhOw0KICAgICAgICAgICAgICAgIHRoaXMub25Gb3JtTG9hZChkYXRhLCdsb2FkJyk7DQogICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnbG9hZCcsIGRhdGEpOw0KICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtU3RhdGUubmV4dCh7IHR5cGU6ICdsb2FkJywgZGF0YTogZGF0YSB9KTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSkuY2F0Y2goKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ezu+e7n+W8guW4uCcgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliqDovb3ojYnnqL8NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW29wdD17fV0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGxvYWREcmFmdChvcHQ6IGFueSA9IHt9KTogdm9pZCB7DQogICAgICAgIGlmKCF0aGlzLmxvYWRkcmFmdEFjdGlvbil7DQogICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICdQSU1DT05UUkFDVExXRWRpdFZpZXfop4blm77ooajljZVsb2FkZHJhZnRBY3Rpb27lj4LmlbDmnKrphY3nva4nIH0pOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IGFyZzogYW55ID0geyAuLi5vcHQgfSA7DQogICAgICAgIGxldCB2aWV3cGFyYW1SZXN1bHQ6YW55ID0gT2JqZWN0LmFzc2lnbihhcmcsdGhpcy52aWV3cGFyYW1zKTsNCiAgICAgICAgbGV0IHBvc3Q6IFByb21pc2U8YW55PiA9IHRoaXMuc2VydmljZS5sb2FkRHJhZnQodGhpcy5sb2FkZHJhZnRBY3Rpb24sSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSx7dmlld3BhcmFtczp2aWV3cGFyYW1SZXN1bHR9LCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsNCiAgICAgICAgcG9zdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgew0KICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhOw0KICAgICAgICAgICAgaWYoZGF0YS5waW1jb250cmFjdCl7DQogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbnRleHQse3BpbWNvbnRyYWN0OmRhdGEucGltY29udHJhY3R9KQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdGhpcy5yZXNldERyYWZ0Rm9ybVN0YXRlcygpOw0KICAgICAgICAgICAgdGhpcy5vbkZvcm1Mb2FkKGRhdGEsJ2xvYWREcmFmdCcpOw0KICAgICAgICAgICAgdGhpcy4kZW1pdCgnbG9hZCcsIGRhdGEpOw0KICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICAgICAgICAgIHRoaXMuZm9ybVN0YXRlLm5leHQoeyB0eXBlOiAnbG9hZCcsIGRhdGE6IGRhdGEgfSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gew0KICAgICAgICAgICAgICAgIGNvbnN0IGZvcm06IGFueSA9IHRoaXMuJHJlZnMuZm9ybTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybSkgew0KICAgICAgICAgICAgICAgICAgICBmb3JtLmZpZWxkcy5mb3JFYWNoKChmaWVsZDogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC52YWxpZGF0ZU1lc3NhZ2UgPSAiIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnZhbGlkYXRlU3RhdGUgPSAiIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnZhbGlkYXRlU3RhdHVzID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAgJiYgcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ezu+e7n+W8guW4uCcgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDoh6rliqjkv53lrZgNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gW29wdD17fV0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGF1dG9TYXZlKG9wdDogYW55ID0ge30pOiB2b2lkIHsNCiAgICAgICAgaWYgKCF0aGlzLmZvcm1WYWxpZGF0ZVN0YXR1cygpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgYXJnOiBhbnkgPSB7IC4uLm9wdCB9Ow0KICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXRWYWx1ZXMoKTsNCiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIGRhdGEpOw0KICAgICAgICBjb25zdCBhY3Rpb246IGFueSA9IE9iamVjdC5pcyhkYXRhLnNyZnVmLCAnMScpID8gdGhpcy51cGRhdGVBY3Rpb24gOiB0aGlzLmNyZWF0ZUFjdGlvbjsNCiAgICAgICAgaWYoIWFjdGlvbil7DQogICAgICAgICAgICBsZXQgYWN0aW9uTmFtZTphbnkgPSBPYmplY3QuaXMoZGF0YS5zcmZ1ZiwgJzEnKT8idXBkYXRlQWN0aW9uIjoiY3JlYXRlQWN0aW9uIjsNCiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ1BJTUNPTlRSQUNUTFdFZGl0Vmlld+inhuWbvuihqOWNlScrYWN0aW9uTmFtZSsn5Y+C5pWw5pyq6YWN572uJyB9KTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsNCiAgICAgICAgY29uc3QgcG9zdDogUHJvbWlzZTxhbnk+ID0gdGhpcy5zZXJ2aWNlLmFkZChhY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksYXJnLCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsNCiAgICAgICAgcG9zdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgew0KICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhOw0KICAgICAgICAgICAgdGhpcy5vbkZvcm1Mb2FkKGRhdGEsJ2F1dG9TYXZlJyk7DQogICAgICAgICAgICB0aGlzLiRlbWl0KCdzYXZlJywgZGF0YSk7DQogICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgndmlld2FjdGlvbi9kYXRhc2F2ZWQnLCB7IHZpZXd0YWc6IHRoaXMudmlld3RhZyB9KTsNCiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgICAgICB0aGlzLmZvcm1TdGF0ZS5uZXh0KHsgdHlwZTogJ3NhdmUnLCBkYXRhOiBkYXRhIH0pOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZSB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICfns7vnu5/lvILluLgnIH0pOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5L+d5a2YDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFtvcHQ9e31dDQogICAgICogQHBhcmFtIHtib29sZWFufSBbc2hvd1Jlc3VsdEluZm9dIA0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lmU3RhdGVOZXh0XSBmb3JtU3RhdGXmmK/lkKbkuIvlj5HpgJrnn6UNCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgYXN5bmMgc2F2ZShvcHQ6IGFueSA9IHt9LCBzaG93UmVzdWx0SW5mbz86IGJvb2xlYW4sIGlmU3RhdGVOZXh0OiBib29sZWFuID0gdHJ1ZSk6IFByb21pc2U8YW55PiB7DQogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4gew0KICAgICAgICAgICAgc2hvd1Jlc3VsdEluZm8gPSBzaG93UmVzdWx0SW5mbyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZhbHNlOw0KICAgICAgICAgICAgaWYgKCF0aGlzLmZvcm1WYWxpZGF0ZVN0YXR1cygpKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn5YC86KeE5YiZ5qCh6aqM5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb25zdCBhcmc6IGFueSA9IHsgLi4ub3B0IH07DQogICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXRWYWx1ZXMoKTsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCBkYXRhKTsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCB0aGlzLmNvbnRleHQpOw0KICAgICAgICAgICAgaWYgKGlmU3RhdGVOZXh0KSB7DQogICAgICAgICAgICAgICAgdGhpcy5kcmNvdW50ZXIgPSAwOw0KICAgICAgICAgICAgICAgIGlmKHRoaXMuZHJjb3VudGVyICE9PSAwKXsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcnNhdmVvcHQgPSBvcHQ7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVN0YXRlLm5leHQoeyB0eXBlOiAnYmVmb3Jlc2F2ZScsIGRhdGE6IGFyZyB9KTsvL+WFiOmAmuefpeWFs+ezu+eVjOmdouS/neWtmA0KICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVTdGF0ZSA9IHJlc29sdmU7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb25zdCBhY3Rpb246IGFueSA9IE9iamVjdC5pcyhkYXRhLnNyZnVmLCAnMScpID8gdGhpcy51cGRhdGVBY3Rpb24gOiB0aGlzLmNyZWF0ZUFjdGlvbjsNCiAgICAgICAgICAgIGlmKCFhY3Rpb24pew0KICAgICAgICAgICAgICAgIGxldCBhY3Rpb25OYW1lOmFueSA9IE9iamVjdC5pcyhkYXRhLnNyZnVmLCAnMScpPyJ1cGRhdGVBY3Rpb24iOiJjcmVhdGVBY3Rpb24iOw0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ1BJTUNPTlRSQUNUTFdFZGl0Vmlld+inhuWbvuihqOWNlScrYWN0aW9uTmFtZSsn5Y+C5pWw5pyq6YWN572uJyB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsNCiAgICAgICAgICAgIGNvbnN0IHBvc3Q6IFByb21pc2U8YW55PiA9IE9iamVjdC5pcyhkYXRhLnNyZnVmLCAnMScpP3RoaXMuc2VydmljZS51cGRhdGUoYWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcik6dGhpcy5zZXJ2aWNlLmFkZChhY3Rpb24sSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSxhcmcsIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpOw0KICAgICAgICAgICAgcG9zdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTsNCiAgICAgICAgICAgICAgICB0aGlzLm9uRm9ybUxvYWQoZGF0YSwnc2F2ZScpOw0KICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NhdmUnLCBkYXRhKTsNCiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgndmlld2FjdGlvbi9kYXRhc2F2ZWQnLCB7IHZpZXd0YWc6IHRoaXMudmlld3RhZyB9KTsNCiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVN0YXRlLm5leHQoeyB0eXBlOiAnc2F2ZScsIGRhdGE6IGRhdGEgfSk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgaWYgKHNob3dSZXN1bHRJbmZvKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5zdWNjZXNzKHsgdGl0bGU6ICcnLCBkZXNjOiAoZGF0YS5zcmZtYWpvcnRleHQgPyBkYXRhLnNyZm1ham9ydGV4dCA6ICcnKSArICcmbmJzcDvkv53lrZjmiJDlip/vvIEnIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTsNCiAgICAgICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAgJiYgcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZSB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pDQogICAgfQ0KDQogICAgLyoqDQogICAgKiDliKDpmaQNCiAgICAqDQogICAgKiBAcHVibGljDQogICAgKiBAcGFyYW0geyp9IFtvcHQ9e31dDQogICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgKi8NCiAgICBwdWJsaWMgcmVtb3ZlKG9wdDpBcnJheTxhbnk+ID0gW10sc2hvd1Jlc3VsdEluZm8/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHsNCiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PiB7DQogICAgICAgICAgICBpZighdGhpcy5yZW1vdmVBY3Rpb24pew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ1BJTUNPTlRSQUNUTFdFZGl0Vmlld+inhuWbvuihqOWNlXJlbW92ZUFjdGlvbuWPguaVsOacqumFjee9ricgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgYXJnOiBhbnkgPSBvcHRbMF07DQogICAgICAgICAgICBjb25zdCBfdGhpczogYW55ID0gdGhpczsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLHt2aWV3cGFyYW1zOnRoaXMudmlld3BhcmFtc30pOw0KICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmRlbGV0ZShfdGhpcy5yZW1vdmVBY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksYXJnLCBzaG93UmVzdWx0SW5mbykudGhlbigocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSkgew0KICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgncmVtb3ZlJyxkYXRhKTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtU3RhdGUubmV4dCh7IHR5cGU6ICdyZW1vdmUnLCBkYXRhOiBkYXRhIH0pOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaXNtb2RpZnkgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLnN1Y2Nlc3MoeyB0aXRsZTogJycsIGRlc2M6IChkYXRhLnNyZm1ham9ydGV4dCA/IGRhdGEuc3JmbWFqb3J0ZXh0IDogJycpICsgJyZuYnNwO+WIoOmZpOaIkOWKn++8gScgfSk7DQogICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcjogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBfZGF0YSB9ID0gZXJyb3I7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6IF9kYXRhLnRpdGxlLCBkZXNjOiBfZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5bel5L2c5rWB5ZCv5YqoDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPXt9XQ0KICAgICAqIEBwYXJhbSB7Kn0gW2xvY2FsZGF0YT17fV0NCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fQ0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgYXN5bmMgd2ZzdGFydChkYXRhOiBhbnksbG9jYWxkYXRhPzphbnkpOiBQcm9taXNlPGFueT4gew0KICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IF90aGlzOiBhbnkgPSB0aGlzOw0KICAgICAgICAgICAgY29uc3QgcG9zdDogUHJvbWlzZTxhbnk+ID0gX3RoaXMuc2F2ZSh7fSxmYWxzZSk7DQogICAgICAgICAgICBwb3N0LnRoZW4oKHJlc3BvbnNlOmFueSkgPT57DQogICAgICAgICAgICAgICAgY29uc3QgYXJnOmFueSA9IHJlc3BvbnNlLmRhdGE7DQogICAgICAgICAgICAgICAgaWYodGhpcy52aWV3cGFyYW1zKXsNCiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcse3ZpZXdwYXJhbXM6dGhpcy52aWV3cGFyYW1zfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUHJvbWlzZTxhbnk+ID0gdGhpcy5zZXJ2aWNlLndmc3RhcnQoX3RoaXMuV0ZTdGFydEFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSxhcmcsIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IsbG9jYWxkYXRhKTsNCiAgICAgICAgICAgICAgICByZXN1bHQudGhlbigocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5kYXRhKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJycsIGRlc2M6ICflt6XkvZzmtYHlkK/liqjlpLHotKUsICcgKyByZXNwb25zZS5kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmluZm8oeyB0aXRsZTogJycsIGRlc2M6ICflt6XkvZzmtYHlkK/liqjmiJDlip8nIH0pOw0KICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTsNCiAgICAgICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICfns7vnu5/lvILluLgnIH0pOw0KICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgIH0pDQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOW3peS9nOa1geaPkOS6pA0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0NCiAgICAgKiBAcGFyYW0geyp9IFtsb2NhbGRhdGE9e31dDQogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0NCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIGFzeW5jIHdmc3VibWl0KGRhdGE6IGFueSxsb2NhbGRhdGE/OmFueSk6IFByb21pc2U8YW55PiB7DQogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4gew0KICAgICAgICBjb25zdCBfdGhpczogYW55ID0gdGhpczsNCiAgICAgICAgY29uc3QgYXJnOiBhbnkgPSBkYXRhWzBdOw0KICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsNCiAgICAgICAgaWYgKCFhcmcucGltY29udHJhY3QgfHwgT2JqZWN0LmlzKGFyZy5waW1jb250cmFjdCwgJycpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgcG9zdDogUHJvbWlzZTxhbnk+ID0gT2JqZWN0LmlzKGFyZy5zcmZ1ZiwgJzEnKT90aGlzLnNlcnZpY2UudXBkYXRlKHRoaXMudXBkYXRlQWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcik6dGhpcy5zZXJ2aWNlLmFkZCh0aGlzLmNyZWF0ZUFjdGlvbixKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcik7DQogICAgICAgIHBvc3QudGhlbigocmVzcG9uc2U6YW55KSA9PnsNCiAgICAgICAgICAgICAgICBjb25zdCBhcmc6YW55ID0gcmVzcG9uc2UuZGF0YTsNCiAgICAgICAgICAgICAgICAvLyDkv53lrZjlrozmiJBVSeWkhOeQhg0KICAgICAgICAgICAgICAgIHRoaXMub25Gb3JtTG9hZChhcmcsJ3NhdmUnKTsNCiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdzYXZlJywgYXJnKTsNCiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVN0YXRlLm5leHQoeyB0eXBlOiAnc2F2ZScsIGRhdGE6IGFyZyB9KTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAvLyDlh4blpIfmj5DkuqTlj4LmlbANCiAgICAgICAgICAgICAgICBpZih0aGlzLnZpZXdwYXJhbXMpew0KICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8g5by65Yi26KGl5YWFc3Jmd2ZtZW1vDQogICAgICAgICAgICAgICAgaWYodGhpcy5zcmZ3Zm1lbW8pew0KICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7c3Jmd2ZtZW1vOnRoaXMuc3Jmd2ZtZW1vfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUHJvbWlzZTxhbnk+ID0gdGhpcy5zZXJ2aWNlLndmc3VibWl0KF90aGlzLldGU3VibWl0QWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZywgdGhpcy5zaG93QnVzeUluZGljYXRvcixsb2NhbGRhdGEpOw0KICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAnJywgZGVzYzogJ+W3peS9nOa1geaPkOS6pOWksei0pSwgJyArIHJlc3BvbnNlLmRhdGEubWVzc2FnZSB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRm9ybUxvYWQoYXJnLCdzdWJtaXQnKTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3ZpZXdhY3Rpb24vZGF0YXNhdmVkJywgeyB2aWV3dGFnOiB0aGlzLnZpZXd0YWcgfSk7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5pbmZvKHsgdGl0bGU6ICcnLCBkZXNjOiAn5bel5L2c5rWB5o+Q5Lqk5oiQ5YqfJyB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7DQogICAgICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2UuZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6IHJlc3BvbnNlLmRhdGEubWVzc2FnZSB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZGF0YS5tZXNzYWdlIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ezu+e7n+W8guW4uCcgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7DQogICAgICAgICAgICB9KQ0KICAgICAgICB9KQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOihqOWNlemhueabtOaWsA0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUg55WM6Z2i6KGM5Li65ZCN56ewDQogICAgICogQHBhcmFtIHsqfSBbZGF0YT17fV0g6K+35rGC5pWw5o2uDQogICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdXBkYXRlRGV0YWlscyDmm7TmlrDpobkNCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG93bG9hZGluZ10g5piv5ZCm5pi+56S65Yqg6L2954q25oCBDQogICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyB1cGRhdGVGb3JtSXRlbXMobW9kZTogc3RyaW5nLCBkYXRhOiBhbnkgPSB7fSwgdXBkYXRlRGV0YWlsczogc3RyaW5nW10sIHNob3dsb2FkaW5nPzogYm9vbGVhbik6IHZvaWQgew0KICAgICAgICBpZiAoIW1vZGUgfHwgKG1vZGUgJiYgT2JqZWN0LmlzKG1vZGUsICcnKSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBhcmc6IGFueSA9IHsgLi4uZGF0YSB9Ow0KICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx0aGlzLnZpZXdwYXJhbXMpOw0KICAgICAgICBjb25zdCBwb3N0OiBQcm9taXNlPGFueT4gPSB0aGlzLnNlcnZpY2UuZnJvbnRMb2dpYyhtb2RlLEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksYXJnLCBzaG93bG9hZGluZyk7DQogICAgICAgIHBvc3QudGhlbigocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgew0KICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ihqOWNlemhueabtOaWsOWksei0pScgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7DQogICAgICAgICAgICBjb25zdCBfZGF0YTogYW55ID0ge307DQogICAgICAgICAgICB1cGRhdGVEZXRhaWxzLmZvckVhY2goKG5hbWU6IHN0cmluZykgPT4gew0KICAgICAgICAgICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oX2RhdGEsIHsgW25hbWVdOiBkYXRhW25hbWVdIH0pOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB0aGlzLnNldEZvcm1FbmFibGVDb25kKF9kYXRhKTsNCiAgICAgICAgICAgIHRoaXMuZmlsbEZvcm0oX2RhdGEsJ3VwZGF0ZUZvcm1JdGVtJyk7DQogICAgICAgICAgICB0aGlzLmZvcm1Mb2dpYyh7IG5hbWU6ICcnLCBuZXdWYWw6IG51bGwsIG9sZFZhbDogbnVsbCB9KTsNCiAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5nLm5leHQoSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKSk7DQogICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgICAgICAgdGhpcy5mb3JtU3RhdGUubmV4dCh7IHR5cGU6ICd1cGRhdGVmb3JtaXRlbScsIHVmaW1vZGU6IGFyZy5zcmZ1Zmltb2RlLCBkYXRhOiBfZGF0YSB9KTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2Uuc3RhdHVzIHx8ICFyZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWbnui9puS6i+S7tg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSAkZXZlbnQNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIG9uRW50ZXIoJGV2ZW50OiBhbnkpOiB2b2lkIHsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkv53lrZjlubbpgIDlh7oNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIHNhdmVBbmRFeGl0KGRhdGE6YW55W10pOlByb21pc2U8YW55PnsNCiAgICAgICAgbGV0IF90aGlzID0gdGhpczsNCiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PnsNCiAgICAgICAgICAgIGxldCBhcmc6IGFueSA9IHt9Ow0KICAgICAgICAgICAgaWYoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApew0KICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLGRhdGFbMF0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgX3RoaXMuY3VycmVudEFjdGlvbiA9ICJzYXZlQW5kRXhpdCI7DQogICAgICAgICAgICBfdGhpcy5zYXZlKFthcmddKS50aGVuKChyZXMpID0+ew0KICAgICAgICAgICAgICAgIGlmKHJlcyl7DQogICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlVmlldyhyZXMuZGF0YSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTsNCiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT57DQogICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsNCiAgICAgICAgICAgIH0pDQogICAgICAgIH0pDQogICAgfQ0KDQogICAgLyoqDQogICAgICog5L+d5a2Y5bm25paw5bu6DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzYXZlQW5kTmV3KGRhdGE6YW55W10pOlByb21pc2U8YW55PnsNCiAgICAgICAgbGV0IF90aGlzID0gdGhpczsNCiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PnsNCiAgICAgICAgICAgIGxldCBhcmc6IGFueSA9IHt9Ow0KICAgICAgICAgICAgaWYoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApew0KICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLGRhdGFbMF0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgX3RoaXMuY3VycmVudEFjdGlvbiA9ICJzYXZlQW5kTmV3IjsNCiAgICAgICAgICAgIF90aGlzLnNhdmUoW2FyZ10pLnRoZW4oKHJlcykgPT57DQogICAgICAgICAgICAgICAgX3RoaXMuUmVzZXREYXRhKHJlcyk7DQogICAgICAgICAgICAgICAgX3RoaXMubG9hZERyYWZ0KHt9KTsNCiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT57DQogICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsNCiAgICAgICAgICAgIH0pDQogICAgICAgIH0pDQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yig6Zmk5bm26YCA5Ye6DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzDQogICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyByZW1vdmVBbmRFeGl0KGRhdGE6YW55W10pOlByb21pc2U8YW55PnsNCiAgICAgICAgbGV0IF90aGlzID0gdGhpczsNCiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PnsNCiAgICAgICAgICAgIGxldCBhcmc6IGFueSA9IHt9Ow0KICAgICAgICAgICAgaWYoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApew0KICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLGRhdGFbMF0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgX3RoaXMucmVtb3ZlKFthcmddKS50aGVuKChyZXMpID0+ew0KICAgICAgICAgICAgICAgIGlmKHJlcyl7DQogICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZVZpZXcocmVzLmRhdGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7DQogICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+ew0KICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7DQogICAgICAgICAgICB9KQ0KICAgICAgICB9KQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICog5YWz57O755WM6Z2i5pWw5o2u5L+d5a2Y5a6M5oiQDQogICAgKg0KICAgICogQHBhcmFtIHthbnl9ICRldmVudA0KICAgICogQG1lbWJlcm9mIExhYlNlcnZpY2VzX0VkaXRHcmlkQmFzZQ0KICAgICovDQogICAgcHVibGljIGRyZGF0YXNhdmVkKCRldmVudDphbnkpew0KICAgICAgICBsZXQgX3RoaXMgPSB0aGlzOw0KICAgICAgICB0aGlzLmRyY291bnRlci0tOw0KICAgICAgICBpZih0aGlzLmRyY291bnRlciA9PT0gMCl7DQogICAgICAgICAgICB0aGlzLnNhdmUodGhpcy5kcnNhdmVvcHQsIHVuZGVmaW5lZCwgZmFsc2UpLnRoZW4oKHJlcykgPT57DQogICAgICAgICAgICAgICAgdGhpcy5zYXZlU3RhdGUocmVzKTsNCiAgICAgICAgICAgICAgICB0aGlzLmRyc2F2ZW9wdCA9IHt9Ow0KICAgICAgICAgICAgICAgIGlmKE9iamVjdC5pcyhfdGhpcy5jdXJyZW50QWN0aW9uLCAic2F2ZUFuZE5ldyIpKXsNCiAgICAgICAgICAgICAgICAgICAgX3RoaXMuUmVzZXREYXRhKHJlcyk7DQogICAgICAgICAgICAgICAgICAgIF90aGlzLmxvYWREcmFmdCh7fSk7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYoT2JqZWN0LmlzKF90aGlzLmN1cnJlbnRBY3Rpb24sICJzYXZlQW5kRXhpdCIpKXsNCiAgICAgICAgICAgICAgICAgICAgaWYocmVzKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlVmlldyhyZXMuZGF0YSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaWsOW7uum7mOiupOWAvA0KICAgICAqIEBtZW1iZXJvZiBMYWJTZXJ2aWNlc19FZGl0R3JpZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY3JlYXRlRGVmYXVsdCgpeyAgICAgICAgICAgICAgICAgICAgDQogICAgICAgIGlmICh0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkoJ29ybW9yZ25hbWUnKSkgew0KICAgICAgICAgICAgdGhpcy5kYXRhWydvcm1vcmduYW1lJ10gPSB0aGlzLmNvbnRleHRbJ1NSRk9SR05BTUUnXTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAodGhpcy5kYXRhLmhhc093blByb3BlcnR5KCdvcm1vcmdpZCcpKSB7DQogICAgICAgICAgICB0aGlzLmRhdGFbJ29ybW9yZ2lkJ10gPSB0aGlzLmNvbnRleHRbJ1NSRk9SR0lEJ107DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmm7TmlrDpu5jorqTlgLwNCiAgICAgKiBAbWVtYmVyb2YgTGFiU2VydmljZXNfRWRpdEdyaWRCYXNlDQogICAgICovDQogICAgcHVibGljIHVwZGF0ZURlZmF1bHQoKXsgICAgICAgICAgICAgICAgICAgIA0KICAgIH0NCg0KICAgIA0KfQ0K"},null]}
{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-person\\txlxyg-2-grid\\txlxyg-2-grid-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-person\\txlxyg-2-grid\\txlxyg-2-grid-base.vue","mtime":1630509411986},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmltcG9ydCB7IFZ1ZSwgQ29tcG9uZW50LCBQcm9wLCBQcm92aWRlLCBFbWl0LCBXYXRjaCwgTW9kZWwsSW5qZWN0IH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IENyZWF0ZUVsZW1lbnQgfSBmcm9tICd2dWUnOwppbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJzsKaW1wb3J0IHsgQ29udHJvbEludGVyZmFjZSB9IGZyb20gJ0AvaW50ZXJmYWNlL2NvbnRyb2wnOwppbXBvcnQgeyBVSUFjdGlvblRvb2wsVXRpbCB9IGZyb20gJ0AvdXRpbHMnOwppbXBvcnQgTmF2RGF0YVNlcnZpY2UgZnJvbSAnQC9zZXJ2aWNlL2FwcC9uYXZkYXRhLXNlcnZpY2UnOwppbXBvcnQgUGltUGVyc29uU2VydmljZSBmcm9tICdAL3NlcnZpY2UvcGltLXBlcnNvbi9waW0tcGVyc29uLXNlcnZpY2UnOwppbXBvcnQgVFhMWFlHXzJTZXJ2aWNlIGZyb20gJy4vdHhseHlnLTItZ3JpZC1zZXJ2aWNlJzsKCmltcG9ydCBDb2RlTGlzdFNlcnZpY2UgZnJvbSAiQHNlcnZpY2UvYXBwL2NvZGVsaXN0LXNlcnZpY2UiOwppbXBvcnQgeyBGb3JtSXRlbU1vZGVsIH0gZnJvbSAnQC9tb2RlbC9mb3JtLWRldGFpbCc7CgoKQENvbXBvbmVudCh7CiAgICBjb21wb25lbnRzOiB7CiAgICAgIAogICAgfQp9KQpleHBvcnQgZGVmYXVsdCBjbGFzcyBUWExYWUdfMkJhc2UgZXh0ZW5kcyBWdWUgaW1wbGVtZW50cyBDb250cm9sSW50ZXJmYWNlIHsKCiAgICAvKioKICAgICAqIOWQjeensAogICAgICoKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIG5hbWU/OiBzdHJpbmc7CgogICAgLyoqCiAgICAgKiDop4blm77pgJrorq/lr7nosaEKICAgICAqCiAgICAgKiBAdHlwZSB7U3ViamVjdDxWaWV3U3RhdGU+fQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBAUHJvcCgpIHB1YmxpYyB2aWV3U3RhdGUhOiBTdWJqZWN0PFZpZXdTdGF0ZT47CgogICAgLyoqCiAgICAgKiDlupTnlKjkuIrkuIvmlocKICAgICAqCiAgICAgKiBAdHlwZSB7Kn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgQFByb3AoKSBwdWJsaWMgY29udGV4dDogYW55OwoKICAgIC8qKgogICAgICog6KeG5Zu+5Y+C5pWwCiAgICAgKgogICAgICogQHR5cGUgeyp9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIHZpZXdwYXJhbXM6IGFueTsKCiAgICAvKioKICAgICAqIOinhuWbvueKtuaAgeS6i+S7tgogICAgICoKICAgICAqIEBwdWJsaWMKICAgICAqIEB0eXBlIHsoU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkKX0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIHZpZXdTdGF0ZUV2ZW50OiBTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQ7CgogICAgLyoqCiAgICAgKiDojrflj5bpg6jku7bnsbvlnosKICAgICAqCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgZ2V0Q29udHJvbFR5cGUoKTogc3RyaW5nIHsKICAgICAgICByZXR1cm4gJ0dSSUQnCiAgICB9CgoKCiAgICAvKioKICAgICAqIOiuoeaVsOWZqOacjeWKoeWvueixoembhuWQiAogICAgICoKICAgICAqIEB0eXBlIHtBcnJheTwqPn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLyAgICAKICAgIHB1YmxpYyBjb3VudGVyU2VydmljZUFycmF5OkFycmF5PGFueT4gPSBbXTsKCiAgICAvKioKICAgICAqIOW7uuaehOmDqOS7tuacjeWKoeWvueixoQogICAgICoKICAgICAqIEB0eXBlIHtUWExYWUdfMlNlcnZpY2V9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBzZXJ2aWNlOiBUWExYWUdfMlNlcnZpY2UgPSBuZXcgVFhMWFlHXzJTZXJ2aWNlKHsgJHN0b3JlOiB0aGlzLiRzdG9yZSB9KTsKCiAgICAvKioKICAgICAqIOWunuS9k+acjeWKoeWvueixoQogICAgICoKICAgICAqIEB0eXBlIHtQaW1QZXJzb25TZXJ2aWNlfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgYXBwRW50aXR5U2VydmljZTogUGltUGVyc29uU2VydmljZSA9IG5ldyBQaW1QZXJzb25TZXJ2aWNlKHsgJHN0b3JlOiB0aGlzLiRzdG9yZSB9KTsKICAgIAoKCiAgICAvKioKICAgICAqIOWFs+mXreinhuWbvgogICAgICoKICAgICAqIEBwYXJhbSB7YW55fSBhcmdzCiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBjbG9zZVZpZXcoYXJnczogYW55KTogdm9pZCB7CiAgICAgICAgbGV0IF90aGlzOiBhbnkgPSB0aGlzOwogICAgICAgIF90aGlzLiRlbWl0KCdjbG9zZXZpZXcnLCBbYXJnc10pOwogICAgfQoKICAgIC8qKgogICAgICogIOiuoeaVsOWZqOWIt+aWsAogICAgICoKICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGNvdW50ZXJSZWZyZXNoKCl7CiAgICAgICAgY29uc3QgX3RoaXM6YW55ID10aGlzOwogICAgICAgIGlmKF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkgJiYgX3RoaXMuY291bnRlclNlcnZpY2VBcnJheS5sZW5ndGggPjApewogICAgICAgICAgICBfdGhpcy5jb3VudGVyU2VydmljZUFycmF5LmZvckVhY2goKGl0ZW06YW55KSA9PnsKICAgICAgICAgICAgICAgIGlmKGl0ZW0ucmVmcmVzaERhdGEgJiYgaXRlbS5yZWZyZXNoRGF0YSBpbnN0YW5jZW9mIEZ1bmN0aW9uKXsKICAgICAgICAgICAgICAgICAgICBpdGVtLnJlZnJlc2hEYXRhKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIOS7o+eggeihqOacjeWKoeWvueixoQogICAgICoKICAgICAqIEB0eXBlIHtDb2RlTGlzdFNlcnZpY2V9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8gIAogICAgcHVibGljIGNvZGVMaXN0U2VydmljZTpDb2RlTGlzdFNlcnZpY2UgPSBuZXcgQ29kZUxpc3RTZXJ2aWNlKHsgJHN0b3JlOiB0aGlzLiRzdG9yZSB9KTsKCiAgICAvKioKICAgICAqIOiOt+WPluWkmumhueaVsOaNrgogICAgICoKICAgICAqIEByZXR1cm5zIHthbnlbXX0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGdldERhdGFzKCk6IGFueVtdIHsKICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25zOwogICAgfQoKICAgIC8qKgogICAgICog6I635Y+W5Y2V6aG55qCRCiAgICAgKgogICAgICogQHJldHVybnMgeyp9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBnZXREYXRhKCk6IGFueSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uc1swXTsKICAgIH0KCiAgICAvKioKICAgICAqIOaJk+W8gOaWsOW7uuaVsOaNruinhuWbvgogICAgICoKICAgICAqIEB0eXBlIHthbnl9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIG5ld2RhdGE6IGFueTsKICAgIC8qKgogICAgICog5omT5byA57yW6L6R5pWw5o2u6KeG5Zu+CiAgICAgKgogICAgICogQHR5cGUge2FueX0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgQFByb3AoKSBwdWJsaWMgb3BlbmRhdGE6IGFueTsKCiAgICAvKioKICAgICAqIOaYvuekuuWkhOeQhuaPkOekugogICAgICoKICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBAUHJvcCh7IGRlZmF1bHQ6IHRydWUgfSkgcHVibGljIHNob3dCdXN5SW5kaWNhdG9yPzogYm9vbGVhbjsKCiAgICAvKioKICAgICAqIOmDqOS7tuihjOS4ui0tdXBkYXRlCiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgQFByb3AoKSBwdWJsaWMgdXBkYXRlQWN0aW9uITogc3RyaW5nOwogICAgCiAgICAvKioKICAgICAqIOmDqOS7tuihjOS4ui0tZmV0Y2gKICAgICAqCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBAUHJvcCgpIHB1YmxpYyBmZXRjaEFjdGlvbiE6IHN0cmluZzsKICAgIAogICAgLyoqCiAgICAgKiDpg6jku7booYzkuLotLXJlbW92ZQogICAgICoKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIHJlbW92ZUFjdGlvbiE6IHN0cmluZzsKICAgIAogICAgLyoqCiAgICAgKiDpg6jku7booYzkuLotLWxvYWQKICAgICAqCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBAUHJvcCgpIHB1YmxpYyBsb2FkQWN0aW9uITogc3RyaW5nOwogICAgCiAgICAvKioKICAgICAqIOmDqOS7tuihjOS4ui0tbG9hZGRyYWZ0CiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgQFByb3AoKSBwdWJsaWMgbG9hZGRyYWZ0QWN0aW9uITogc3RyaW5nOwogICAgCiAgICAvKioKICAgICAqIOmDqOS7tuihjOS4ui0tY3JlYXRlCiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgQFByb3AoKSBwdWJsaWMgY3JlYXRlQWN0aW9uITogc3RyaW5nOwoKICAgIC8qKgogICAgICog5b2T5YmN6aG1CiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGN1clBhZ2U6IG51bWJlciA9IDE7CgogICAgLyoqCiAgICAgKiDmlbDmja4KICAgICAqCiAgICAgKiBAdHlwZSB7YW55W119CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBpdGVtczogYW55W10gPSBbXTsKCiAgICAvKioKICAgICAqIOaYr+WQpuaUr+aMgeWIhumhtQogICAgICoKICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgaXNFbmFibGVQYWdpbmdCYXI6IGJvb2xlYW4gPSB0cnVlOwoKICAgIC8qKgogICAgICog5piv5ZCm56aB55So5o6S5bqPCiAgICAgKgogICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBpc05vU29ydDogYm9vbGVhbiA9IGZhbHNlOwoKICAgIC8qKgogICAgICog5o6S5bqP5pa55ZCRCiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIG1pbm9yU29ydERpcjogc3RyaW5nID0gJ0RFU0MnOwoKICAgIC8qKgogICAgICog5o6S5bqP5a2X5q61CiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIG1pbm9yU29ydFBTREVGOiBzdHJpbmcgPSAndHhkcSc7CgogICAgLyoqCiAgICAgKiDliIbpobXmnaHmlbAKICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgbGltaXQ6IG51bWJlciA9IDEwMDsKCiAgICAvKioKICAgICAqIOaYr+WQpuaYvuekuuagh+mimAogICAgICoKICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgaXNIaWRlSGVhZGVyOiBib29sZWFuID0gZmFsc2U7CgogICAgLyoqCiAgICAgKiDmmK/lkKbpu5jorqTpgInkuK3nrKzkuIDmnaHmlbDmja4KICAgICAqCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgQFByb3AoeyBkZWZhdWx0OiBmYWxzZSB9KSBwdWJsaWMgaXNTZWxlY3RGaXJzdERlZmF1bHQhOiBib29sZWFuOwoKICAgIC8qKgogICAgICog5piv5ZCm5Y2V6YCJCiAgICAgKgogICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIGlzU2luZ2xlU2VsZWN0PzogYm9vbGVhbjsKCiAgICAvKioKICAgICAqIOmAieS4reaVsOaNruWtl+espuS4sgogICAgICoKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIEBQcm9wKCkgcHVibGljIHNlbGVjdGVkRGF0YT86IHN0cmluZzsKCiAgICAvKioKICAgICAqIOmAieS4reWAvOWPmOWMlgogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbAogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBAV2F0Y2goJ3NlbGVjdGVkRGF0YScpCiAgICBwdWJsaWMgb25WYWx1ZUNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpIHsKICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBbXTsKICAgICAgICBpZih0aGlzLnNlbGVjdGVkRGF0YSl7CiAgICAgICAgICAgIGNvbnN0IHJlZnM6IGFueSA9IHRoaXMuJHJlZnM7CiAgICAgICAgICAgIGlmIChyZWZzLm11bHRpcGxlVGFibGUpIHsKICAgICAgICAgICAgICAgIHJlZnMubXVsdGlwbGVUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICAgICAgICAgICAgSlNPTi5wYXJzZSh0aGlzLnNlbGVjdGVkRGF0YSkuZm9yRWFjaCgoc2VsZWN0aW9uOmFueSk9PnsKICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWRJdGVtID0gdGhpcy5pdGVtcy5maW5kKChpdGVtOmFueSk9PnsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5pcyhpdGVtLnNyZmtleSwgc2VsZWN0aW9uLnNyZmtleSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRJdGVtKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dDbGljayhzZWxlY3RlZEl0ZW0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICog6KGo5qC86KGM5pWw5o2u6buY6K6k5r+A5rS75qih5byPCiAgICAgKiAwIOS4jea/gOa0uwogICAgICogMSDljZXlh7vmv4DmtLsKICAgICAqIDIg5Y+M5Ye75r+A5rS7CiAgICAgKgogICAgICogQHR5cGUgeyhudW1iZXIgfCAwIHwgMSB8IDIpfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBAUHJvcCh7ZGVmYXVsdDogMn0pIHB1YmxpYyBncmlkUm93QWN0aXZlTW9kZSE6IG51bWJlcjsKCiAgICAvKioKICAgICAqIOaYr+WQpuW8gOWQr+ihjOe8lui+kQogICAgICoKICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBAUHJvcCh7ZGVmYXVsdDogZmFsc2V9KSBwdWJsaWMgaXNPcGVuRWRpdCE6IGJvb2xlYW47CgogICAgLyoqCiAgICAgKiDlrp7pmYXmmK/lkKblvIDlkK/ooYznvJbovpEKICAgICAqCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGFjdHVhbElzT3BlbkVkaXQ6IGJvb2xlYW4gPSB0aGlzLmlzT3BlbkVkaXQ7CgogICAgLyoqCiAgICAgKiDmgLvmnaHmlbAKICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgdG90YWxyb3c6IG51bWJlciA9IDA7CgogICAgLyoqCiAgICAgKiDpgInkuK3ooYzmlbDmja4KICAgICAqCiAgICAgKiBAdHlwZSB7YW55W119CiAgICAgKiBAbWVtYmVyb2YgTWFpbgogICAgICovCiAgICBwdWJsaWMgc2VsZWN0aW9uczogYW55W10gPSBbXTsKCiAgICAvKioKICAgICAqIOaLpuaIquihjOmAieS4rQogICAgICoKICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICogQG1lbWJlcm9mIE1haW4KICAgICAqLwogICAgcHVibGljIHN0b3BSb3dDbGljazogYm9vbGVhbiA9IGZhbHNlOwoKCgoKICAgIC8qKgogICAgICog6KGo5qC85piv5ZCm5pi+56S6CiAgICAgKgogICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBpc0Rpc3BsYXk6Ym9vbGVhbiA9IHRydWU7CgogICAgLyoqCiAgICAgKiDpg6jku7bliLfmlrAKICAgICAqCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzCiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyByZWZyZXNoKGFyZ3M6IGFueVtdKTogdm9pZCB7CiAgICAgICAgdGhpcy5sb2FkKCk7CiAgICB9CgogICAgLyoqCiAgICAqIOmAiemhueahhuWIl+WuvQogICAgKgogICAgKiBAdHlwZSB7bnVtYmVyfQogICAgKiBAbWVtYmVyb2YgQXBwSW5kZXgKICAgICovCiAgICBwdWJsaWMgY2hlY2tib3hDb2xXaWR0aDogbnVtYmVyID0gMzQ7CgogICAgLyoqCiAgICAgKiDmmK/lkKblhYHorrjmi5bliqjliJflrr0KICAgICAqCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqIEBtZW1iZXJvZiBBcHBFbWJlZFBpY2tlcgogICAgICovCiAgICBwdWJsaWMgaXNEcmFnZW5kQ29sOiBib29sZWFuID0gZmFsc2U7CgogICAgLyoqCiAgICAgKiDmiYDmnInliJfmiJDlkZgKICAgICAqCiAgICAgKiBAdHlwZSB7YW55W119CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBhbGxDb2x1bW5zOiBhbnlbXSA9IFsKICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICd5Z2JoJywKICAgICAgICAgICAgbGFiZWw6ICflkZjlt6XnvJblj7cnLAogICAgICAgICAgICBsYW5ndGFnOiAnZW50aXRpZXMucGltcGVyc29uLnR4bHh5Z18yX2dyaWQuY29sdW1ucy55Z2JoJywKICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgdXRpbDogJ3B4JwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBuYW1lOiAncGltcGVyc29ubmFtZScsCiAgICAgICAgICAgIGxhYmVsOiAn5ZGY5bel5aeT5ZCNJywKICAgICAgICAgICAgbGFuZ3RhZzogJ2VudGl0aWVzLnBpbXBlcnNvbi50eGx4eWdfMl9ncmlkLmNvbHVtbnMucGltcGVyc29ubmFtZScsCiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIHV0aWw6ICdweCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgbmFtZTogJ3p6ZHpzJywKICAgICAgICAgICAgbGFiZWw6ICfnu4Tnu4cnLAogICAgICAgICAgICBsYW5ndGFnOiAnZW50aXRpZXMucGltcGVyc29uLnR4bHh5Z18yX2dyaWQuY29sdW1ucy56emR6cycsCiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIHV0aWw6ICdweCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgbmFtZTogJ29ybW9yZ3NlY3Rvcm5hbWUnLAogICAgICAgICAgICBsYWJlbDogJ+mDqOmXqCcsCiAgICAgICAgICAgIGxhbmd0YWc6ICdlbnRpdGllcy5waW1wZXJzb24udHhseHlnXzJfZ3JpZC5jb2x1bW5zLm9ybW9yZ3NlY3Rvcm5hbWUnLAogICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICB1dGlsOiAnUFgnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICdyYW5rJywKICAgICAgICAgICAgbGFiZWw6ICfogYznuqcnLAogICAgICAgICAgICBsYW5ndGFnOiAnZW50aXRpZXMucGltcGVyc29uLnR4bHh5Z18yX2dyaWQuY29sdW1ucy5yYW5rJywKICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgdXRpbDogJ3B4JwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBuYW1lOiAnbHhkaCcsCiAgICAgICAgICAgIGxhYmVsOiAn5omL5py65Y+356CBJywKICAgICAgICAgICAgbGFuZ3RhZzogJ2VudGl0aWVzLnBpbXBlcnNvbi50eGx4eWdfMl9ncmlkLmNvbHVtbnMubHhkaCcsCiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIHV0aWw6ICdweCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgbmFtZTogJ3hiJywKICAgICAgICAgICAgbGFiZWw6ICfmgKfliKsnLAogICAgICAgICAgICBsYW5ndGFnOiAnZW50aXRpZXMucGltcGVyc29uLnR4bHh5Z18yX2dyaWQuY29sdW1ucy54YicsCiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIHV0aWw6ICdweCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgbmFtZTogJ25qJywKICAgICAgICAgICAgbGFiZWw6ICflubTpvoQnLAogICAgICAgICAgICBsYW5ndGFnOiAnZW50aXRpZXMucGltcGVyc29uLnR4bHh5Z18yX2dyaWQuY29sdW1ucy5uaicsCiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIHV0aWw6ICdweCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgbmFtZTogJ3Bvc3RhbGFkZHJlc3MnLAogICAgICAgICAgICBsYWJlbDogJ+mAmuiur+WcsOWdgCcsCiAgICAgICAgICAgIGxhbmd0YWc6ICdlbnRpdGllcy5waW1wZXJzb24udHhseHlnXzJfZ3JpZC5jb2x1bW5zLnBvc3RhbGFkZHJlc3MnLAogICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICB1dGlsOiAncHgnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICdqdGx4cicsCiAgICAgICAgICAgIGxhYmVsOiAn5a625bqt6IGU57O75Lq6JywKICAgICAgICAgICAgbGFuZ3RhZzogJ2VudGl0aWVzLnBpbXBlcnNvbi50eGx4eWdfMl9ncmlkLmNvbHVtbnMuanRseHInLAogICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICB1dGlsOiAncHgnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICdqdGx4cmRoJywKICAgICAgICAgICAgbGFiZWw6ICflrrbluq3ogZTns7vkurrnlLXor50nLAogICAgICAgICAgICBsYW5ndGFnOiAnZW50aXRpZXMucGltcGVyc29uLnR4bHh5Z18yX2dyaWQuY29sdW1ucy5qdGx4cmRoJywKICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgdXRpbDogJ1BYJwogICAgICAgIH0sCiAgICBdCgogICAgLyoqCiAgICAgKiDooajmoLzmqKHlnovpm4blkIgKICAgICAqCiAgICAgKiBAdHlwZSB7Kn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGdyaWRJdGVtc01vZGVsOiBhbnlbXSA9IFtdOwoKICAgIC8qKgogICAgICog6I635Y+W6KGo5qC86KGM5qih5Z6LCiAgICAgKgogICAgICogQHR5cGUgeyp9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBnZXRHcmlkUm93TW9kZWwoKXsKICAgICAgICByZXR1cm4gewogICAgICAgICAgc3Jma2V5OiBuZXcgRm9ybUl0ZW1Nb2RlbCgpLAogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIOWxnuaAp+WAvOinhOWImQogICAgICoKICAgICAqIEB0eXBlIHsqfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgcnVsZXM6IGFueSA9IHsKICAgICAgICBzcmZrZXk6IFsKICAgICAgICAgICAgIHsgcmVxdWlyZWQ6IGZhbHNlLCB2YWxpZGF0b3I6IChydWxlOmFueSwgdmFsdWU6YW55LCBjYWxsYmFjazphbnkpID0+IHsgcmV0dXJuIChydWxlLnJlcXVpcmVkICYmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAiIikpID8gZmFsc2UgOiB0cnVlO30sIG1lc3NhZ2U6ICfkurrlkZjkv6Hmga/moIfor4Yg5YC85LiN6IO95Li656m6JywgdHJpZ2dlcjogJ2NoYW5nZScgfSwKICAgICAgICAgICAgeyByZXF1aXJlZDogZmFsc2UsIHZhbGlkYXRvcjogKHJ1bGU6YW55LCB2YWx1ZTphbnksIGNhbGxiYWNrOmFueSkgPT4geyByZXR1cm4gKHJ1bGUucmVxdWlyZWQgJiYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09ICIiKSkgPyBmYWxzZSA6IHRydWU7fSwgbWVzc2FnZTogJ+S6uuWRmOS/oeaBr+agh+ivhiDlgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfSwKICAgICAgICBdLAogICAgfQoKICAgIC8qKgogICAgICog6KGo5qC86KGM57yW6L6R6aG55qCh6aqMCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IOWxnuaAp+WQjQogICAgICogQHBhcmFtIHsqfSBkYXRhIOihjOaVsOaNrgogICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd0luZGV4IOihjOe0ouW8lQogICAgICogQHJldHVybnMgUHJvbWlzZTxhbnk+CiAgICAgKiAKICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIHZhbGlkYXRlKHByb3BlcnR5OnN0cmluZywgZGF0YTphbnksIHJvd0luZGV4Om51bWJlcik6UHJvbWlzZTxhbnk+ewogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgICAgIHRoaXMuJHV0aWwudmFsaWRhdGVJdGVtKHByb3BlcnR5LGRhdGEsdGhpcy5ydWxlcykudGhlbigoKT0+ewogICAgICAgICAgICAgICAgdGhpcy5ncmlkSXRlbXNNb2RlbFtyb3dJbmRleF1bcHJvcGVydHldLnNldEVycm9yKG51bGwpOwogICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTsKICAgICAgICAgICAgfSkuY2F0Y2goKHsgZXJyb3JzLCBmaWVsZHMgfSkgPT4gewogICAgICAgICAgICAgICAgdGhpcy5ncmlkSXRlbXNNb2RlbFtyb3dJbmRleF1bcHJvcGVydHldLnNldEVycm9yKGVycm9yc1swXS5tZXNzYWdlKTsKICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIOagoemqjOaJgOacieS/ruaUuei/h+eahOe8lui+kemhuQogICAgICoKICAgICAqIEByZXR1cm5zIFByb21pc2U8YW55PgogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGVBbGwoKXsKICAgICAgICBsZXQgdmFsaWRhdGVTdGF0ZSA9IHRydWU7CiAgICAgICAgbGV0IGluZGV4ID0gLTE7CiAgICAgICAgZm9yKGxldCBpdGVtIG9mIHRoaXMuaXRlbXMpewogICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgIGlmKGl0ZW0ucm93RGF0YVN0YXRlID09PSAiY3JlYXRlIiB8fCBpdGVtLnJvd0RhdGFTdGF0ZSA9PT0gInVwZGF0ZSIpewogICAgICAgICAgICBmb3IobGV0IHByb3BlcnR5IG9mIE9iamVjdC5rZXlzKHRoaXMucnVsZXMpKXsKICAgICAgICAgICAgICBpZighYXdhaXQgdGhpcy52YWxpZGF0ZShwcm9wZXJ0eSxpdGVtLGluZGV4KSl7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN0YXRlID0gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB2YWxpZGF0ZVN0YXRlOwogICAgfQoKICAgIC8qKgogICAgICog6KGo5qC85pWw5o2u5Yqg6L29CiAgICAgKgogICAgICogQHBhcmFtIHsqfSBbYXJnPXt9XQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgbG9hZChvcHQ6IGFueSA9IHt9LCBwYWdlUmVzZXQ6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQgewogICAgICAgIGlmKCF0aGlzLmZldGNoQWN0aW9uKXsKICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAnUElNUEVSU09OTFpZR0hNQ0dyaWRWaWV36KeG5Zu+6KGo5qC8ZmV0Y2hBY3Rpb27lj4LmlbDmnKrphY3nva4nIH0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmKHBhZ2VSZXNldCl7CiAgICAgICAgICAgIHRoaXMuY3VyUGFnZSA9IDE7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGFyZzogYW55ID0gey4uLm9wdH07CiAgICAgICAgY29uc3QgcGFnZTogYW55ID0ge307CiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVQYWdpbmdCYXIpIHsKICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYWdlLCB7IHBhZ2U6IHRoaXMuY3VyUGFnZS0xLCBzaXplOiB0aGlzLmxpbWl0IH0pOwogICAgICAgIH0KICAgICAgICAvLyDorr7nva7mjpLluo8KICAgICAgICBpZiAoIXRoaXMuaXNOb1NvcnQgJiYgIU9iamVjdC5pcyh0aGlzLm1pbm9yU29ydERpciwgJycpICYmICFPYmplY3QuaXModGhpcy5taW5vclNvcnRQU0RFRiwgJycpKSB7CiAgICAgICAgICAgIGNvbnN0IHNvcnQ6IHN0cmluZyA9IHRoaXMubWlub3JTb3J0UFNERUYrIiwiK3RoaXMubWlub3JTb3J0RGlyOwogICAgICAgICAgICBPYmplY3QuYXNzaWduKHBhZ2UsIHsgc29ydDogc29ydCB9KTsKICAgICAgICB9CiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmcsIHBhZ2UpOwogICAgICAgIGNvbnN0IHBhcmVudGRhdGE6IGFueSA9IHt9OwogICAgICAgIHRoaXMuJGVtaXQoJ2JlZm9yZWxvYWQnLCBwYXJlbnRkYXRhKTsKICAgICAgICBPYmplY3QuYXNzaWduKGFyZywgcGFyZW50ZGF0YSk7CiAgICAgICAgbGV0IHRlbXBWaWV3UGFyYW1zOmFueSA9IHBhcmVudGRhdGEudmlld3BhcmFtcz9wYXJlbnRkYXRhLnZpZXdwYXJhbXM6e307CiAgICAgICAgT2JqZWN0LmFzc2lnbih0ZW1wVmlld1BhcmFtcyxKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMudmlld3BhcmFtcykpKTsKICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7dmlld3BhcmFtczp0ZW1wVmlld1BhcmFtc30pOwogICAgICAgIGNvbnN0IHBvc3Q6IFByb21pc2U8YW55PiA9IHRoaXMuc2VydmljZS5zZWFyY2godGhpcy5mZXRjaEFjdGlvbixKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLCBhcmcsIHRoaXMuc2hvd0J1c3lJbmRpY2F0b3IpOwogICAgICAgIHBvc3QudGhlbigocmVzcG9uc2U6IGFueSkgPT4gewogICAgICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yTWVzc2FnZSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuZXJyb3JNZXNzYWdlIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICAgIHRoaXMudG90YWxyb3cgPSByZXNwb25zZS50b3RhbDsKICAgICAgICAgICAgdGhpcy5pdGVtcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgICAgICAgICAvLyDmuIXnqbpzZWxlY3Rpb25zLGdyaWRJdGVtc01vZGVsCiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdOwogICAgICAgICAgICB0aGlzLmdyaWRJdGVtc01vZGVsID0gW107CiAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoKT0+e3RoaXMuZ3JpZEl0ZW1zTW9kZWwucHVzaCh0aGlzLmdldEdyaWRSb3dNb2RlbCgpKX0pOwogICAgICAgICAgICB0aGlzLiRlbWl0KCdsb2FkJywgdGhpcy5pdGVtcyk7CiAgICAgICAgICAgIC8vIOiuvue9rum7mOiupOmAieS4rQogICAgICAgICAgICBsZXQgX3RoaXMgPSB0aGlzOwogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgIGlmKF90aGlzLmlzU2VsZWN0Rmlyc3REZWZhdWx0KXsKICAgICAgICAgICAgICAgICAgX3RoaXMucm93Q2xpY2soX3RoaXMuaXRlbXNbMF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoX3RoaXMuc2VsZWN0ZWREYXRhKXsKICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZzOiBhbnkgPSBfdGhpcy4kcmVmczsKICAgICAgICAgICAgICAgICAgICBpZiAocmVmcy5tdWx0aXBsZVRhYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnMubXVsdGlwbGVUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKF90aGlzLnNlbGVjdGVkRGF0YSkuZm9yRWFjaCgoc2VsZWN0aW9uOmFueSk9PnsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZEl0ZW0gPSBfdGhpcy5pdGVtcy5maW5kKChpdGVtOmFueSk9PnsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmlzKGl0ZW0uc3Jma2V5LCBzZWxlY3Rpb24uc3Jma2V5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRJdGVtKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb3dDbGljayhzZWxlY3RlZEl0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIDMwMCk7CiAgICAgICAgfSkuY2F0Y2goKHJlc3BvbnNlOiBhbnkpID0+IHsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5lcnJvck1lc3NhZ2UgfSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiDliKDpmaQKICAgICAqCiAgICAgKiBAcGFyYW0ge2FueVtdfSBkYXRhcwogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGFzeW5jIHJlbW92ZShkYXRhczogYW55W10pOiBQcm9taXNlPGFueT4gewogICAgICAgIGlmKCF0aGlzLnJlbW92ZUFjdGlvbil7CiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ1BJTVBFUlNPTkxaWUdITUNHcmlkVmlld+inhuWbvuihqOagvHJlbW92ZUFjdGlvbuWPguaVsOacqumFjee9ricgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgbGV0IF9kYXRhczphbnlbXSA9IFtdOwogICAgICAgIGRhdGFzLmZvckVhY2goKHJlY29yZDogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7CiAgICAgICAgICAgIGlmIChPYmplY3QuaXMocmVjb3JkLnNyZnVmLCIwIikpIHsKICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc29tZSgodmFsOiBhbnksIG51bTogbnVtYmVyKSA9PnsKICAgICAgICAgICAgICAgICAgICBpZihKU09OLnN0cmluZ2lmeSh2YWwpID09IEpTT04uc3RyaW5naWZ5KHJlY29yZCkpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShudW0sMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZEl0ZW1zTW9kZWwuc3BsaWNlKG51bSwxKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7IAogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgX2RhdGFzLnB1c2goZGF0YXNbaW5kZXhdKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGlmIChfZGF0YXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgbGV0IGRhdGFJbmZvID0gJyc7CiAgICAgICAgX2RhdGFzLmZvckVhY2goKHJlY29yZDogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7CiAgICAgICAgICAgIGxldCBzcmZtYWpvcnRleHQgPSByZWNvcmQucGltcGVyc29ubmFtZTsKICAgICAgICAgICAgaWYgKGluZGV4IDwgNSkgewogICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuaXMoZGF0YUluZm8sICcnKSkgewogICAgICAgICAgICAgICAgICAgIGRhdGFJbmZvICs9ICfjgIEnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGF0YUluZm8gKz0gc3JmbWFqb3J0ZXh0OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIGlmIChfZGF0YXMubGVuZ3RoIDwgNSkgewogICAgICAgICAgICBkYXRhSW5mbyA9IGRhdGFJbmZvICsgJyDlhbEnICsgX2RhdGFzLmxlbmd0aCArICfmnaHmlbDmja4nOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRhdGFJbmZvID0gZGF0YUluZm8gKyAnLi4uJyArICcg5YWxJyArIF9kYXRhcy5sZW5ndGggKyAn5p2h5pWw5o2uJzsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHJlbW92ZURhdGEgPSAoKSA9PiB7CiAgICAgICAgICAgIGxldCBrZXlzOiBhbnlbXSA9IFtdOwogICAgICAgICAgICBfZGF0YXMuZm9yRWFjaCgoZGF0YTogYW55KSA9PiB7CiAgICAgICAgICAgICAgICBrZXlzLnB1c2goZGF0YS5zcmZrZXkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgbGV0IF9yZW1vdmVBY3Rpb24gPSBrZXlzLmxlbmd0aCA+IDEgPyAncmVtb3ZlQmF0Y2gnIDogdGhpcy5yZW1vdmVBY3Rpb24gOwogICAgICAgICAgICBsZXQgX2tleXMgPSBrZXlzLmxlbmd0aCA+IDEgPyBrZXlzIDoga2V5c1swXSA7CiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQ6YW55ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKTsKICAgICAgICAgICAgY29uc3QgcG9zdDogUHJvbWlzZTxhbnk+ID0gdGhpcy5zZXJ2aWNlLmRlbGV0ZShfcmVtb3ZlQWN0aW9uLE9iamVjdC5hc3NpZ24oY29udGV4dCx7IHBpbXBlcnNvbjogX2tleXMgfSksT2JqZWN0LmFzc2lnbih7IHBpbXBlcnNvbjogX2tleXMgfSx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KSwgdGhpcy5zaG93QnVzeUluZGljYXRvcik7CiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4gewogICAgICAgICAgICAgICAgcG9zdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJycsIGRlc2M6ICfliKDpmaTmlbDmja7lpLHotKUsJyArIHJlc3BvbnNlLmluZm8gfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2Uuc3VjY2Vzcyh7IHRpdGxlOiAnJywgZGVzYzogJ+WIoOmZpOaIkOWKnyEnIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvL+WIoOmZpGl0ZW1z5Lit5bey5Yig6Zmk55qE6aG5CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5pdGVtcyk7CiAgICAgICAgICAgICAgICAgICAgX2RhdGFzLmZvckVhY2goKGRhdGE6IGFueSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnNvbWUoKGl0ZW06YW55LGluZGV4Om51bWJlcik9PnsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKE9iamVjdC5pcyhpdGVtLnNyZmtleSxkYXRhLnNyZmtleSkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4LDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZEl0ZW1zTW9kZWwuc3BsaWNlKGluZGV4LDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRvdGFscm93IC09IF9kYXRhcy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgncmVtb3ZlJywgbnVsbCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW107CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDQwMSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICfns7vnu5/lvILluLgnIH0pOwogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBkYXRhSW5mbyA9IGRhdGFJbmZvLnJlcGxhY2UoL1tudWxsXS9nLCAnJykucmVwbGFjZSgvW3VuZGVmaW5lZF0vZywgJycpOwogICAgICAgIHRoaXMuJE1vZGFsLmNvbmZpcm0oewogICAgICAgICAgICB0aXRsZTogJ+itpuWRiicsCiAgICAgICAgICAgIGNvbnRlbnQ6ICfnoa7orqTopoHliKDpmaQgJyArIGRhdGFJbmZvICsgJ++8jOWIoOmZpOaTjeS9nOWwhuS4jeWPr+aBouWkje+8nycsCiAgICAgICAgICAgIG9uT2s6ICgpID0+IHsKICAgICAgICAgICAgICAgIHJlbW92ZURhdGEoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25DYW5jZWw6ICgpID0+IHsgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiByZW1vdmVEYXRhOwogICAgfQoKCiAgICAvKioKICAgICAqIOaJuemHj+a3u+WKoAogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gW2FyZz17fV0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGFkZEJhdGNoKGFyZzogYW55ID0ge30pOiB2b2lkIHsKICAgICAgICBpZighdGhpcy5mZXRjaEFjdGlvbil7CiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ1BJTVBFUlNPTkxaWUdITUNHcmlkVmlld+inhuWbvuihqOagvGZldGNoQWN0aW9u5Y+C5pWw5pyq6YWN572uJyB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZighYXJnKXsKICAgICAgICAgICAgYXJnID0ge307CiAgICAgICAgfQogICAgICAgIGNvbnNvbGUuZXJyb3IoIuaJuemHj+a3u+WKoOacquWunueOsCIpOwogICAgfQoKICAgIC8qKgogICAgICog5pWw5o2u5a+85YWlCiAgICAgKgogICAgICogQHBhcmFtIHsqfSBkYXRhCiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgICBwdWJsaWMgaW1wb3J0RXhjZWwoZGF0YTphbnkgPXt9KTp2b2lkewogICAgICAgIC8v5a+85YWlZXhjZWwKICAgICAgICBjb25zdCBpbXBvcnREYXRhTW9kZWw6YW55ID17CiAgICAgICAgfQogICAgICAgIGlmKE9iamVjdC5rZXlzKGltcG9ydERhdGFNb2RlbCkubGVuZ3RoID09IDApewogICAgICAgICAgICB0aGlzLiROb3RpY2Uud2FybmluZyh7ICd0aXRsZSc6ICh0aGlzLiR0KCJhcHAudXRpbHZpZXcud2FybmluZyIpIGFzIHN0cmluZyksICdkZXNjJzogKHRoaXMuJHQoImFwcC51dGlsdmlldy5pbmZvIikgYXMgc3RyaW5nKSB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCB2aWV3OmFueSA9ewogICAgICAgICAgICB2aWV3bmFtZTogJ2FwcC1kYXRhLXVwbG9hZCcsCiAgICAgICAgICAgIHRpdGxlOiB0aGlzLiR0KCJhcHAudXRpbHZpZXcuaW1wb3J0dmlldyIpLAogICAgICAgICAgICB3aWR0aDogOTAwLAogICAgICAgICAgICBoZWlnaHQ6IDcwMAogICAgICAgIH0KICAgICAgICBsZXQgY29udGFpbmVyOiBTdWJqZWN0PGFueT4gPSB0aGlzLiRhcHBtb2RhbC5vcGVuTW9kYWwodmlldywgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSwgaW1wb3J0RGF0YU1vZGVsKTsKICAgICAgICBjb250YWluZXIuc3Vic2NyaWJlKChyZXN1bHQ6IGFueSkgPT4gewogICAgICAgICAgaWYoT2JqZWN0LmlzKHJlc3VsdC5yZXQsJ09LJykpewogICAgICAgICAgICB0aGlzLnJlZnJlc2gocmVzdWx0LmRhdGFzKTsKICAgICAgICAgIH0KICAgICAgfSk7CiAgICB9CgoKICAgIC8qKgogICAgICog5pWw5o2u5a+85Ye6CiAgICAgKgogICAgICogQHBhcmFtIHsqfSBkYXRhCiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBleHBvcnRFeGNlbChkYXRhOiBhbnkgPSB7fSk6IHZvaWQgewogICAgICAgIC8vIOWvvOWHukV4Y2VsCiAgICAgICAgY29uc3QgZG9FeHBvcnQgPSBhc3luYyAoX2RhdGE6YW55KSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHRIZWFkZXI6IEFycmF5PGFueT4gPSBbXTsKICAgICAgICAgICAgY29uc3QgZmlsdGVyVmFsOiBBcnJheTxhbnk+ID0gW107CiAgICAgICAgICAgIHRoaXMuYWxsQ29sdW1ucy5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHsKICAgICAgICAgICAgICBpdGVtLnNob3cgJiYgaXRlbS5sYWJlbCA/IHRIZWFkZXIucHVzaCh0aGlzLiR0KGl0ZW0ubGFuZ3RhZykpIDogIiI7CiAgICAgICAgICAgICAgaXRlbS5zaG93ICYmIGl0ZW0ubmFtZSA/IGZpbHRlclZhbC5wdXNoKGl0ZW0ubmFtZSkgOiAiIjsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmZvcm1hdEV4Y2VsRGF0YShmaWx0ZXJWYWwsIF9kYXRhKTsKICAgICAgICAgICAgdGhpcy4kZXhwb3J0LmV4cG9ydEV4Y2VsKCkudGhlbigoZXhjZWw6YW55KT0+ewogICAgICAgICAgICAgICAgZXhjZWwuZXhwb3J0X2pzb25fdG9fZXhjZWwoewogICAgICAgICAgICAgICAgICBoZWFkZXI6IHRIZWFkZXIsIC8v6KGo5aS0IOW/heWhqwogICAgICAgICAgICAgICAgICBkYXRhLCAvL+WFt+S9k+aVsOaNriDlv4XloasKICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6ICLkurrlkZjkv6Hmga/ooagiLCAvL+mdnuW/heWhqwogICAgICAgICAgICAgICAgICBhdXRvV2lkdGg6IHRydWUsIC8v6Z2e5b+F5aGrCiAgICAgICAgICAgICAgICAgIGJvb2tUeXBlOiAieGxzeCIgLy/pnZ7lv4XloasKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsgCiAgICAgICAgfTsKICAgICAgICBjb25zdCBwYWdlOiBhbnkgPSB7fTsKICAgICAgICAvLyDorr7nva5wYWdl77yMc2l6ZQogICAgICAgIGlmIChPYmplY3QuaXMoZGF0YS50eXBlLCAnbWF4Um93Q291bnQnKSkgewogICAgICAgICAgICBPYmplY3QuYXNzaWduKHBhZ2UsIHsgcGFnZTogMCwgc2l6ZTogZGF0YS5tYXhSb3dDb3VudCB9KTsKICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5pcyhkYXRhLnR5cGUsICdhY3RpdmF0ZWRQYWdlJykpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGRvRXhwb3J0KEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5pdGVtcykpKTsKICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgLy8g6K6+572u5o6S5bqPCiAgICAgICAgaWYgKCF0aGlzLmlzTm9Tb3J0ICYmICFPYmplY3QuaXModGhpcy5taW5vclNvcnREaXIsICcnKSAmJiAhT2JqZWN0LmlzKHRoaXMubWlub3JTb3J0UFNERUYsICcnKSkgewogICAgICAgICAgY29uc3Qgc29ydDogc3RyaW5nID0gdGhpcy5taW5vclNvcnRQU0RFRisiLCIrdGhpcy5taW5vclNvcnREaXI7CiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFnZSwgeyBzb3J0OiBzb3J0IH0pOwogICAgICAgIH0KICAgICAgICBjb25zdCBhcmc6IGFueSA9IHt9OwogICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCBwYWdlKTsKICAgICAgICAvLyDojrflj5ZxdWVyeSzmkJzntKLooajljZXvvIx2aWV3cGFyYW1z562J54i25pWw5o2uCiAgICAgICAgY29uc3QgcGFyZW50ZGF0YTogYW55ID0ge307CiAgICAgICAgdGhpcy4kZW1pdCgnYmVmb3JlbG9hZCcsIHBhcmVudGRhdGEpOwogICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLCBwYXJlbnRkYXRhKTsKICAgICAgICBjb25zdCBwb3N0OiBQcm9taXNlPGFueT4gPSB0aGlzLnNlcnZpY2Uuc2VhcmNoKHRoaXMuZmV0Y2hBY3Rpb24sSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSwgYXJnLCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsKICAgICAgICBwb3N0LnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHsKICAgICAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICcnLCBkZXNjOiAn5pWw5o2u5a+85Ye65aSx6LSlLCcgKyByZXNwb25zZS5pbmZvIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBkb0V4cG9ydChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDQwMSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAnJywgZGVzYzogJ+aVsOaNruWvvOWHuuWksei0pScgfSk7CiAgICAgICAgfSk7CiAgICB9CgoKICAgIC8qKgogICAgICog5a+85Ye65pWw5o2u5qC85byP5YyWCiAgICAgKiAKICAgICAqIEBwYXJhbSB7Kn0gZmlsdGVyVmFsCiAgICAgKiBAcGFyYW0geyp9IGpzb25EYXRhCiAgICAgKiBAcmV0dXJucyB7W119CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBhc3luYyBmb3JtYXRFeGNlbERhdGEoZmlsdGVyVmFsOmFueSwganNvbkRhdGE6YW55KSB7CiAgICAgICAgbGV0IGNvZGVsaXN0Q29sdW1uczpBcnJheTxhbnk+ID0gWwogICAgICAgICAgewogICAgICAgICAgICBuYW1lOiAncmFuaycsCiAgICAgICAgICAgIHNyZmtleTogJ0VockNvZGVMaXN0MDAyNScsCiAgICAgICAgICAgIGNvZGVsaXN0VHlwZSA6ICdEWU5BTUlDJywKICAgICAgICAgICAgdGV4dFNlcGFyYXRvcjogJ+OAgScsCiAgICAgICAgICAgIHJlbmRlck1vZGU6ICdzdHJpbmcnLAogICAgICAgICAgICB2YWx1ZVNlcGFyYXRvcjogIjsiLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogJ3hiJywKICAgICAgICAgICAgc3Jma2V5OiAnRWhyQ29kZUxpc3QwMDcyJywKICAgICAgICAgICAgY29kZWxpc3RUeXBlIDogJ0RZTkFNSUMnLAogICAgICAgICAgICByZW5kZXJNb2RlOiAnb3RoZXInLAogICAgICAgICAgICB0ZXh0U2VwYXJhdG9yOiAn44CBJywKICAgICAgICAgICAgdmFsdWVTZXBhcmF0b3I6ICcsJywKICAgICAgICAgIH0sCiAgICAgICAgXTsKICAgICAgICBsZXQgX3RoaXMgPSB0aGlzOwogICAgICAgIGZvciAoY29uc3QgY29kZWxpc3Qgb2YgY29kZWxpc3RDb2x1bW5zKSB7CiAgICAgICAgICAvLyDliqjmgIHku6PnoIHooajlpITnkIYKICAgICAgICAgIGlmIChPYmplY3QuaXMoY29kZWxpc3QuY29kZWxpc3RUeXBlLCAiRFlOQU1JQyIpKSB7CiAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gYXdhaXQgX3RoaXMuY29kZUxpc3RTZXJ2aWNlLmdldEl0ZW1zKGNvZGVsaXN0LnNyZmtleSk7CiAgICAgICAgICAgICAganNvbkRhdGEuZm9yRWFjaCgocm93OmFueSk9PnsKICAgICAgICAgICAgICAgICAgcm93W2NvZGVsaXN0Lm5hbWVdID0gX3RoaXMuZ2V0Q29kZWxpc3RWYWx1ZShpdGVtcywgcm93W2NvZGVsaXN0Lm5hbWVdLCBjb2RlbGlzdCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAvLyDpnZnmgIHlpITnkIYKICAgICAgICAgIH0gZWxzZSBpZihPYmplY3QuaXMoY29kZWxpc3QuY29kZWxpc3RUeXBlLCAiU1RBVElDIikpewogICAgICAgICAgICAgIGxldCBpdGVtcyA9IGF3YWl0IF90aGlzLiRzdG9yZS5nZXR0ZXJzLmdldENvZGVMaXN0SXRlbXMoY29kZWxpc3Quc3Jma2V5KTsKICAgICAgICAgICAgICBqc29uRGF0YS5mb3JFYWNoKChyb3c6YW55KT0+ewogICAgICAgICAgICAgICAgICByb3dbY29kZWxpc3QubmFtZV0gPSBfdGhpcy5nZXRDb2RlbGlzdFZhbHVlKGl0ZW1zLCByb3dbY29kZWxpc3QubmFtZV0sIGNvZGVsaXN0KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGpzb25EYXRhLm1hcCgodjphbnkpID0+IGZpbHRlclZhbC5tYXAoKGo6YW55KSA9PiB2W2pdKSkKICAgIH0gICAKCgogICAgLyoqCiAgICAgKiDop6PmnpDku6PnoIHooajlkox2bGF1Ze+8jOiuvue9rml0ZW1zCiAgICAgKgogICAgICogQHB1YmxpYwogICAgICogQHBhcmFtIHthbnlbXX0gaXRlbXMg5Luj56CB6KGo5pWw5o2uCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlCiAgICAgKiBAcmV0dXJucyB7Kn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGdldENvZGVsaXN0VmFsdWUoaXRlbXM6IGFueVtdLCB2YWx1ZTogYW55LCBjb2RlbGlzdDogYW55LCl7CiAgICAgICAgaWYoIXZhbHVlKXsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHQoJ2NvZGVsaXN0LicrY29kZWxpc3Quc3Jma2V5KycuZW1wdHknKTsKICAgICAgICB9CiAgICAgICAgaWYgKGl0ZW1zKSB7CiAgICAgICAgICAgIGxldCByZXN1bHQ6YW55ID0gW107CiAgICAgICAgICAgIGlmKE9iamVjdC5pcyhjb2RlbGlzdC5yZW5kZXJNb2RlLCJudW1iZXIiKSl7CiAgICAgICAgICAgICAgICBpdGVtcy5tYXAoKF9pdGVtOiBhbnksIGluZGV4OiBudW1iZXIpPT57CiAgICAgICAgICAgICAgICAgICAgY29uc3QgblZhbHVlID0gcGFyc2VJbnQoKHZhbHVlIGFzIGFueSksIDEwKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RldmFsdWUgPSBfaXRlbS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICBpZigocGFyc2VJbnQoY29kZXZhbHVlLCAxMCkgJiBuVmFsdWUpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKF9pdGVtKTsKICAgICAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZihPYmplY3QuaXMoY29kZWxpc3QucmVuZGVyTW9kZSwic3RyaW5nIikpewogICAgICAgICAgICAgICAgY29uc3QgYXJyYXlWYWx1ZTogQXJyYXk8YW55PiA9ICh2YWx1ZSBhcyBhbnkpLnNwbGl0KGNvZGVsaXN0LnZhbHVlU2VwYXJhdG9yKTsKICAgICAgICAgICAgICAgIGFycmF5VmFsdWUubWFwKCh2YWx1ZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goW10pOwogICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZXM6IGFueVtdID0gT2JqZWN0LmlzKHRoaXMuJHV0aWwudHlwZU9mKHZhbHVlKSwgJ251bWJlcicpID8gW3ZhbHVlXSA6IFsuLi4odmFsdWUgYXMgYW55KS5zcGxpdChjb2RlbGlzdC52YWx1ZVNlcGFyYXRvcildOwogICAgICAgICAgICAgICAgICAgIHZhbHVlcy5tYXAoKHZhbDphbnkgLG51bTogbnVtYmVyKT0+ewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5nZXRJdGVtKGl0ZW1zLCB2YWwsIGNvZGVsaXN0KTsgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0pewogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0ucHVzaChpdGVtKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSAKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbGV0IHZhbHVlczogYW55W10gPSBPYmplY3QuaXModGhpcy4kdXRpbC50eXBlT2YodmFsdWUpLCAnbnVtYmVyJykgPyBbdmFsdWVdIDogWy4uLih2YWx1ZSBhcyBhbnkpLnNwbGl0KGNvZGVsaXN0LnZhbHVlU2VwYXJhdG9yKV07CiAgICAgICAgICAgICAgICB2YWx1ZXMubWFwKCh2YWx1ZTphbnkgLGluZGV4OiBudW1iZXIpPT57CiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbShpdGVtcywgdmFsdWUsIGNvZGVsaXN0KTsgCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTsKICAgICAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8g6K6+572uaXRlbXMKICAgICAgICAgICAgaWYocmVzdWx0Lmxlbmd0aCAhPSAwKXsKICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oY29kZWxpc3QudmFsdWVTZXBhcmF0b3IpOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiDojrflj5bku6PnoIHpobkKICAgICAqCiAgICAgKiBAcHVibGljCiAgICAgKiBAcGFyYW0ge2FueVtdfSBpdGVtcwogICAgICogQHBhcmFtIHsqfSB2YWx1ZQogICAgICogQHJldHVybnMgeyp9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBnZXRJdGVtKGl0ZW1zOiBhbnlbXSwgdmFsdWU6IGFueSwgY29kZWxpc3Q6IGFueSk6IGFueSB7CiAgICAgICAgY29uc3QgYXJyOiBBcnJheTxhbnk+ID0gaXRlbXMuZmlsdGVyKGl0ZW0gPT4ge3JldHVybiBpdGVtLnZhbHVlID09IHZhbHVlfSk7CiAgICAgICAgaWYgKGFyci5sZW5ndGggIT09IDEpIHsKICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICB9CiAgICAgICAgaWYoT2JqZWN0LmlzKGNvZGVsaXN0LmNvZGVsaXN0VHlwZSwnU1RBVElDJykpewogICAgICAgICAgICByZXR1cm4gdGhpcy4kdCgnY29kZWxpc3QuJytjb2RlbGlzdC5zcmZrZXkrJy4nK2FyclswXS52YWx1ZSk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHJldHVybiBhcnJbMF0udGV4dDsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiDnlJ/lkb3lkajmnJ8KICAgICAqCiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBjcmVhdGVkKCk6IHZvaWQgewogICAgICAgIHRoaXMuYWZ0ZXJDcmVhdGVkKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiDmiafooYxjcmVhdGVk5ZCO55qE6YC76L6RCiAgICAgKgogICAgICogIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLyAgICAKICAgIHB1YmxpYyBhZnRlckNyZWF0ZWQoKXsKICAgICAgICB0aGlzLnNldENvbFN0YXRlKCk7CiAgICAgICAgaWYgKHRoaXMudmlld1N0YXRlKSB7CiAgICAgICAgICAgIHRoaXMudmlld1N0YXRlRXZlbnQgPSB0aGlzLnZpZXdTdGF0ZS5zdWJzY3JpYmUoKHsgdGFnLCBhY3Rpb24sIGRhdGEgfSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuaXModGFnLCB0aGlzLm5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnbG9hZCcsIGFjdGlvbikpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWQoZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdyZW1vdmUnLCBhY3Rpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzKCdzYXZlJywgYWN0aW9uKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZShkYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogdnVlIOeUn+WRveWRqOacnwogICAgICoKICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGRlc3Ryb3llZCgpIHsKICAgICAgICB0aGlzLmFmdGVyRGVzdHJveSgpOwogICAgfQoKICAgIC8qKgogICAgICog5omn6KGMZGVzdHJveWVk5ZCO55qE6YC76L6RCiAgICAgKgogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgYWZ0ZXJEZXN0cm95KCkgewogICAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZUV2ZW50KSB7CiAgICAgICAgICAgIHRoaXMudmlld1N0YXRlRXZlbnQudW5zdWJzY3JpYmUoKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiDojrflj5bpgInkuK3ooYzog6HmlbDmja4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7YW55W119CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBnZXRTZWxlY3Rpb24oKTogYW55W10gewogICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbnM7CiAgICB9CgogICAgLyoqCiAgICAgKiDooYzlj4zlh7vkuovku7YKICAgICAqCiAgICAgKiBAcGFyYW0geyp9ICRldmVudAogICAgICogQHJldHVybnMge3ZvaWR9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyByb3dEQkxDbGljaygkZXZlbnQ6IGFueSk6IHZvaWQgewogICAgICAgIGlmICghJGV2ZW50IHx8IHRoaXMuYWN0dWFsSXNPcGVuRWRpdCB8fCBPYmplY3QuaXModGhpcy5ncmlkUm93QWN0aXZlTW9kZSwwKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdOwogICAgICAgIHRoaXMuc2VsZWN0aW9ucy5wdXNoKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoJGV2ZW50KSkpOwoKICAgICAgICBjb25zdCByZWZzOiBhbnkgPSB0aGlzLiRyZWZzOwogICAgICAgIGlmIChyZWZzLm11bHRpcGxlVGFibGUpIHsKICAgICAgICAgICAgcmVmcy5tdWx0aXBsZVRhYmxlLmNsZWFyU2VsZWN0aW9uKCk7CiAgICAgICAgICAgIHJlZnMubXVsdGlwbGVUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24oJGV2ZW50KTsKICAgICAgICB9CgogICAgICAgIHRoaXMuJGVtaXQoJ3Jvd2RibGNsaWNrJywgdGhpcy5zZWxlY3Rpb25zKTsKICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3Rpb25jaGFuZ2UnLCB0aGlzLnNlbGVjdGlvbnMpOwogICAgfQoKICAgIC8qKgogICAgICog5aSN6YCJ5qGG5pWw5o2u6YCJ5LitCiAgICAgKgogICAgICogQHBhcmFtIHsqfSAkZXZlbnQKICAgICAqIEByZXR1cm5zIHt2b2lkfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgc2VsZWN0KCRldmVudDogYW55KTogdm9pZCB7CiAgICAgICAgaWYgKCEkZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBbXTsKICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBbLi4uSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSgkZXZlbnQpKV07CiAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0aW9uY2hhbmdlJywgdGhpcy5zZWxlY3Rpb25zKTsKICAgIH0KCiAgICAvKioKICAgICAqIOWkjemAieahhuaVsOaNruWFqOmDqOmAieS4rQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBzZWxlY3RBbGwoJGV2ZW50OiBhbnkpOiB2b2lkIHsKICAgICAgICBpZiAoISRldmVudCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdOwogICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFsuLi5KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KCRldmVudCkpXTsKICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3Rpb25jaGFuZ2UnLCB0aGlzLnNlbGVjdGlvbnMpOwogICAgfQoKICAgIAogICAgLyoqCiAgICAgKiDooYzljZXlh7vpgInkuK0KICAgICAqCiAgICAgKiBAcGFyYW0geyp9ICRldmVudAogICAgICogQHJldHVybnMge3ZvaWR9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyByb3dDbGljaygkZXZlbnQ6IGFueSwgaWZBbHdheXM6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQgewogICAgICAgIGlmICghaWZBbHdheXMgJiYgKCEkZXZlbnQgfHwgdGhpcy5hY3R1YWxJc09wZW5FZGl0KSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmKHRoaXMuc3RvcFJvd0NsaWNrKSB7CiAgICAgICAgICAgIHRoaXMuc3RvcFJvd0NsaWNrID0gZmFsc2U7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYodGhpcy5pc1NpbmdsZVNlbGVjdCl7CiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdOwogICAgICAgIH0KICAgICAgICAvLyDlt7LpgInkuK3liJnliKDpmaTvvIzmsqHpgInkuK3liJnmt7vliqAKICAgICAgICBsZXQgc2VsZWN0SW5kZXggPSB0aGlzLnNlbGVjdGlvbnMuZmluZEluZGV4KChpdGVtOmFueSk9PnsKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5pcyhpdGVtLnBpbXBlcnNvbiwkZXZlbnQucGltcGVyc29uKTsKICAgICAgICB9KTsKICAgICAgICBpZiAoT2JqZWN0LmlzKHNlbGVjdEluZGV4LC0xKSl7CiAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMucHVzaChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KCRldmVudCkpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5zZWxlY3Rpb25zLnNwbGljZShzZWxlY3RJbmRleCwxKTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHJlZnM6IGFueSA9IHRoaXMuJHJlZnM7CiAgICAgICAgaWYgKHJlZnMubXVsdGlwbGVUYWJsZSkgewogICAgICAgICAgICBpZih0aGlzLmlzU2luZ2xlU2VsZWN0KXsKICAgICAgICAgICAgICAgIHJlZnMubXVsdGlwbGVUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICAgICAgICAgICAgcmVmcy5tdWx0aXBsZVRhYmxlLnNldEN1cnJlbnRSb3coJGV2ZW50KTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICByZWZzLm11bHRpcGxlVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKCRldmVudCk7IAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3Rpb25jaGFuZ2UnLCB0aGlzLnNlbGVjdGlvbnMpOwogICAgfQoKCiAgICAvKioKICAgICAqIOmhtemdouWPmOWMlgogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gJGV2ZW50CiAgICAgKiBAcmV0dXJucyB7dm9pZH0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIHBhZ2VPbkNoYW5nZSgkZXZlbnQ6IGFueSk6IHZvaWQgewogICAgICAgIGlmICghJGV2ZW50KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKCRldmVudCA9PT0gdGhpcy5jdXJQYWdlKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5jdXJQYWdlID0gJGV2ZW50OwogICAgICAgIHRoaXMubG9hZCh7fSk7CiAgICB9CgogICAgLyoqCiAgICAgKiDliIbpobXmnaHmlbDlj5jljJYKICAgICAqCiAgICAgKiBAcGFyYW0geyp9ICRldmVudAogICAgICogQHJldHVybnMge3ZvaWR9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBvblBhZ2VTaXplQ2hhbmdlKCRldmVudDogYW55KTogdm9pZCB7CiAgICAgICAgaWYgKCEkZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoJGV2ZW50ID09PSB0aGlzLmxpbWl0KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5saW1pdCA9ICRldmVudDsKICAgICAgICBpZiAodGhpcy5jdXJQYWdlID09PSAxKSB7CiAgICAgICAgICAgIHRoaXMubG9hZCh7fSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICog5YiG6aG15Yi35pawCiAgICAgKgogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgcGFnZVJlZnJlc2goKTogdm9pZCB7CiAgICAgICAgdGhpcy5sb2FkKHt9KTsKICAgIH0KCiAgICAvKioKICAgICAqIOaOkuW6j+WPmOWMlgogICAgICoKICAgICAqIEBwYXJhbSB7eyBjb2x1bW46IGFueSwgcHJvcDogYW55LCBvcmRlcjogYW55IH19IHsgY29sdW1uLCBwcm9wLCBvcmRlciB9CiAgICAgKiBAbWVtYmVyb2YgVFhMWFlHXzJCYXNlCiAgICAgKi8KICAgIHB1YmxpYyBvblNvcnRDaGFuZ2UoeyBjb2x1bW4sIHByb3AsIG9yZGVyIH06IHsgY29sdW1uOiBhbnksIHByb3A6IGFueSwgb3JkZXI6IGFueSB9KTogdm9pZCB7CiAgICAgICAgY29uc3QgZGlyID0gT2JqZWN0LmlzKG9yZGVyLCAnYXNjZW5kaW5nJykgPyAnYXNjJyA6IE9iamVjdC5pcyhvcmRlciwgJ2Rlc2NlbmRpbmcnKSA/ICdkZXNjJyA6ICcnOwogICAgICAgIGlmIChPYmplY3QuaXMoZGlyLCB0aGlzLm1pbm9yU29ydERpcikgJiYgT2JqZWN0LmlzKHRoaXMubWlub3JTb3J0UFNERUYsIHByb3ApKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5taW5vclNvcnREaXIgPSBkaXI7CiAgICAgICAgdGhpcy5taW5vclNvcnRQU0RFRiA9IHByb3AgPyBwcm9wIDogJyc7CiAgICAgICAgdGhpcy5sb2FkKHt9KTsKICAgIH0KCiAgICAvKioKICAgICAqIOihqOagvOihjOmAieS4reagt+W8jwogICAgICoKICAgICAqIEBwYXJhbSB7eyByb3c6IGFueSwgcm93SW5kZXg6IGFueSB9fSB7IHJvdywgcm93SW5kZXggfQogICAgICogQHJldHVybnMge3N0cmluZ30KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIG9uUm93Q2xhc3NOYW1lKHsgcm93LCByb3dJbmRleCB9OiB7IHJvdzogYW55LCByb3dJbmRleDogYW55IH0pOiBzdHJpbmcgewogICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zZWxlY3Rpb25zLmZpbmRJbmRleCgoc2VsZWN0OiBhbnkpID0+IE9iamVjdC5pcyhzZWxlY3Quc3Jma2V5LCByb3cuc3Jma2V5KSk7CiAgICAgICAgcmV0dXJuIGluZGV4ICE9PSAtMSA/ICdncmlkLXJvdy1zZWxlY3QnIDogJyc7CiAgICB9CgoKCiAgICAvKioKICAgICAqIOeVjOmdouihjOS4ugogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gcm93CiAgICAgKiBAcGFyYW0geyp9IHRhZwogICAgICogQHBhcmFtIHsqfSAkZXZlbnQKICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwoJcHVibGljIHVpQWN0aW9uKHJvdzogYW55LCB0YWc6IGFueSwgJGV2ZW50OiBhbnkpIHsKICAgICAgICAvLyB0aGlzLnJvd0NsaWNrKHJvdywgdHJ1ZSk7CiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgfQoKICAgIC8qKgogICAgICog6K6+572u5YiX54q25oCBCiAgICAgKgogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgc2V0Q29sU3RhdGUoKSB7CgkJY29uc3QgX2RhdGE6IGFueSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwaW1wZXJzb25fdHhseHlnXzJfZ3JpZCcpOwoJCWlmIChfZGF0YSkgewoJCQlsZXQgY29sdW1ucyA9IEpTT04ucGFyc2UoX2RhdGEpOwoJCQljb2x1bW5zLmZvckVhY2goKGNvbDogYW55KSA9PiB7CgkJCQlsZXQgY29sdW1uID0gdGhpcy5hbGxDb2x1bW5zLmZpbmQoKGl0ZW0pID0+IE9iamVjdC5pcyhjb2wubmFtZSwgaXRlbS5uYW1lKSk7CgkJCQlpZiAoY29sdW1uKSB7CgkJCQkJT2JqZWN0LmFzc2lnbihjb2x1bW4sIGNvbCk7CgkJCQl9CgkJCX0pOwoJCX0KICAgIH0KCiAgICAvKioKICAgICAqIOWIl+WPmOWMlgogICAgICoKICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIG9uQ29sQ2hhbmdlKCkgewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwaW1wZXJzb25fdHhseHlnXzJfZ3JpZCcsIEpTT04uc3RyaW5naWZ5KHRoaXMuYWxsQ29sdW1ucykpOwogICAgfQoKICAgIC8qKgogICAgICog6I635Y+W5YiX54q25oCBCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUKICAgICAqIEByZXR1cm5zIHtib29sZWFufQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgZ2V0Q29sdW1uU3RhdGUobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7CiAgICAgICAgbGV0IGNvbHVtbiA9IHRoaXMuYWxsQ29sdW1ucy5maW5kKChjb2w6IGFueSkgPT4KICAgICAgICAgICAgT2JqZWN0LmlzKG5hbWUsIGNvbC5uYW1lKQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIGNvbHVtbi5zaG93ID8gdHJ1ZSA6IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICog6KGo5qC85YiX5piv5ZCm6Ieq6YCC5bqU5biD5bGACiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgZ2V0IGFkYXB0aXZlU3RhdGUoKTogYm9vbGVhbiB7CiAgICAgICAgcmV0dXJuICF0aGlzLmFsbENvbHVtbnMuZmluZCgoY29sdW1uOiBhbnkpID0+IGNvbHVtbi5zaG93ICYmIE9iamVjdC5pcyhjb2x1bW4udXRpbCwgJ1NUQVInKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiDkv53lrZgKICAgICAqCiAgICAgKiBAcGFyYW0geyp9ICRldmVudAogICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGFzeW5jIHNhdmUoYXJnczogYW55W10sIHBhcmFtcz86IGFueSwgJGV2ZW50PzogYW55LCB4RGF0YT86IGFueSl7CiAgICAgICAgbGV0IF90aGlzID0gdGhpczsKICAgICAgICBpZighYXdhaXQgdGhpcy52YWxpZGF0ZUFsbCgpKXsKICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn5YC86KeE5YiZ5qCh6aqM5byC5bi4JyB9KTsKICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIH0KICAgICAgICBsZXQgc3VjY2Vzc0l0ZW1zOmFueSA9IFtdOwogICAgICAgIGxldCBlcnJvckl0ZW1zOmFueSA9IFtdOwogICAgICAgIGxldCBlcnJvck1lc3NhZ2U6YW55ID0gW107CiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIF90aGlzLml0ZW1zKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBpZihPYmplY3QuaXMoaXRlbS5yb3dEYXRhU3RhdGUsICdjcmVhdGUnKSl7CiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuY3JlYXRlQWN0aW9uKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAnUElNUEVSU09OTFpZR0hNQ0dyaWRWaWV36KeG5Zu+6KGo5qC8Y3JlYXRlQWN0aW9u5Y+C5pWw5pyq6YWN572uJyB9KTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXRlbSx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsKICAgICAgICAgICAgICAgICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuc2VydmljZS5hZGQodGhpcy5jcmVhdGVBY3Rpb24sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksaXRlbSwgdGhpcy5zaG93QnVzeUluZGljYXRvcik7CiAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzSXRlbXMucHVzaChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfWVsc2UgaWYoT2JqZWN0LmlzKGl0ZW0ucm93RGF0YVN0YXRlLCAndXBkYXRlJykpewogICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLnVwZGF0ZUFjdGlvbil7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ1BJTVBFUlNPTkxaWUdITUNHcmlkVmlld+inhuWbvuihqOagvHVwZGF0ZUFjdGlvbuWPguaVsOacqumFjee9ricgfSk7CiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXRlbSx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5waW1wZXJzb24pewogICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbnRleHQse3BpbXBlcnNvbjppdGVtLnBpbXBlcnNvbn0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuc2VydmljZS5hZGQodGhpcy51cGRhdGVBY3Rpb24sSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKSxpdGVtLCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0l0ZW1zLnB1c2goSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGVycm9ySXRlbXMucHVzaChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGl0ZW0pKSk7CiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UucHVzaChlcnJvcik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy4kZW1pdCgnc2F2ZScsIHN1Y2Nlc3NJdGVtcyk7CiAgICAgICAgdGhpcy5yZWZyZXNoKFtdKTsKICAgICAgICBpZihlcnJvckl0ZW1zLmxlbmd0aCA9PT0gMCl7CiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5zdWNjZXNzKHsgdGl0bGU6ICcnLCBkZXNjOiAn5L+d5a2Y5oiQ5YqfIScgfSk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICBlcnJvckl0ZW1zLmZvckVhY2goKGl0ZW06YW55LGluZGV4Om51bWJlcik9PnsKICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfkv53lrZjlpLHotKUnLCBkZXNjOiBpdGVtLm1ham9yZW50aXR5bmFtZSsn5L+d5a2Y5aSx6LSl77yBJyB9KTsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2VbaW5kZXhdKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3VjY2Vzc0l0ZW1zOwogICAgfQoKICAgIC8qKgogICAgICog5paw5bu66KGMCiAgICAgKgogICAgICogQHBhcmFtIHsqfSAkZXZlbnQKICAgICAqIEByZXR1cm5zIHt2b2lkfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgbmV3Um93KGFyZ3M6IGFueVtdLCBwYXJhbXM/OiBhbnksICRldmVudD86IGFueSwgeERhdGE/OiBhbnkpOiB2b2lkIHsKICAgICAgICBpZighdGhpcy5sb2FkZHJhZnRBY3Rpb24pewogICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6ICdQSU1QRVJTT05MWllHSE1DR3JpZFZpZXfop4blm77ooajmoLxsb2FkZHJhZnRBY3Rpb27lj4LmlbDmnKrphY3nva4nIH0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGxldCBfdGhpcyA9IHRoaXM7CiAgICAgICAgT2JqZWN0LmFzc2lnbihhcmdzWzBdLHt2aWV3cGFyYW1zOnRoaXMudmlld3BhcmFtc30pOwogICAgICAgIGxldCBwb3N0OiBQcm9taXNlPGFueT4gPSB0aGlzLnNlcnZpY2UubG9hZERyYWZ0KHRoaXMubG9hZGRyYWZ0QWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLCBhcmdzWzBdLCB0aGlzLnNob3dCdXN5SW5kaWNhdG9yKTsKICAgICAgICBwb3N0LnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHsKICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvck1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogJ+mUmeivrycsIGRlc2M6IHJlc3BvbnNlLmVycm9yTWVzc2FnZSB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgdGhpcy5jcmVhdGVEZWZhdWx0KGRhdGEpOwogICAgICAgICAgICBkYXRhLnJvd0RhdGFTdGF0ZSA9ICJjcmVhdGUiOwogICAgICAgICAgICBfdGhpcy5pdGVtcy5wdXNoKGRhdGEpOwogICAgICAgICAgICBfdGhpcy5ncmlkSXRlbXNNb2RlbC5wdXNoKF90aGlzLmdldEdyaWRSb3dNb2RlbCgpKTsKICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gewogICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5zdGF0dXMgfHwgIXJlc3BvbnNlLmRhdGEpIHsKICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ezu+e7n+W8guW4uCcgfSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIOihqOagvOe8lui+kemhueWAvOWPmOabtAogICAgICogIAogICAgICogQHBhcmFtIHJvdyDooYzmlbDmja4KICAgICAqIEBwYXJhbSB7eyBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkgfX0gJGV2ZW50CiAgICAgKiBAcmV0dXJucyB7dm9pZH0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIG9uR3JpZEl0ZW1WYWx1ZUNoYW5nZShyb3c6IGFueSwkZXZlbnQ6IHsgbmFtZTogc3RyaW5nLCB2YWx1ZTogYW55IH0scm93SW5kZXg6IG51bWJlcik6IHZvaWQgewogICAgICAgIGlmICghJGV2ZW50KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKCEkZXZlbnQubmFtZSB8fCBPYmplY3QuaXMoJGV2ZW50Lm5hbWUsICcnKSB8fCAhcm93Lmhhc093blByb3BlcnR5KCRldmVudC5uYW1lKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHJvd1skZXZlbnQubmFtZV0gPSAkZXZlbnQudmFsdWU7CiAgICAgICAgdGhpcy5ncmlkRWRpdEl0ZW1DaGFuZ2Uocm93LCAkZXZlbnQubmFtZSwgJGV2ZW50LnZhbHVlLCByb3dJbmRleCk7CiAgICB9CgogICAgLyoqCiAgICAgKiDooajmoLznvJbovpHpobnlgLzlj5jljJYKICAgICAqCiAgICAgKiBAcHVibGljCiAgICAgKiBAcGFyYW0gcm93IOihjOaVsOaNrgogICAgICogQHBhcmFtIHByb3BlcnR5IOWIl+e8lui+kemhueWQjQogICAgICogQHBhcmFtIHJvdyDliJfnvJbovpHpobnlgLwKICAgICAqIEByZXR1cm5zIHt2b2lkfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgZ3JpZEVkaXRJdGVtQ2hhbmdlKHJvdzogYW55LCBwcm9wZXJ0eTogc3RyaW5nLCB2YWx1ZTogYW55LCByb3dJbmRleDogbnVtYmVyKXsKICAgICAgICByb3cucm93RGF0YVN0YXRlID0gcm93LnJvd0RhdGFTdGF0ZSA/IHJvdy5yb3dEYXRhU3RhdGUgOiAidXBkYXRlIiA7CiAgICAgICAgdGhpcy52YWxpZGF0ZShwcm9wZXJ0eSxyb3cscm93SW5kZXgpOwogICAgfQoKICAgIC8qKgogICAgICog6KGo5qC857yW6L6R6aG55pu05pawCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUg55WM6Z2i6KGM5Li65ZCN56ewCiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPXt9XSDor7fmsYLmlbDmja4KICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHVwZGF0ZURldGFpbHMg5pu05paw6aG5CiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG93bG9hZGluZ10g5piv5ZCm5pi+56S65Yqg6L2954q25oCBCiAgICAgKiBAcmV0dXJucyB7dm9pZH0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIHVwZGF0ZUdyaWRFZGl0SXRlbShtb2RlOiBzdHJpbmcsIGRhdGE6IGFueSA9IHt9LCB1cGRhdGVEZXRhaWxzOiBzdHJpbmdbXSwgc2hvd2xvYWRpbmc/OiBib29sZWFuKTogdm9pZCB7CiAgICAgICAgaWYgKCFtb2RlIHx8IChtb2RlICYmIE9iamVjdC5pcyhtb2RlLCAnJykpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXJnOiBhbnkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKTsKICAgICAgICBPYmplY3QuYXNzaWduKGFyZyx7dmlld3BhcmFtczp0aGlzLnZpZXdwYXJhbXN9KTsKICAgICAgICBjb25zdCBwb3N0OiBQcm9taXNlPGFueT4gPSB0aGlzLnNlcnZpY2UuZnJvbnRMb2dpYyhtb2RlLEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb250ZXh0KSksYXJnLCBzaG93bG9hZGluZyk7CiAgICAgICAgcG9zdC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7CiAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogJ+ihqOWNlemhueabtOaWsOWksei0pScgfSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgX2RhdGE6IGFueSA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICAgIGlmKCFfZGF0YSl7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdXBkYXRlRGV0YWlscy5mb3JFYWNoKChuYW1lOiBzdHJpbmcpID0+IHsKICAgICAgICAgICAgICAgIGlmICghX2RhdGEuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkYXRhW25hbWVdID0gX2RhdGFbbmFtZV07CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKChyZXNwb25zZTogYW55KSA9PiB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDQwMSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnN0YXR1cyB8fCAhcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiAn57O757uf5byC5bi4JyB9KTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICog6I635Y+W5a+55bqU6KGMY2xhc3MKICAgICAqCiAgICAgKiBAcGFyYW0geyp9ICRhcmdzIHJvdyDooYzmlbDmja7vvIxyb3dJbmRleCDooYzntKLlvJUKICAgICAqIEByZXR1cm5zIHt2b2lkfQogICAgICogQG1lbWJlcm9mIFRYTFhZR18yQmFzZQogICAgICovCiAgICBwdWJsaWMgZ2V0Um93Q2xhc3NOYW1lKGFyZ3M6e3JvdzogYW55LHJvd0luZGV4OiBudW1iZXJ9KXsKICAgICAgICBsZXQgaXNTZWxlY3RlZCA9IHRoaXMuc2VsZWN0aW9ucy5zb21lKChpdGVtOmFueSk9PnsKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5pcyhpdGVtLnBpbXBlcnNvbixhcmdzLnJvdy5waW1wZXJzb24pOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBpc1NlbGVjdGVkID8gImdyaWQtc2VsZWN0ZWQtcm93IiA6ICIiOwogICAgfQoKICAgIC8qKgogICAgICog6I635Y+W5a+55bqU5YiXY2xhc3MKICAgICAqCiAgICAgKiBAcGFyYW0geyp9ICRhcmdzIHJvdyDooYzmlbDmja7vvIxjb2x1bW4g5YiX5pWw5o2u77yMcm93SW5kZXgg6KGM57Si5byV77yM5YiX57Si5byVCiAgICAgKiBAcmV0dXJucyB7dm9pZH0KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGdldENlbGxDbGFzc05hbWUoYXJnczp7cm93OiBhbnksIGNvbHVtbjogYW55LCByb3dJbmRleDogbnVtYmVyLCBjb2x1bW5JbmRleDpudW1iZXJ9KXsKICAgICAgICBsZXQgaGFzUm93RWRpdDphbnkgPSB7CiAgICAgICAgICAneWdiaCc6ZmFsc2UsCiAgICAgICAgICAncGltcGVyc29ubmFtZSc6ZmFsc2UsCiAgICAgICAgICAnenpkenMnOmZhbHNlLAogICAgICAgICAgJ29ybW9yZ3NlY3Rvcm5hbWUnOmZhbHNlLAogICAgICAgICAgJ3JhbmsnOmZhbHNlLAogICAgICAgICAgJ2x4ZGgnOmZhbHNlLAogICAgICAgICAgJ3hiJzpmYWxzZSwKICAgICAgICAgICduaic6ZmFsc2UsCiAgICAgICAgICAncG9zdGFsYWRkcmVzcyc6ZmFsc2UsCiAgICAgICAgICAnanRseHInOmZhbHNlLAogICAgICAgICAgJ2p0bHhyZGgnOmZhbHNlLAogICAgICAgIH0KICAgICAgICByZXR1cm4gKCBoYXNSb3dFZGl0W2FyZ3MuY29sdW1uLnByb3BlcnR5XSAmJiB0aGlzLmFjdHVhbElzT3BlbkVkaXQgKSA/ICJlZGl0LWNlbGwiIDogImluZm8tY2VsbCI7CiAgICB9CgogICAgLyoqCiAgICAgKiDmlrDlu7rpu5jorqTlgLwKICAgICAqIEBwYXJhbSB7Kn0gIHJvdyDooYzmlbDmja4KICAgICAqIEBtZW1iZXJvZiBUWExYWUdfMkJhc2UKICAgICAqLwogICAgcHVibGljIGNyZWF0ZURlZmF1bHQocm93OiBhbnkpeyAgICAgICAgICAgICAgICAgICAgCiAgICB9Cn0K"},null]}
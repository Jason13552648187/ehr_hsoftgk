{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-contract\\tree-exp-viewtreeexpbar-treeexpbar\\tree-exp-viewtreeexpbar-treeexpbar-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-contract\\tree-exp-viewtreeexpbar-treeexpbar\\tree-exp-viewtreeexpbar-treeexpbar-base.vue","mtime":1630509411474},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
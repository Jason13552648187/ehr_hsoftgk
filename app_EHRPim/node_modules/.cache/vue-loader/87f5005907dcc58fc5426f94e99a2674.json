{"remainingRequest":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-archives\\pimrecord-treeview\\pimrecord-treeview-base.vue?vue&type=script&lang=tsx&","dependencies":[{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\src\\widgets\\pim-archives\\pimrecord-treeview\\pimrecord-treeview-base.vue","mtime":1630509411369},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630511853252},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511852747},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\ts-loader\\index.js","mtime":1630511985412},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511852775},{"path":"F:\\crod项目\\人事管理系统2\\iBizEHR\\app_EHRPim\\node_modules\\vue-loader\\lib\\index.js","mtime":1630512070338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KaW1wb3J0IHsgVnVlLCBDb21wb25lbnQsIFByb3AsIFByb3ZpZGUsIEVtaXQsIFdhdGNoLCBNb2RlbCxJbmplY3QgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsNCmltcG9ydCB7IENyZWF0ZUVsZW1lbnQgfSBmcm9tICd2dWUnOw0KaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7DQppbXBvcnQgeyBDb250cm9sSW50ZXJmYWNlIH0gZnJvbSAnQC9pbnRlcmZhY2UvY29udHJvbCc7DQppbXBvcnQgeyBVSUFjdGlvblRvb2wsVXRpbCB9IGZyb20gJ0AvdXRpbHMnOw0KaW1wb3J0IE5hdkRhdGFTZXJ2aWNlIGZyb20gJ0Avc2VydmljZS9hcHAvbmF2ZGF0YS1zZXJ2aWNlJzsNCmltcG9ydCBQaW1BcmNoaXZlc1NlcnZpY2UgZnJvbSAnQC9zZXJ2aWNlL3BpbS1hcmNoaXZlcy9waW0tYXJjaGl2ZXMtc2VydmljZSc7DQppbXBvcnQgUElNUmVjb3JkU2VydmljZSBmcm9tICcuL3BpbXJlY29yZC10cmVldmlldy1zZXJ2aWNlJzsNCg0KDQoNCkBDb21wb25lbnQoew0KICAgIGNvbXBvbmVudHM6IHsNCiAgICAgIA0KICAgIH0NCn0pDQpleHBvcnQgZGVmYXVsdCBjbGFzcyBQSU1SZWNvcmRCYXNlIGV4dGVuZHMgVnVlIGltcGxlbWVudHMgQ29udHJvbEludGVyZmFjZSB7DQoNCiAgICAvKioNCiAgICAgKiDlkI3np7ANCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyBuYW1lPzogc3RyaW5nOw0KDQogICAgLyoqDQogICAgICog6KeG5Zu+6YCa6K6v5a+56LGhDQogICAgICoNCiAgICAgKiBAdHlwZSB7U3ViamVjdDxWaWV3U3RhdGU+fQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgdmlld1N0YXRlITogU3ViamVjdDxWaWV3U3RhdGU+Ow0KDQogICAgLyoqDQogICAgICog5bqU55So5LiK5LiL5paHDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIGNvbnRleHQ6IGFueTsNCg0KICAgIC8qKg0KICAgICAqIOinhuWbvuWPguaVsA0KICAgICAqDQogICAgICogQHR5cGUgeyp9DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyB2aWV3cGFyYW1zOiBhbnk7DQoNCiAgICAvKioNCiAgICAgKiDop4blm77nirbmgIHkuovku7YNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAdHlwZSB7KFN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZCl9DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgdmlld1N0YXRlRXZlbnQ6IFN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZDsNCg0KICAgIC8qKg0KICAgICAqIOiOt+WPlumDqOS7tuexu+Weiw0KICAgICAqDQogICAgICogQHJldHVybnMge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBnZXRDb250cm9sVHlwZSgpOiBzdHJpbmcgew0KICAgICAgICByZXR1cm4gJ1RSRUVWSUVXJw0KICAgIH0NCg0KDQoNCiAgICAvKioNCiAgICAgKiDorqHmlbDlmajmnI3liqHlr7nosaHpm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHtBcnJheTwqPn0NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLyAgICANCiAgICBwdWJsaWMgY291bnRlclNlcnZpY2VBcnJheTpBcnJheTxhbnk+ID0gW107DQoNCiAgICAvKioNCiAgICAgKiDlu7rmnoTpg6jku7bmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtQSU1SZWNvcmRTZXJ2aWNlfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgcHVibGljIHNlcnZpY2U6IFBJTVJlY29yZFNlcnZpY2UgPSBuZXcgUElNUmVjb3JkU2VydmljZSh7ICRzdG9yZTogdGhpcy4kc3RvcmUgfSk7DQoNCiAgICAvKioNCiAgICAgKiDlrp7kvZPmnI3liqHlr7nosaENCiAgICAgKg0KICAgICAqIEB0eXBlIHtQaW1BcmNoaXZlc1NlcnZpY2V9DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgYXBwRW50aXR5U2VydmljZTogUGltQXJjaGl2ZXNTZXJ2aWNlID0gbmV3IFBpbUFyY2hpdmVzU2VydmljZSh7ICRzdG9yZTogdGhpcy4kc3RvcmUgfSk7DQogICAgDQoNCg0KICAgIC8qKg0KICAgICAqIOWFs+mXreinhuWbvg0KICAgICAqDQogICAgICogQHBhcmFtIHthbnl9IGFyZ3MNCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBjbG9zZVZpZXcoYXJnczogYW55KTogdm9pZCB7DQogICAgICAgIGxldCBfdGhpczogYW55ID0gdGhpczsNCiAgICAgICAgX3RoaXMuJGVtaXQoJ2Nsb3NldmlldycsIFthcmdzXSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogIOiuoeaVsOWZqOWIt+aWsA0KICAgICAqDQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgY291bnRlclJlZnJlc2goKXsNCiAgICAgICAgY29uc3QgX3RoaXM6YW55ID10aGlzOw0KICAgICAgICBpZihfdGhpcy5jb3VudGVyU2VydmljZUFycmF5ICYmIF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkubGVuZ3RoID4wKXsNCiAgICAgICAgICAgIF90aGlzLmNvdW50ZXJTZXJ2aWNlQXJyYXkuZm9yRWFjaCgoaXRlbTphbnkpID0+ew0KICAgICAgICAgICAgICAgIGlmKGl0ZW0ucmVmcmVzaERhdGEgJiYgaXRlbS5yZWZyZXNoRGF0YSBpbnN0YW5jZW9mIEZ1bmN0aW9uKXsNCiAgICAgICAgICAgICAgICAgICAgaXRlbS5yZWZyZXNoRGF0YSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pDQogICAgICAgIH0NCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIOiOt+WPluWkmumhueaVsOaNrg0KICAgICAqDQogICAgICogQHJldHVybnMge2FueVtdfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgcHVibGljIGdldERhdGFzKCk6IGFueVtdIHsNCiAgICAgICAgcmV0dXJuIFt0aGlzLmN1cnJlbnRzZWxlY3RlZE5vZGVdOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPluWNlemhueagkQ0KICAgICAqDQogICAgICogQHJldHVybnMgeyp9DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZ2V0RGF0YSgpOiBhbnkgew0KICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50c2VsZWN0ZWROb2RlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaYr+WQpuWNlemAiQ0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCh7IGRlZmF1bHQ6IHRydWUgfSkgcHVibGljIGlzU2luZ2xlU2VsZWN0ITogYm9vbGVhbjsNCg0KICAgIC8qKg0KICAgICAqIOaYr+WQpum7mOiupOmAieS4reesrOS4gOadoeaVsOaNrg0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCh7IGRlZmF1bHQ6IGZhbHNlIH0pIHB1YmxpYyBpc1NlbGVjdEZpcnN0RGVmYXVsdCE6IGJvb2xlYW47DQoNCiAgICAvKioNCiAgICAgKiDmnp3lubLoioLngrnmmK/lkKblj6/nlKjvvIjlhbfmnInmlbDmja7og73lipvvvIzlj6/mipvlh7rvvIkNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCh7ZGVmYXVsdDp0cnVlfSkgcHVibGljIGlzQnJhbmNoQXZhaWxhYmxlITogYm9vbGVhbjsNCg0KICAgIC8qKg0KICAgICAqIOaYvuekuuWkhOeQhuaPkOekug0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCh7IGRlZmF1bHQ6IHRydWUgfSkgcHVibGljIHNob3dCdXN5SW5kaWNhdG9yPzogYm9vbGVhbjsNCg0KICAgIC8qKg0KICAgICAqIOWIneWni+WMluWujOaIkA0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgaW5pdGVkOiBib29sZWFuID0gZmFsc2U7DQoNCiAgICAvKioNCiAgICAgKiDlt7LpgInkuK3mlbDmja7pm4blkIgNCiAgICAgKg0KICAgICAqIEB0eXBlIHsqfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgcHVibGljIHNlbGVjdGVkTm9kZXM6IGFueSA9IFtdOw0KDQogICAgLyoqDQogICAgICog5b2T5YmN6YCJ5Lit5pWw5o2u6aG5DQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBjdXJyZW50c2VsZWN0ZWROb2RlOiBhbnkgPSB7fTsNCg0KICAgIC8qKg0KICAgICAqIOmAieS4reaVsOaNruWtl+espuS4sg0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIHNlbGVjdGVkRGF0YT86IHN0cmluZzsNCg0KICAgIC8qKg0KICAgICAqIOmAieS4reWAvOWPmOWMlg0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBuZXdWYWwNCiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbA0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgQFdhdGNoKCdzZWxlY3RlZERhdGEnKQ0KICAgIHB1YmxpYyBvblZhbHVlQ2hhbmdlKG5ld1ZhbDogYW55LCBvbGRWYWw6IGFueSkgew0KICAgICAgICB0aGlzLmVjaG9zZWxlY3RlZE5vZGVzID0gbmV3VmFsID8gdGhpcy5pc1NpbmdsZVNlbGVjdCA/IEpTT04ucGFyc2UobmV3VmFsKVswXSA6IEpTT04ucGFyc2UobmV3VmFsKSA6IFtdOw0KICAgICAgICB0aGlzLnNlbGVjdGVkTm9kZXMgPSBbXTsNCiAgICAgICAgaWYodGhpcy5lY2hvc2VsZWN0ZWROb2Rlcy5sZW5ndGggPiAwKXsNCiAgICAgICAgICAgIGxldCBBbGxub2Rlc09iaiA9ICh0aGlzLiRyZWZzLnRyZWVleHBiYXJfdHJlZSBhcyBhbnkpLnN0b3JlLm5vZGVzTWFwOw0KICAgICAgICAgICAgbGV0IEFsbG5vZGVzQXJyYXkgOiBhbnlbXSA9IFtdOw0KICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gQWxsbm9kZXNPYmopIHsNCiAgICAgICAgICAgICAgaWYgKEFsbG5vZGVzT2JqLmhhc093blByb3BlcnR5KGtleSkpIHsNCiAgICAgICAgICAgICAgICBBbGxub2Rlc0FycmF5LnB1c2goQWxsbm9kZXNPYmpba2V5XS5kYXRhKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdGhpcy5zZXREZWZhdWx0U2VsZWN0aW9uKEFsbG5vZGVzQXJyYXkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Zue5pi+6YCJ5Lit5pWw5o2u6ZuG5ZCIDQogICAgICoNCiAgICAgKiBAdHlwZSB7Kn0NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBlY2hvc2VsZWN0ZWROb2RlczphbnlbXSA9IHRoaXMuc2VsZWN0ZWREYXRhID8gKCB0aGlzLmlzU2luZ2xlU2VsZWN0ID8gW0pTT04ucGFyc2UodGhpcy5zZWxlY3RlZERhdGEpWzBdXSA6IEpTT04ucGFyc2UodGhpcy5zZWxlY3RlZERhdGEpKSA6IFtdOw0KDQogICAgLyoqDQogICAgICog6YOo5Lu26KGM5Li6LS11cGRhdGUNCiAgICAgKg0KICAgICAqIEB0eXBlIHtzdHJpbmd9DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBAUHJvcCgpIHB1YmxpYyB1cGRhdGVBY3Rpb24hOiBzdHJpbmc7DQoNCiAgICAvKioNCiAgICAgKiDpg6jku7booYzkuLotLWZldGNoDQogICAgICoNCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgQFByb3AoKSBwdWJsaWMgZmV0Y2hBY3Rpb24hOiBzdHJpbmc7DQoNCiAgICAvKioNCiAgICAgKiDpg6jku7booYzkuLotLXJlbW92ZQ0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIHJlbW92ZUFjdGlvbiE6IHN0cmluZzsNCg0KICAgIC8qKg0KICAgICAqIOmDqOS7tuihjOS4ui0tbG9hZA0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIGxvYWRBY3Rpb24hOiBzdHJpbmc7DQoNCiAgICAvKioNCiAgICAgKiDpg6jku7booYzkuLotLWNyZWF0ZQ0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIEBQcm9wKCkgcHVibGljIGNyZWF0ZUFjdGlvbiE6IHN0cmluZzsNCg0KICAgIC8qKg0KICAgICAqIOi/h+a7pOWxnuaApw0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ30NCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzcmZub2RlZmlsdGVyOiBzdHJpbmcgPSAnJzsNCg0KICAgIC8qKg0KICAgICAqIOm7mOiupOi+k+WHuuWbvuaghw0KICAgICAqDQogICAgICogQHR5cGUge2Jvb2xlYW59DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgaXNPdXRwdXRJY29uRGVmYXVsdDogYm9vbGVhbiA9IHRydWU7DQoNCg0KICAgIC8qKg0KICAgICAqIOaVsOaNruWxleW8gOS4u+mUrg0KICAgICAqDQogICAgICogQHR5cGUge3N0cmluZ1tdfQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgQFByb3ZpZGUoKQ0KICAgIHB1YmxpYyBleHBhbmRlZEtleXM6IHN0cmluZ1tdID0gW107DQoNCiAgICAvKioNCiAgICAgKiDpgInkuK3mlbDmja7lj5jmm7Tkuovku7YNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0geyp9IGRhdGENCiAgICAgKiBAcGFyYW0geyp9IGRhdGEg5b2T5YmN6IqC54K55a+55bqU5Lyg5YWl5a+56LGhDQogICAgICogQHBhcmFtIHsqfSBjaGVja2VkU3RhdGUg5qCR55uu5YmN6YCJ5Lit54q25oCB5a+56LGhDQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgb25DaGVjayhkYXRhOiBhbnksIGNoZWNrZWRTdGF0ZTogYW55KSB7DQogICAgICAgIC8vIOWkhOeQhuWkmumAieaVsOaNrg0KICAgICAgICBpZighdGhpcy5pc1NpbmdsZVNlbGVjdCl7DQogICAgICAgICAgICBsZXQgbGVhZk5vZGVzID0gY2hlY2tlZFN0YXRlLmNoZWNrZWROb2Rlcy5maWx0ZXIoKGl0ZW06YW55KSA9PiBpdGVtLmxlYWYpOw0KICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE5vZGVzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShsZWFmTm9kZXMpKTsNCiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdGlvbmNoYW5nZScsIHRoaXMuc2VsZWN0ZWROb2Rlcyk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgInkuK3mlbDmja7lj5jmm7Tkuovku7YNCiAgICAgKg0KICAgICAqIEBwdWJsaWMNCiAgICAgKiBAcGFyYW0geyp9IGRhdGEg6IqC54K55a+55bqU5Lyg5YWl5a+56LGhDQogICAgICogQHBhcmFtIHsqfSBub2RlIOiKgueCueWvueW6lG5vZGXlr7nosaENCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzZWxlY3Rpb25DaGFuZ2UoZGF0YTogYW55LCBub2RlOiBhbnkpIHsNCiAgICAgICAgLy8g56aB55So6aG55aSE55CGDQogICAgICAgIGlmIChkYXRhLmRpc2FibGVkKXsNCiAgICAgICAgICAgIG5vZGUuaXNDdXJyZW50ID0gZmFsc2U7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgLy8g5Y+q5aSE55CG5pyA5bqV5bGC5a2Q6IqC54K5DQogICAgICAgIGlmKHRoaXMuaXNCcmFuY2hBdmFpbGFibGUgfHwgZGF0YS5sZWFmKXsNCiAgICAgICAgICAgIHRoaXMuY3VycmVudHNlbGVjdGVkTm9kZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpOw0KICAgICAgICAgICAgLy8g5Y2V6YCJ55u05o6l5pu/5o2iDQogICAgICAgICAgICBpZih0aGlzLmlzU2luZ2xlU2VsZWN0KXsNCiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTm9kZXMgPSBbdGhpcy5jdXJyZW50c2VsZWN0ZWROb2RlXTsNCiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3Rpb25jaGFuZ2UnLCB0aGlzLnNlbGVjdGVkTm9kZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLy8g5aSa6YCJ55SoY2hlY2vmlrnms5UNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFZ1ZeWjsOaYjuWRqOacnyjlpITnkIbnu4Tku7bnmoTovpPlhaXlsZ7mgKcpDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBjcmVhdGVkKCkgew0KICAgICAgICB0aGlzLmFmdGVyQ3JlYXRlZCgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaJp+ihjGNyZWF0ZWTlkI7nmoTpgLvovpENCiAgICAgKg0KICAgICAqICBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLyAgICANCiAgICBwdWJsaWMgYWZ0ZXJDcmVhdGVkKCl7DQogICAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZSkgew0KICAgICAgICAgICAgdGhpcy52aWV3U3RhdGVFdmVudCA9IHRoaXMudmlld1N0YXRlLnN1YnNjcmliZSgoeyB0YWcsIGFjdGlvbiwgZGF0YSB9KSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuaXModGFnLCB0aGlzLm5hbWUpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnbG9hZCcsIGFjdGlvbikpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0ZWQgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5pcygnZmlsdGVyJywgYWN0aW9uKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnNyZm5vZGVmaWx0ZXIgID0gZGF0YS5zcmZub2RlZmlsdGVyOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hfYWxsKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaXMoJ3JlZnJlc2hfcGFyZW50JywgYWN0aW9uKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hfcGFyZW50KCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlr7nmoJHoioLngrnov5vooYznrZvpgInmk43kvZwNCiAgICAgKiBAbWVtYmVyb2YgT3JkZXJUcmVlDQogICAgICovDQogICAgcHVibGljIGZpbHRlck5vZGUodmFsdWU6YW55LCBkYXRhOmFueSkgew0KICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gdHJ1ZTsNCiAgICAgICAgcmV0dXJuIGRhdGEudGV4dC5pbmRleE9mKHZhbHVlKSAhPT0gLTE7DQogICAgfQ0KDQoNCiAgICAvKioNCiAgICAgKiB2dWUg55Sf5ZG95ZGo5pyfDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBkZXN0cm95ZWQoKSB7DQogICAgICAgIHRoaXMuYWZ0ZXJEZXN0cm95KCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5omn6KGMZGVzdHJveWVk5ZCO55qE6YC76L6RDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBhZnRlckRlc3Ryb3koKSB7DQogICAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZUV2ZW50KSB7DQogICAgICAgICAgICB0aGlzLnZpZXdTdGF0ZUV2ZW50LnVuc3Vic2NyaWJlKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliLfmlrDmlbDmja4NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgcHVibGljIHJlZnJlc2hfYWxsKCk6IHZvaWQgew0KICAgICAgICB0aGlzLmluaXRlZCA9IGZhbHNlOw0KICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgICB0aGlzLmluaXRlZCA9IHRydWU7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIt+aWsOeItuiKgueCuQ0KICAgICAqDQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgcmVmcmVzaF9wYXJlbnQoKTogdm9pZCB7DQogICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmN1cnJlbnRzZWxlY3RlZE5vZGUpLmxlbmd0aCA9PT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IHRyZWU6IGFueSA9IHRoaXMuJHJlZnMudHJlZWV4cGJhcl90cmVlOw0KICAgICAgICBjb25zdCBub2RlOiBhbnkgPSB0cmVlLmdldE5vZGUodGhpcy5jdXJyZW50c2VsZWN0ZWROb2RlLmlkKTsNCiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLnBhcmVudCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGxldCBjdXJOb2RlOmFueSA9IHt9OyANCiAgICAgICAgY29uc3QgeyBwYXJlbnQ6IF9wYXJlbnQgfSA9IG5vZGU7DQogICAgICAgIGN1ck5vZGUgPSBVdGlsLmRlZXBPYmplY3RNZXJnZShjdXJOb2RlLF9wYXJlbnQpOw0KICAgICAgICBsZXQgdGVtcENvbnRleHQ6YW55ID0ge307DQogICAgICAgIGlmKGN1ck5vZGUuZGF0YSAmJiBjdXJOb2RlLmRhdGEuc3JmYXBwY3R4KXsNCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGVtcENvbnRleHQsY3VyTm9kZS5kYXRhLnNyZmFwcGN0eCk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZW1wQ29udGV4dCx0aGlzLmNvbnRleHQpOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IGlkOiBzdHJpbmcgPSBfcGFyZW50LmtleSA/IF9wYXJlbnQua2V5IDogJyMnOw0KICAgICAgICBjb25zdCBwYXJhbTogYW55ID0geyBzcmZub2RlaWQ6IGlkIH07DQogICAgICAgIHRoaXMucmVmcmVzaF9ub2RlKHRlbXBDb250ZXh0LHBhcmFtLCB0cnVlKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmlbDmja7liqDovb0NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gbm9kZQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgcHVibGljIGxvYWQobm9kZTogYW55ID0ge30sIHJlc29sdmU/OiBhbnkpIHsNCiAgICAgICAgaWYgKG5vZGUuZGF0YSAmJiBub2RlLmRhdGEuY2hpbGRyZW4pIHsNCiAgICAgICAgICAgIHJlc29sdmUobm9kZS5kYXRhLmNoaWxkcmVuKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBwYXJhbXM6IGFueSA9IHsNCiAgICAgICAgICAgIHNyZm5vZGVpZDogbm9kZS5kYXRhICYmIG5vZGUuZGF0YS5pZCA/IG5vZGUuZGF0YS5pZCA6ICIjIiwNCiAgICAgICAgICAgIHNyZm5vZGVmaWx0ZXI6IHRoaXMuc3Jmbm9kZWZpbHRlcg0KICAgICAgICB9Ow0KICAgICAgICBsZXQgdGVtcFZpZXdQYXJhbXM6YW55ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnZpZXdwYXJhbXMpKTsNCiAgICAgICAgbGV0IGN1ck5vZGU6YW55ID0ge307IA0KICAgICAgICBjdXJOb2RlID0gVXRpbC5kZWVwT2JqZWN0TWVyZ2UoY3VyTm9kZSxub2RlKTsNCiAgICAgICAgbGV0IHRlbXBDb250ZXh0OmFueSA9IHRoaXMuY29tcHV0ZWN1ck5vZGVDb250ZXh0KGN1ck5vZGUpOw0KICAgICAgICBpZihjdXJOb2RlLmRhdGEgJiYgY3VyTm9kZS5kYXRhLnNyZnBhcmVudGRlbmFtZSl7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKHRlbXBDb250ZXh0LHtzcmZwYXJlbnRkZW5hbWU6Y3VyTm9kZS5kYXRhLnNyZnBhcmVudGRlbmFtZX0pOw0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZW1wVmlld1BhcmFtcyx7c3JmcGFyZW50ZGVuYW1lOmN1ck5vZGUuZGF0YS5zcmZwYXJlbnRkZW5hbWV9KTsNCiAgICAgICAgfQ0KICAgICAgICBpZihjdXJOb2RlLmRhdGEgJiYgY3VyTm9kZS5kYXRhLnNyZnBhcmVudGtleSl7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKHRlbXBDb250ZXh0LHtzcmZwYXJlbnRrZXk6Y3VyTm9kZS5kYXRhLnNyZnBhcmVudGtleX0pOw0KICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZW1wVmlld1BhcmFtcyx7c3JmcGFyZW50a2V5OmN1ck5vZGUuZGF0YS5zcmZwYXJlbnRrZXl9KTsNCiAgICAgICAgfQ0KICAgICAgICBPYmplY3QuYXNzaWduKHBhcmFtcyx7dmlld3BhcmFtczp0ZW1wVmlld1BhcmFtc30pOw0KICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Tm9kZXModGVtcENvbnRleHQscGFyYW1zKS50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICLplJnor68iLCBkZXNjOiByZXNwb25zZS5pbmZvIH0pOw0KICAgICAgICAgICAgICAgIHJlc29sdmUoW10pOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNvbnN0IF9pdGVtcyA9IHJlc3BvbnNlLmRhdGE7DQogICAgICAgICAgICB0aGlzLmZvcm1hdEV4cGFuZGVkKF9pdGVtcyk7DQogICAgICAgICAgICByZXNvbHZlKFsuLi5faXRlbXNdKTsNCiAgICAgICAgICAgIGxldCBpc1Jvb3QgPSBPYmplY3QuaXMobm9kZS5sZXZlbCwwKTsNCiAgICAgICAgICAgIGxldCBpc1NlbGVjdGVkQWxsID0gbm9kZS5jaGVja2VkOw0KICAgICAgICAgICAgdGhpcy5zZXREZWZhdWx0U2VsZWN0aW9uKF9pdGVtcywgaXNSb290LCBpc1NlbGVjdGVkQWxsKTsNCiAgICAgICAgICAgIHRoaXMuJGVtaXQoImxvYWQiLCBfaXRlbXMpOw0KICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2U6IGFueSkgPT4gew0KICAgICAgICAgICAgcmVzb2x2ZShbXSk7DQogICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLiROb3RpY2UuZXJyb3IoeyB0aXRsZTogIumUmeivryIsIGRlc2M6IHJlc3BvbnNlLmluZm8gfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiuoeeul+W9k+WJjeiKgueCueeahOS4iuS4i+aWhw0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBjdXJOb2RlIOW9k+WJjeiKgueCuQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgcHVibGljIGNvbXB1dGVjdXJOb2RlQ29udGV4dChjdXJOb2RlOmFueSl7DQogICAgICAgIGxldCB0ZW1wQ29udGV4dDphbnkgPSB7fTsNCiAgICAgICAgaWYoY3VyTm9kZSAmJiBjdXJOb2RlLmRhdGEgJiYgY3VyTm9kZS5kYXRhLnNyZmFwcGN0eCl7DQogICAgICAgICAgICB0ZW1wQ29udGV4dCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY3VyTm9kZS5kYXRhLnNyZmFwcGN0eCkpOw0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIHRlbXBDb250ZXh0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHQpKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdGVtcENvbnRleHQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yi35paw5Yqf6IO9DQogICAgICoNCiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzDQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgcmVmcmVzaChhcmdzOiBhbnlbXSk6IHZvaWQgew0KICAgICAgICB0aGlzLnJlZnJlc2hfYWxsKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yi35paw6IqC54K5DQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHsqfSBbY3VyQ29udGV4dF0g5b2T5YmN6IqC54K55LiK5LiL5paHDQogICAgICogQHBhcmFtIHsqfSBbYXJnPXt9XSDlvZPliY3oioLngrnpmYTliqDlj4LmlbANCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBhcmVudG5vZGUg5piv5ZCm5piv5Yi35paw54i26IqC54K5DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgcmVmcmVzaF9ub2RlKGN1ckNvbnRleHQ6YW55LGFyZzogYW55ID0ge30sIHBhcmVudG5vZGU6IGJvb2xlYW4pOiB2b2lkIHsNCiAgICAgICAgY29uc3QgeyBzcmZub2RlaWQ6IGlkIH0gPSBhcmc7DQogICAgICAgIE9iamVjdC5hc3NpZ24oYXJnLHt2aWV3cGFyYW1zOnRoaXMudmlld3BhcmFtc30pOw0KICAgICAgICBjb25zdCBnZXQ6IFByb21pc2U8YW55PiA9IHRoaXMuc2VydmljZS5nZXROb2RlcyhKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29udGV4dCkpLGFyZyk7DQogICAgICAgIGdldC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7DQogICAgICAgICAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kTm90aWNlLmVycm9yKHsgdGl0bGU6ICfplJnor68nLCBkZXNjOiByZXNwb25zZS5pbmZvIH0pOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNvbnN0IF9pdGVtcyA9IFsuLi5yZXNwb25zZS5kYXRhXTsNCiAgICAgICAgICAgIHRoaXMuZm9ybWF0RXhwYW5kZWQoX2l0ZW1zKTsNCiAgICAgICAgICAgIGNvbnN0IHRyZWU6IGFueSA9IHRoaXMuJHJlZnMudHJlZWV4cGJhcl90cmVlOw0KICAgICAgICAgICAgdHJlZS51cGRhdGVLZXlDaGlsZHJlbihpZCwgX2l0ZW1zKTsNCiAgICAgICAgICAgIGlmIChwYXJlbnRub2RlKSB7DQogICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50c2VsZWN0ZWROb2RlID0ge307DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLnNldERlZmF1bHRTZWxlY3Rpb24oX2l0ZW1zKTsNCiAgICAgICAgfSkuY2F0Y2goKHJlc3BvbnNlOiBhbnkpID0+IHsNCiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDQwMSkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMuJE5vdGljZS5lcnJvcih7IHRpdGxlOiAn6ZSZ6K+vJywgZGVzYzogcmVzcG9uc2UuaW5mbyB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6buY6K6k5bGV5byA6IqC54K5DQogICAgICoNCiAgICAgKiBAcHVibGljDQogICAgICogQHBhcmFtIHthbnlbXX0gaXRlbXMNCiAgICAgKiBAcmV0dXJucyB7YW55W119DQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZm9ybWF0RXhwYW5kZWQoaXRlbXM6IGFueVtdKTogYW55W10gew0KICAgICAgICBjb25zdCBkYXRhOiBhbnlbXSA9IFtdOw0KICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7DQogICAgICAgICAgICBpZiAoaXRlbS5leHBhbmRlZCB8fCAoaXRlbS5jaGlsZHJlbiAmJiBpdGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApKSB7DQogICAgICAgICAgICAgICAgdGhpcy5leHBhbmRlZEtleXMucHVzaChpdGVtLmlkKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICAgIHJldHVybiBkYXRhOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiuvue9rum7mOiupOmAieS4rSzlm57mmL7mlbDpobnvvIzpgInkuK3miYDmnInlrZDoioLngrkNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7YW55W119IGl0ZW1zIOW9k+WJjeiKgueCueaJgOacieWtkOiKgueCuembhuWQiA0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNSb290IOaYr+WQpuaYr+WKoOi9veagueiKgueCuQ0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTZWxlY3RlZEFsbCDmmK/lkKbpgInkuK3miYDmnInlrZDoioLngrkNCiAgICAgKiBAbWVtYmVyb2YgUElNUmVjb3JkQmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzZXREZWZhdWx0U2VsZWN0aW9uKGl0ZW1zOiBhbnlbXSwgaXNSb290OiBib29sZWFuID0gZmFsc2UsIGlzU2VsZWN0ZWRBbGw6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQgew0KICAgICAgICBpZihpdGVtcy5sZW5ndGggPT0gMCl7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgbGV0IGRlZmF1bHREYXRhOiBhbnk7DQogICAgICAgIC8vIOWvvOiIquS4remAieS4reesrOS4gOadoemFjee9rueahOm7mOiupOmAieS4rSzmsqHmnInpgInkuK3nrKzkuIDmnaENCiAgICAgICAgaWYodGhpcy5pc1NlbGVjdEZpcnN0RGVmYXVsdCl7DQogICAgICAgICAgICBpZih0aGlzLmlzU2luZ2xlU2VsZWN0KXsNCiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBpdGVtcy5maW5kSW5kZXgoKGl0ZW06IGFueSkgPT4gaXRlbS5zZWxlY3RlZCk7DQogICAgICAgICAgICAgICAgaWYoaW5kZXggPT09IC0xKSB7DQogICAgICAgICAgICAgICAgICAgIGlmKGlzUm9vdCl7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDA7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGRlZmF1bHREYXRhID0gaXRlbXNbaW5kZXhdOw0KICAgICAgICAgICAgICAgIHRoaXMuc2V0VHJlZU5vZGVIaWdoTGlnaHQoZGVmYXVsdERhdGEpOw0KICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudHNlbGVjdGVkTm9kZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGVmYXVsdERhdGEpKTsNCiAgICAgICAgICAgICAgICBpZih0aGlzLmlzQnJhbmNoQXZhaWxhYmxlIHx8IGRlZmF1bHREYXRhLmxlYWYpew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTm9kZXMgPSBbdGhpcy5jdXJyZW50c2VsZWN0ZWROb2RlXTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0aW9uY2hhbmdlJywgdGhpcy5zZWxlY3RlZE5vZGVzKTsNCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIC8vIOW3sumAieaVsOaNrueahOWbnuaYvg0KICAgICAgICBpZih0aGlzLmVjaG9zZWxlY3RlZE5vZGVzICYmIHRoaXMuZWNob3NlbGVjdGVkTm9kZXMubGVuZ3RoID4gMCl7DQogICAgICAgICAgICBsZXQgY2hlY2tlZE5vZGVzID0gaXRlbXMuZmlsdGVyKChpdGVtOmFueSk9PnsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lY2hvc2VsZWN0ZWROb2Rlcy5zb21lKCh2YWw6YW55KT0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYoT2JqZWN0LmlzKGl0ZW0uc3Jma2V5LHZhbC5zcmZrZXkpICYmIE9iamVjdC5pcyhpdGVtLnNyZm1ham9ydGV4dCx2YWwuc3JmbWFqb3J0ZXh0KSl7DQogICAgICAgICAgICAgICAgICAgICAgICB2YWwudXNlZCA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICBpZihjaGVja2VkTm9kZXMubGVuZ3RoID4gMCl7DQogICAgICAgICAgICAgICAgdGhpcy5lY2hvc2VsZWN0ZWROb2RlcyA9IHRoaXMuZWNob3NlbGVjdGVkTm9kZXMuZmlsdGVyKChpdGVtOmFueSk9PiAhaXRlbS51c2VkKTsNCiAgICAgICAgICAgICAgICAvLyDniLboioLngrnpgInkuK3ml7bvvIzkuI3pnIDopoHmiafooYzov5nmrrXvvIzkvJrpgInkuK3miYDmnInlrZDoioLngrkNCiAgICAgICAgICAgICAgICBpZighaXNTZWxlY3RlZEFsbCl7DQogICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNTaW5nbGVTZWxlY3Qpew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUcmVlTm9kZUhpZ2hMaWdodChjaGVja2VkTm9kZXNbMF0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50c2VsZWN0ZWROb2RlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjaGVja2VkTm9kZXNbMF0pKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWROb2RlcyA9IFt0aGlzLmN1cnJlbnRzZWxlY3RlZE5vZGVdOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWROb2RlcyA9IHRoaXMuc2VsZWN0ZWROb2Rlcy5jb25jYXQoY2hlY2tlZE5vZGVzKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyZWU6IGFueSA9IHRoaXMuJHJlZnMudHJlZWV4cGJhcl90cmVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS5zZXRDaGVja2VkTm9kZXModGhpcy5zZWxlY3RlZE5vZGVzKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAvLyDniLboioLngrnpgInkuK3ml7bvvIzpgInkuK3miYDmnInlrZDoioLngrkNCiAgICAgICAgaWYoaXNTZWxlY3RlZEFsbCl7DQogICAgICAgICAgICBsZXQgbGVhZk5vZGVzID0gaXRlbXMuZmlsdGVyKChpdGVtOmFueSkgPT4gaXRlbS5sZWFmKTsNCiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWROb2RlcyA9IHRoaXMuc2VsZWN0ZWROb2Rlcy5jb25jYXQobGVhZk5vZGVzKTsNCiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdGlvbmNoYW5nZScsIHRoaXMuc2VsZWN0ZWROb2Rlcyk7DQogICAgICAgIH0NCiAgICB9IA0KDQogICAgLyoqDQogICAgICog57uY5Yi25Y+z5Ye76I+c5Y2VDQogICAgICoNCiAgICAgKiBAcGFyYW0geyp9IG5vZGUNCiAgICAgKiBAcmV0dXJucw0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgcHVibGljIHJlbmRlckNvbnRleHRNZW51KG5vZGU6IGFueSkgew0KICAgICAgICBsZXQgY29udGVudDsNCiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5kYXRhKSB7DQogICAgICAgICAgICBjb25zdCBkYXRhOiBhbnkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG5vZGUuZGF0YSkpOw0KICAgICAgICAgICAgdGhpcy5jdXJyZW50c2VsZWN0ZWROb2RlID0geyAuLi5kYXRhIH07DQogICAgICAgICAgICBjb25zdCB0YWdzOiBzdHJpbmdbXSA9IGRhdGEuaWQuc3BsaXQoJzsnKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gY29udGVudDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDorr7nva7pgInkuK3pq5jkuq4NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Kn0gZGF0YQ0KICAgICAqIEBtZW1iZXJvZiBQSU1SZWNvcmRCYXNlDQogICAgICovDQogICAgcHVibGljIHNldFRyZWVOb2RlSGlnaExpZ2h0KGRhdGE6IGFueSk6IHZvaWQgew0KICAgICAgICBjb25zdCB0cmVlOiBhbnkgPSB0aGlzLiRyZWZzLnRyZWVleHBiYXJfdHJlZTsNCiAgICAgICAgdHJlZS5zZXRDdXJyZW50S2V5KGRhdGEuaWQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaJp+ihjOm7mOiupOeVjOmdouihjOS4ug0KICAgICAqDQogICAgICogQHBhcmFtIHsqfSBub2RlDQogICAgICogQG1lbWJlcm9mIFBJTVJlY29yZEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZG9EZWZhdWx0QWN0aW9uKG5vZGU6IGFueSkgew0KICAgICAgICBpZiAobm9kZSAmJiBub2RlLmRhdGEpIHsNCiAgICAgICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IG5vZGUuZGF0YTsNCiAgICAgICAgICAgIGNvbnN0IHRhZ3M6IHN0cmluZ1tdID0gZGF0YS5pZC5zcGxpdCgnOycpOw0KICAgICAgICB9DQogICAgICAgIHRoaXMuJGVtaXQoJ25vZGVkYmxjbGljaycsIHRoaXMuc2VsZWN0ZWROb2Rlcyk7DQogICAgfQ0KDQp9DQo="},null]}